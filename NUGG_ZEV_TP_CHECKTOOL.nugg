<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZEV_TP_CHECKTOOL">
 <PROG NAME="ZEV_TP_CHECKTOOL" VARCL="X" SUBC="1" RMAND="100" RLOAD="N" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="008" ENTRY="Desktop not found" LENGTH="50 "/>
    <textElement ID="I" KEY="009" ENTRY="Save Transportlist" LENGTH="50 "/>
    <textElement ID="I" KEY="010" ENTRY="Object data retrieved..." LENGTH="50 "/>
    <textElement ID="I" KEY="011" ENTRY="Objects checked" LENGTH="50 "/>
    <textElement ID="I" KEY="012" ENTRY="Desktop not found" LENGTH="50 "/>
    <textElement ID="I" KEY="013" ENTRY="Select a transportlist" LENGTH="50 "/>
    <textElement ID="I" KEY="014" ENTRY="Selecting data..." LENGTH="50 "/>
    <textElement ID="I" KEY="015" ENTRY="RC" LENGTH="50 "/>
    <textElement ID="I" KEY="016" ENTRY="Return Code" LENGTH="50 "/>
    <textElement ID="I" KEY="017" ENTRY="Descript." LENGTH="50 "/>
    <textElement ID="I" KEY="018" ENTRY="Description" LENGTH="50 "/>
    <textElement ID="I" KEY="019" ENTRY="No transports need to be added" LENGTH="50 "/>
    <textElement ID="I" KEY="020" ENTRY="To see the conflicts, doubleclick the warning" LENGTH="50 "/>
    <textElement ID="I" KEY="021" ENTRY="No next conflict found" LENGTH="50 "/>
    <textElement ID="I" KEY="022" ENTRY="records read and added." LENGTH="50 "/>
    <textElement ID="I" KEY="023" ENTRY="records checked (documentation)" LENGTH="50 "/>
    <textElement ID="I" KEY="024" ENTRY="Info" LENGTH="50 "/>
    <textElement ID="I" KEY="025" ENTRY="Clear" LENGTH="50 "/>
    <textElement ID="I" KEY="026" ENTRY="Def." LENGTH="50 "/>
    <textElement ID="I" KEY="027" ENTRY="Information" LENGTH="50 "/>
    <textElement ID="I" KEY="028" ENTRY="General Info" LENGTH="50 "/>
    <textElement ID="I" KEY="029" ENTRY="Error occurred" LENGTH="50 "/>
    <textElement ID="I" KEY="030" ENTRY="Documentation for" LENGTH="50 "/>
    <textElement ID="I" KEY="031" ENTRY="Cancelled by user" LENGTH="50 "/>
    <textElement ID="I" KEY="032" ENTRY="Hints and Tips for" LENGTH="50 "/>
    <textElement ID="I" KEY="033" ENTRY="ERR." LENGTH="50 "/>
    <textElement ID="I" KEY="034" ENTRY="Warn" LENGTH="50 "/>
    <textElement ID="I" KEY="035" ENTRY="The file has been saved" LENGTH="50 "/>
    <textElement ID="I" KEY="036" ENTRY="Cancelled by user" LENGTH="50 "/>
    <textElement ID="I" KEY="037" ENTRY="Yes" LENGTH="50 "/>
    <textElement ID="I" KEY="038" ENTRY="ERROR:" LENGTH="50 "/>
    <textElement ID="I" KEY="039" ENTRY="Runtime Alert" LENGTH="13 "/>
    <textElement ID="I" KEY="041" ENTRY="This will take approx. 5-15 minutes... Continue?" LENGTH="48 "/>
    <textElement ID="I" KEY="042" ENTRY="This has already been done. Do again?" LENGTH="37 "/>
    <textElement ID="I" KEY="043" ENTRY="No" LENGTH="2 "/>
    <textElement ID="I" KEY="047" ENTRY="Sts" LENGTH="3 "/>
    <textElement ID="I" KEY="048" ENTRY="Status" LENGTH="6 "/>
    <textElement ID="I" KEY="049" ENTRY="File uploaded:" LENGTH="14 "/>
    <textElement ID="I" KEY="050" ENTRY="Checking buffer" LENGTH="15 "/>
    <textElement ID="I" KEY="051" ENTRY="DDIC not transported..." LENGTH="26 "/>
    <textElement ID="I" KEY="052" ENTRY="Retrieving Where Used list" LENGTH="26 "/>
    <textElement ID="I" KEY="053" ENTRY="Collecting DDIC transports" LENGTH="29 "/>
    <textElement ID="I" KEY="B10" ENTRY="Selection range / Upload file" LENGTH="29 "/>
    <textElement ID="I" KEY="B21" ENTRY="Selection criteria" LENGTH="18 "/>
    <textElement ID="I" KEY="B22" ENTRY="File upload" LENGTH="14 "/>
    <textElement ID="I" KEY="B30" ENTRY="Transport Track" LENGTH="15 "/>
    <textElement ID="I" KEY="B40" ENTRY="Check options" LENGTH="13 "/>
    <textElement ID="I" KEY="B50" ENTRY="Exclude from check" LENGTH="18 "/>
    <textElement ID="I" KEY="B60" ENTRY="Overview of used Icons" LENGTH="50 "/>
    <textElement ID="I" KEY="C21" ENTRY="User" LENGTH="4 "/>
    <textElement ID="I" KEY="C22" ENTRY="File name" LENGTH="9 "/>
    <textElement ID="I" KEY="C31" ENTRY="Route" LENGTH="5 "/>
    <textElement ID="I" KEY="C32" ENTRY="--&gt;" LENGTH="3 "/>
    <textElement ID="I" KEY="C33" ENTRY="--&gt;" LENGTH="3 "/>
    <textElement ID="I" KEY="C40" ENTRY="Do not select transports already in production" LENGTH="49 "/>
    <textElement ID="I" KEY="C41" ENTRY="Use User specific layout" LENGTH="24 "/>
    <textElement ID="I" KEY="C42" ENTRY="Skip transport buffer check" LENGTH="27 "/>
    <textElement ID="I" KEY="C43" ENTRY="Check table keys" LENGTH="16 "/>
    <textElement ID="I" KEY="C44" ENTRY="Reset `Checked` field" LENGTH="21 "/>
    <textElement ID="I" KEY="C46" ENTRY="Check ON / Check OFF" LENGTH="20 "/>
    <textElement ID="I" KEY="C51" ENTRY="Objects in the range will not be taken into account when checking the" LENGTH="69 "/>
    <textElement ID="I" KEY="C52" ENTRY="transports. Useful to exclude common customizing tables (like SWOTICE for" LENGTH="73 "/>
    <textElement ID="I" KEY="C53" ENTRY="workflow or the tables for Pricing procedures)." LENGTH="47 "/>
    <textElement ID="I" KEY="C61" ENTRY="Show" LENGTH="4 "/>
    <textElement ID="I" KEY="C62" ENTRY="Hide" LENGTH="4 "/>
    <textElement ID="I" KEY="H01" ENTRY="If there is a warning icon in column `Warning`, double-clicking on the icon will display a list of objects that should be checked" LENGTH="132 "/>
    <textElement ID="I" KEY="H02" ENTRY="You can add these conflicts by means of the button &apos;Add Conflicts&apos; in the application toolbar or doubleclicking the warning" LENGTH="132 "/>
    <textElement ID="I" KEY="M01" ENTRY="Select the row to delete" LENGTH="24 "/>
    <textElement ID="I" KEY="M02" ENTRY="Some transports were deleted from the list because" LENGTH="50 "/>
    <textElement ID="I" KEY="M03" ENTRY="they are missing in Acceptance or are already in" LENGTH="48 "/>
    <textElement ID="I" KEY="M04" ENTRY="Production but not marked for re-import." LENGTH="40 "/>
    <textElement ID="I" KEY="M05" ENTRY="Please check the main list." LENGTH="27 "/>
    <textElement ID="I" KEY="M06" ENTRY="No rows selected: No transports will be added" LENGTH="50 "/>
    <textElement ID="I" KEY="M07" ENTRY="No rows selected: Table keys will not be checked" LENGTH="48 "/>
    <textElement ID="I" KEY="M08" ENTRY="ERROR: ERROR_IN_FIELDS" LENGTH="22 "/>
    <textElement ID="I" KEY="M09" ENTRY="Cancelled: Table keys will not be checked" LENGTH="41 "/>
    <textElement ID="I" KEY="M10" ENTRY="Please select records or put the cursor on a row" LENGTH="48 "/>
    <textElement ID="I" KEY="M11" ENTRY="No records selected that can be re-imported" LENGTH="43 "/>
    <textElement ID="I" KEY="M12" ENTRY="Transport not in Transport Buffer" LENGTH="36 "/>
    <textElement ID="I" KEY="M13" ENTRY="No transports found..." LENGTH="22 "/>
    <textElement ID="I" KEY="M14" ENTRY="Object cannot be displayed..." LENGTH="29 "/>
    <textElement ID="I" KEY="T01" ENTRY="Selected transports" LENGTH="19 "/>
    <textElement ID="I" KEY="T02" ENTRY="Keys can be checked for the following tables" LENGTH="47 "/>
    <textElement ID="I" KEY="T03" ENTRY="Error Creating ALV Grid" LENGTH="23 "/>
    <textElement ID="I" KEY="T04" ENTRY="No of Records found:" LENGTH="20 "/>
    <textElement ID="I" KEY="T05" ENTRY="Information" LENGTH="11 "/>
    <textElement ID="I" KEY="W01" ENTRY="Newer version in target environment!" LENGTH="50 "/>
    <textElement ID="I" KEY="W02" ENTRY="No version found to compare" LENGTH="27 "/>
    <textElement ID="I" KEY="W03" ENTRY="Uses object not in list or production" LENGTH="40 "/>
    <textElement ID="I" KEY="W04" ENTRY="All conflicts are dealt with by the list" LENGTH="50 "/>
    <textElement ID="I" KEY="W05" ENTRY="Object missing in list and target environment!" LENGTH="49 "/>
    <textElement ID="I" KEY="W11" ENTRY="Overwrites version(s), newer version in list" LENGTH="44 "/>
    <textElement ID="I" KEY="W16" ENTRY="Log couldn&apos;t be read or TP not released" LENGTH="40 "/>
    <textElement ID="I" KEY="W17" ENTRY="Previous transport not transported" LENGTH="40 "/>
    <textElement ID="I" KEY="W18" ENTRY="Marked for re-import to target environment" LENGTH="45 "/>
    <textElement ID="I" KEY="W19" ENTRY="Transport not released" LENGTH="40 "/>
    <textElement ID="I" KEY="W20" ENTRY="Release started" LENGTH="40 "/>
    <textElement ID="I" KEY="W21" ENTRY="Couldn&apos;t read log, but object in list" LENGTH="40 "/>
    <textElement ID="I" KEY="W22" ENTRY="Newer version in Acceptance, but in list" LENGTH="40 "/>
    <textElement ID="I" KEY="W23" ENTRY="Newer version in test environment" LENGTH="41 "/>
    <textElement ID="R" ENTRY="Transport Checking Tool (Object level)" LENGTH="70 "/>
    <textElement ID="S" KEY="PA_CHD" ENTRY="        Reset &apos;Checked&apos; field" LENGTH="29 "/>
    <textElement ID="S" KEY="PA_CHECK" ENTRY="        Check ON" LENGTH="16 "/>
    <textElement ID="S" KEY="PA_CHKKY" ENTRY="        Check table keys" LENGTH="24 "/>
    <textElement ID="S" KEY="PA_FILE" ENTRY="        File name" LENGTH="17 "/>
    <textElement ID="S" KEY="PA_ICON" ENTRY="        Show" LENGTH="12 "/>
    <textElement ID="S" KEY="PA_NOCHK" ENTRY="        Check OFF" LENGTH="17 "/>
    <textElement ID="S" KEY="PA_NOICN" ENTRY="        Hide" LENGTH="12 "/>
    <textElement ID="S" KEY="PA_PRD" ENTRY="        Production" LENGTH="18 "/>
    <textElement ID="S" KEY="PA_QAS" ENTRY="        Acceptance" LENGTH="18 "/>
    <textElement ID="S" KEY="PA_SEL" ENTRY="        Build transport list" LENGTH="28 "/>
    <textElement ID="S" KEY="PA_STR" ENTRY="        Short Description" LENGTH="25 "/>
    <textElement ID="S" KEY="PA_UPL" ENTRY="        Upload transport list" LENGTH="29 "/>
    <textElement ID="S" KEY="PA_USER" ENTRY="        Use User specific layout" LENGTH="32 "/>
    <textElement ID="S" KEY="SO_DATE" ENTRY="        Date" LENGTH="12 "/>
    <textElement ID="S" KEY="SO_EXOBJ" ENTRY="        Obj. Name" LENGTH="17 "/>
    <textElement ID="S" KEY="SO_KORR" ENTRY="        Request number" LENGTH="22 "/>
    <textElement ID="S" KEY="SO_PROJ" ENTRY="        CTS Project" LENGTH="19 "/>
    <textElement ID="S" KEY="SO_USER" ENTRY="        User Name" LENGTH="17 "/>
   </language>
  </textPool>
  <pfstatus>
   <pfstatus_sta CODE="STANDARD_FULLSCREEN" MODAL="D" ACTCODE="000001" PFKCODE="000001" BUTCODE="0001" INT_NOTE="Standard for generic List Output in Fullscreen Grid"/>
   <pfstatus_fun CODE="%ML" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Folder" PATH="F"/>
   <pfstatus_fun CODE="%PC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXPORT" ICON_ID="@49@" FUN_TEXT="Local File..." PATH="L"/>
   <pfstatus_fun CODE="%SC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH" ICON_ID="@13@" FUN_TEXT="Find" PATH="N"/>
   <pfstatus_fun CODE="%SC+" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SEARCH_NEXT" ICON_ID="@4E@" FUN_TEXT="Find Next"/>
   <pfstatus_fun CODE="%SL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_MAIL" ICON_ID="@1S@" FUN_TEXT="Mail Recipient" PATH="M"/>
   <pfstatus_fun CODE="&amp;ABC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ABC" ICON_ID="@DL@" FUN_TEXT="ABC Analysis" PATH="A"/>
   <pfstatus_fun CODE="&amp;ADD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INSERT_MULTIPLE_LINES" ICON_ID="@GU@" FUN_TEXT="Add conflicts" ICON_TEXT="Add Conflicts" INFO_TEXT="Add conflicts from one or more selected rows"/>
   <pfstatus_fun CODE="&amp;ADD_FILE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_IMPORT" ICON_ID="@48@" FUN_TEXT="Add file" ICON_TEXT="Add file" INFO_TEXT="Upload another file to be merged with the list"/>
   <pfstatus_fun CODE="&amp;ADD_TP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INSERT_ROW" ICON_ID="@17@" FUN_TEXT="Add transport" ICON_TEXT="Add Transport" INFO_TEXT="Add a single transport to the list"/>
   <pfstatus_fun CODE="&amp;ALL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_ALL" ICON_ID="@4B@" FUN_TEXT="Select All" PATH="E"/>
   <pfstatus_fun CODE="&amp;AQW" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_WORD_PROCESSING" ICON_ID="@DK@" FUN_TEXT="Word Processing..." PATH="W"/>
   <pfstatus_fun CODE="&amp;AUF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Define Totals Drilldown..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Saving..." PATH="S"/>
   <pfstatus_fun CODE="&amp;AVE" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_SAVE" ICON_ID="@DN@" FUN_TEXT="Save Layout..."/>
   <pfstatus_fun CODE="&amp;AVR" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Mean Value" PATH="M"/>
   <pfstatus_fun CODE="&amp;CDF" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Unfreeze Columns" PATH="U"/>
   <pfstatus_fun CODE="&amp;CFI" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Freeze to Column" PATH="F"/>
   <pfstatus_fun CODE="&amp;COUNT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Count" PATH="C"/>
   <pfstatus_fun CODE="&amp;DEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DELETE_ROW" ICON_ID="@18@" FUN_TEXT="Remove transport" ICON_TEXT="Remove" INFO_TEXT="Remove selected transport(s) from the list"/>
   <pfstatus_fun CODE="&amp;DOC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CHANGE_TEXT" ICON_ID="@0Q@" FUN_TEXT="Edit Doc." ICON_TEXT="Edit Doc." INFO_TEXT="Edit Documentation"/>
   <pfstatus_fun CODE="&amp;EB9" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TABLE_SETTINGS" ICON_ID="@36@" FUN_TEXT="Call Up Report..." PATH="R"/>
   <pfstatus_fun CODE="&amp;ELP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_HELP" ICON_ID="@35@" FUN_TEXT="Help"/>
   <pfstatus_fun CODE="&amp;ERW" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Manage..." PATH="M"/>
   <pfstatus_fun CODE="&amp;ETA" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Details"/>
   <pfstatus_fun CODE="&amp;F03" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Back" PATH="B"/>
   <pfstatus_fun CODE="&amp;F12" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Cancel" PATH="A"/>
   <pfstatus_fun CODE="&amp;F15" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Exit" PATH="X"/>
   <pfstatus_fun CODE="&amp;F4" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Possible Entries"/>
   <pfstatus_fun CODE="&amp;GRAPH" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_GRAPHICS" ICON_ID="@0N@" FUN_TEXT="Graphic" PATH="G"/>
   <pfstatus_fun CODE="&amp;IC1" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SELECT_DETAIL" ICON_ID="@16@" FUN_TEXT="Choose"/>
   <pfstatus_fun CODE="&amp;ILD" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER_UNDO" ICON_ID="@GD@" FUN_TEXT="Delete Filter" PATH="L"/>
   <pfstatus_fun CODE="&amp;ILT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_FILTER" ICON_ID="@4G@" FUN_TEXT="Set Filter" PATH="F"/>
   <pfstatus_fun CODE="&amp;IMPORT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SCRAP" ICON_ID="@K3@" FUN_TEXT="Import Again" ICON_TEXT="Re-import" INFO_TEXT="Mark transport for re-import"/>
   <pfstatus_fun CODE="&amp;INFO" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INFORMATION" ICON_ID="@0S@" FUN_TEXT="Information" ICON_TEXT="Info" INFO_TEXT="Information"/>
   <pfstatus_fun CODE="&amp;MAX" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Maximum" PATH="A"/>
   <pfstatus_fun CODE="&amp;MIN" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Minimum" PATH="I"/>
   <pfstatus_fun CODE="&amp;NCONF" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_NEXT_STEP" ICON_ID="@B8@" FUN_TEXT="Next Conflict" ICON_TEXT="Next Conflict" INFO_TEXT="Jump to the next conflict in the list"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Choose..." PATH="E"/>
   <pfstatus_fun CODE="&amp;OAD" TEXTNO="002" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANT_CHOOSE" ICON_ID="@DM@" FUN_TEXT="Select Layout..."/>
   <pfstatus_fun CODE="&amp;ODN" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_DOWN" ICON_ID="@3F@" FUN_TEXT="Sort in Descending Order" PATH="O"/>
   <pfstatus_fun CODE="&amp;OL0" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_ALV_VARIANTS" ICON_ID="@LZ@" FUN_TEXT="Change Layout..."/>
   <pfstatus_fun CODE="&amp;OLX" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_VARIANTS" ICON_ID="@0R@" FUN_TEXT="Change..." PATH="C"/>
   <pfstatus_fun CODE="&amp;OPT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Optimize Width" PATH="P"/>
   <pfstatus_fun CODE="&amp;OUP" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SORT_UP" ICON_ID="@3E@" FUN_TEXT="Sort in Ascending Order" PATH="I"/>
   <pfstatus_fun CODE="&amp;PREP_XLS" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_HISTORY" ICON_ID="@96@" FUN_TEXT="Simple list" ICON_TEXT="Simple list" INFO_TEXT="Display the list on Header level (no object info)"/>
   <pfstatus_fun CODE="&amp;REFRESH" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_REFRESH" ICON_ID="@42@" FUN_TEXT="Refresh"/>
   <pfstatus_fun CODE="&amp;RNT" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_PRINT" ICON_ID="@0X@" FUN_TEXT="Print" PATH="P"/>
   <pfstatus_fun CODE="&amp;RNT_PREV" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_LAYOUT_CONTROL" ICON_ID="@3G@" FUN_TEXT="Print Preview" PATH="R"/>
   <pfstatus_fun CODE="&amp;SAL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_DESELECT_ALL" ICON_ID="@4D@" FUN_TEXT="Deselect All" PATH="D"/>
   <pfstatus_fun CODE="&amp;SAVE" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SYSTEM_SAVE" ICON_ID="@2L@" FUN_TEXT="Save"/>
   <pfstatus_fun CODE="&amp;SUM" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_INTERMEDIATE_SUM" ICON_ID="@5V@" FUN_TEXT="Subtotals..." PATH="S"/>
   <pfstatus_fun CODE="&amp;UMC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_SUM" ICON_ID="@3Z@" FUN_TEXT="Total" PATH="T"/>
   <pfstatus_fun CODE="&amp;VEXCEL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XLS" ICON_ID="@J2@" FUN_TEXT="Microsoft Excel" PATH="M"/>
   <pfstatus_fun CODE="&amp;VGRID" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="SAP List Viewer" PATH="S"/>
   <pfstatus_fun CODE="&amp;VLOTUS" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Lotus 1-2-3" PATH="L"/>
   <pfstatus_fun CODE="&amp;XINT" TEXTNO="001" TEXT_TYPE="S" FUN_TEXT="Additional Functions of SAP Query" PATH="E"/>
   <pfstatus_fun CODE="&amp;XXL" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_XXL" ICON_ID="@DJ@" FUN_TEXT="Spreadsheet..." PATH="A"/>
   <pfstatus_fun CODE="DDIC" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_TIME_CONTROL" ICON_ID="@BH@" FUN_TEXT="Switch DDIC check ON" ICON_TEXT="DDIC Check" INFO_TEXT="Switch DDIC check ON (and perform initial run)"/>
   <pfstatus_fun CODE="EABR" TEXTNO="001" TYPE="S" TEXT_TYPE="S" TEXT_NAME="ICON_CANCEL" ICON_ID="@0W@" FUN_TEXT="Exit" PATH="A"/>
   <pfstatus_fun CODE="GOON" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_OKAY" ICON_ID="@0V@" FUN_TEXT="Continue"/>
   <pfstatus_fun CODE="RECHECK" TEXTNO="001" TEXT_TYPE="S" TEXT_NAME="ICON_EXECUTE_OBJECT" ICON_ID="@15@" FUN_TEXT="Recheck transports" ICON_TEXT="Recheck" INFO_TEXT="Recheck selected transports"/>
   <pfstatus_men CODE="000001" NO="01" REF_TYPE="F" REF_CODE="&amp;RNT_PREV" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="02" REF_TYPE="F" REF_CODE="&amp;RNT" REF_NO="001"/>
   <pfstatus_men CODE="000001" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="04" REF_TYPE="M" REF_CODE="000002"/>
   <pfstatus_men CODE="000001" NO="05" REF_TYPE="M" REF_CODE="000003"/>
   <pfstatus_men CODE="000001" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000001" NO="07" REF_TYPE="F" REF_CODE="&amp;F15" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="01" REF_TYPE="F" REF_CODE="&amp;AQW" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="02" REF_TYPE="F" REF_CODE="&amp;XXL" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="03" REF_TYPE="F" REF_CODE="%PC" REF_NO="001"/>
   <pfstatus_men CODE="000002" NO="04" REF_TYPE="F" REF_CODE="&amp;XINT" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="01" REF_TYPE="F" REF_CODE="%SL" REF_NO="001"/>
   <pfstatus_men CODE="000003" NO="02" REF_TYPE="F" REF_CODE="%ML" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="01" REF_TYPE="F" REF_CODE="&amp;ALL" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="02" REF_TYPE="F" REF_CODE="&amp;SAL" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="04" REF_TYPE="F" REF_CODE="&amp;ILT" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="05" REF_TYPE="F" REF_CODE="&amp;ILD" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="06" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="07" REF_TYPE="F" REF_CODE="&amp;OUP" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="08" REF_TYPE="F" REF_CODE="&amp;ODN" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="09" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="10" REF_TYPE="M" REF_CODE="000005"/>
   <pfstatus_men CODE="000004" NO="11" REF_TYPE="F" REF_CODE="&amp;SUM" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="12" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="13" REF_TYPE="F" REF_CODE="%SC" REF_NO="001"/>
   <pfstatus_men CODE="000004" NO="14" REF_TYPE="S"/>
   <pfstatus_men CODE="000004" NO="15" REF_TYPE="F" REF_CODE="&amp;F12" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="01" REF_TYPE="F" REF_CODE="&amp;UMC" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="02" REF_TYPE="F" REF_CODE="&amp;AVR" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="03" REF_TYPE="F" REF_CODE="&amp;MIN" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="04" REF_TYPE="F" REF_CODE="&amp;MAX" REF_NO="001"/>
   <pfstatus_men CODE="000005" NO="05" REF_TYPE="F" REF_CODE="&amp;COUNT" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="01" REF_TYPE="F" REF_CODE="&amp;ABC" REF_NO="001"/>
   <pfstatus_men CODE="000006" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000006" NO="03" REF_TYPE="F" REF_CODE="&amp;F03" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="01" REF_TYPE="F" REF_CODE="&amp;VGRID" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="02" REF_TYPE="F" REF_CODE="&amp;VEXCEL" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="03" REF_TYPE="F" REF_CODE="&amp;VLOTUS" REF_NO="001"/>
   <pfstatus_men CODE="000007" NO="04" REF_TYPE="S"/>
   <pfstatus_men CODE="000007" NO="05" REF_TYPE="F" REF_CODE="&amp;GRAPH" REF_NO="001"/>
   <pfstatus_men CODE="000008" NO="01" REF_TYPE="M" REF_CODE="000009"/>
   <pfstatus_men CODE="000008" NO="02" REF_TYPE="M" REF_CODE="000010"/>
   <pfstatus_men CODE="000008" NO="03" REF_TYPE="F" REF_CODE="&amp;AUF" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="01" REF_TYPE="F" REF_CODE="&amp;OLX" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="02" REF_TYPE="F" REF_CODE="&amp;OAD" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="03" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="04" REF_TYPE="F" REF_CODE="&amp;AVE" REF_NO="001"/>
   <pfstatus_men CODE="000009" NO="05" REF_TYPE="S"/>
   <pfstatus_men CODE="000009" NO="06" REF_TYPE="F" REF_CODE="&amp;ERW" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="01" REF_TYPE="F" REF_CODE="&amp;OPT" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="02" REF_TYPE="S"/>
   <pfstatus_men CODE="000010" NO="03" REF_TYPE="F" REF_CODE="&amp;CFI" REF_NO="001"/>
   <pfstatus_men CODE="000010" NO="04" REF_TYPE="F" REF_CODE="&amp;CDF" REF_NO="001"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="List" PATH="I" INT_NOTE="Standard Supplement"/>
   <pfstatus_mtx CODE="000001" TEXT_TYPE="S" TEXT="List" PATH="I" INT_NOTE="Standard Supplement"/>
   <pfstatus_mtx CODE="000002" TEXT_TYPE="S" TEXT="Export" PATH="E" INT_NOTE="STANDARD Save"/>
   <pfstatus_mtx CODE="000003" TEXT_TYPE="S" TEXT="Send To" PATH="S"/>
   <pfstatus_mtx CODE="000004" TEXT_TYPE="S" TEXT="Edit" PATH="E" INT_NOTE="STANDARD"/>
   <pfstatus_mtx CODE="000005" TEXT_TYPE="S" TEXT="Calculate" PATH="C"/>
   <pfstatus_mtx CODE="000006" TEXT_TYPE="S" TEXT="Goto" PATH="G" INT_NOTE="STANDARD"/>
   <pfstatus_mtx CODE="000007" TEXT_TYPE="S" TEXT="Views" PATH="V"/>
   <pfstatus_mtx CODE="000008" TEXT_TYPE="S" TEXT="Settings" PATH="S" INT_NOTE="STANDARD_FULLSCREEN"/>
   <pfstatus_mtx CODE="000009" TEXT_TYPE="S" TEXT="Layout" PATH="A" INT_NOTE="Sub STANDARD"/>
   <pfstatus_mtx CODE="000010" TEXT_TYPE="S" TEXT="Columns" PATH="C"/>
   <pfstatus_act CODE="000001" NO="01" MENUCODE="000001"/>
   <pfstatus_act CODE="000001" NO="02" MENUCODE="000004"/>
   <pfstatus_act CODE="000001" NO="03" MENUCODE="000006"/>
   <pfstatus_act CODE="000001" NO="04" MENUCODE="000007"/>
   <pfstatus_act CODE="000001" NO="05" MENUCODE="000008"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="01" PFNO="00"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="02" PFNO="12"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="03" PFNO="39"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="04" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="05" PFNO="05"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="06" PFNO="06"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="07" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="08" PFNO="28"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="09" PFNO="40"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="10" PFNO="29"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="11" PFNO="38"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="12" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="13" PFNO="46"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="14" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="15" PFNO="31"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="16" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="17" PFNO="32"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="18" PFNO="33"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="19" PFNO="34"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="20" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="21" PFNO="36"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="22" PFNO="13"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="23" PFNO="22"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="24" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="25" PFNO="14"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="26" PFNO="16"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="27" PFNO="17"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="28" PFNO="18"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="29" PFNO="19"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="30" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="31" PFNO="21"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="32" PFNO="S"/>
   <pfstatus_but PFK_CODE="000001" CODE="0001" NO="33" PFNO="23"/>
   <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="GOON" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="00" FUNCODE="GOON" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="01" FUNCODE="&amp;ELP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="02" FUNCODE="&amp;IC1" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="03" FUNCODE="&amp;F03" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="04" FUNCODE="&amp;F4" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="05" FUNCODE="&amp;ALL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="06" FUNCODE="&amp;SAL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="08" FUNCODE="&amp;REFRESH" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="11" FUNCODE="&amp;SAVE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="&amp;F12" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="EABR" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="12" FUNCODE="EABR" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="13" FUNCODE="RECHECK" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="14" FUNCODE="&amp;ADD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="15" FUNCODE="&amp;F15" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="16" FUNCODE="&amp;ADD_TP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="17" FUNCODE="&amp;ADD_FILE" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="18" FUNCODE="&amp;DEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="19" FUNCODE="&amp;IMPORT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="20" FUNCODE="&amp;DOC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="21" FUNCODE="&amp;NCONF" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="22" FUNCODE="DDIC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="23" FUNCODE="&amp;PREP_XLS" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="25" FUNCODE="&amp;ABC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="28" FUNCODE="&amp;OUP" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="29" FUNCODE="&amp;ILT" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="30" FUNCODE="&amp;UMC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="31" FUNCODE="%SL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="32" FUNCODE="&amp;OL0" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="33" FUNCODE="&amp;OAD" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="34" FUNCODE="&amp;AVE" FUNNO="002"/>
   <pfstatus_pfk CODE="000001" PFNO="36" FUNCODE="&amp;INFO" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="37" FUNCODE="&amp;EB9" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="38" FUNCODE="&amp;ILD" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="39" FUNCODE="&amp;ETA" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="40" FUNCODE="&amp;ODN" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="42" FUNCODE="&amp;SUM" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="43" FUNCODE="&amp;VEXCEL" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="44" FUNCODE="&amp;AQW" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="45" FUNCODE="%PC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="46" FUNCODE="&amp;RNT_PREV" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="47" FUNCODE="&amp;GRAPH" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="71" FUNCODE="%SC" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="84" FUNCODE="%SC+" FUNNO="001"/>
   <pfstatus_pfk CODE="000001" PFNO="86" FUNCODE="&amp;RNT" FUNNO="001"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%CH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%ML"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%PC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SC+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="%SL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ABC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ADD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ADD_FILE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ADD_TP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ALL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AQW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AUF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;AVR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;BS-"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CDF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CFI"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;COUNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRB"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRBATCH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRDESIG"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRTEMPL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;CRYSTAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DAU"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DEL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DOC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DOF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;DON"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;EB3"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;EB9"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ELP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ERW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ETA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F03"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F12"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F15"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;F4"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;GRAPH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;IC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ILD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ILT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;IMPORT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;INFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;KOM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;LFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;LIS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;MAX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;MIN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;NCONF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;NFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;NTE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OAD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;ODN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OL0"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OLX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OMP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OPT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;OUP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;PREP_XLS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;REFRESH"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;RNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;RNT_PREV"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SAVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;SUM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;UMC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;URL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VCRYSTAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VEXCEL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VGRID"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;VLOTUS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XINT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XML"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XPA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="&amp;XXL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BAC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BACK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB2"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB3"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEB9"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="BEBN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="COL0"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="COLX"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DDIC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DETA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DRUK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="DSAL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="ENTE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="EXIT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="EXPA"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="FILD"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="FILT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="GLIS"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="GOON"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="HELP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="INFO"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="KOMP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P+"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P++"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P-"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="P--"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PF09"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PF13"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PIC1"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PICK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRI"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRIN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="PRNT"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="RECHECK"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="RW"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SALL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SAUF"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SAVE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRB"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRE"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRL"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SCRR"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SKOM"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SODN"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SOUP"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="SUMC"/>
   <pfstatus_set STATUS="STANDARD_FULLSCREEN" FUNCTION="ZSUM"/>
   <pfstatus_doc OBJ_TYPE="A" OBJ_CODE="000001" MODAL="D" INT_NOTE="STANDARD_FULLSCREEN"/>
   <pfstatus_doc OBJ_TYPE="P" OBJ_CODE="000001" MODAL="P" INT_NOTE="STANDARD_FULLSCREEN"/>
   <pfstatus_doc OBJ_TYPE="B" OBJ_CODE="000001" SUB_CODE="0001" MODAL="P" INT_NOTE="STANDARD_FULLSCREEN"/>
   <pfstatus_tit CODE="001" TEXT="Transport Checking Tool (Object level) - Version &amp;1"/>
  </pfstatus>
  <source>report  zev_tp_checktool.
*&amp;******************************************************************&amp;*
*&amp; Report   : ZEV_TP_CHECKTOOL                                      &amp;*
*&amp; Version  : 1.00                                                  &amp;*
*&amp;------------------------------------------------------------------&amp;*
*&amp;                                                                  &amp;*
*&amp; Copyright (c) 2012, E.Vleeshouwers                               &amp;*
*&amp; All rights reserved.                                             &amp;*
*&amp;                                                                  &amp;*
*&amp; Redistribution and use in source and binary forms, with or       &amp;*
*&amp; without modification, are permitted provided that the following  &amp;*
*&amp; conditions are met:                                              &amp;*
*&amp;                                                                  &amp;*
*&amp; 1. Redistributions of source code must retain the above          &amp;*
*&amp;    copyright notice, this list of conditions and the following   &amp;*
*&amp;    disclaimer.                                                   &amp;*
*&amp;                                                                  &amp;*
*&amp; 2. Redistributions in binary form must reproduce the above       &amp;*
*&amp;    copyright notice, this list of conditions and the following   &amp;*
*&amp;    disclaimer in the documentation and/or other materials        &amp;*
*&amp;    provided with the distribution.                               &amp;*
*&amp;                                                                  &amp;*
*&amp; 3. Neither the name of the copyright holder nor the names of its &amp;*
*&amp;    contributors may be used to endorse or promote products       &amp;*
*&amp;    derived from this software without specific prior written     &amp;*
*&amp;    permission.                                                   &amp;*
*&amp;                                                                  &amp;*
*&amp; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND           &amp;*
*&amp; CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES,      &amp;*
*&amp; INCLUDING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES OF        &amp;*
*&amp; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE         &amp;*
*&amp; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR            &amp;*
*&amp; CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,     &amp;*
*&amp; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,         &amp;*
*&amp; BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; &amp;*
*&amp; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER &amp;*
*&amp; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,      &amp;*
*&amp; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)    &amp;*
*&amp; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF      &amp;*
*&amp; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                       &amp;*
*&amp;                                                                  &amp;*
*&amp;------------------------------------------------------------------&amp;*
*&amp; Program Details                                                  &amp;*
*&amp;------------------------------------------------------------------&amp;*
*&amp; Title    : Transport checking tool (on object level)             &amp;*
*&amp; Purpose  : Check transport objects before moving to production   &amp;*
*&amp;------------------------------------------------------------------&amp;*
* SOURCE: https://github.com/ZEdwin/ZTCT
* BLOG (SCN):
* http://scn.sap.com/community/abap/blog/2013/05/31/transport-
* checking-tool-object-level
*--------------------------------------------------------------------*
* INSTALLATION
*--------------------------------------------------------------------*
* Use SAPLINK to import the Nugget file (located under Releases).
* This will only install a local program (R3TR PROG: this includes
* report texts and program documentation.
*
*&amp;------------------------------------------------------------------&amp;*
*&amp; Change History                                                   &amp;*
*&amp;------------------------------------------------------------------&amp;*
type-pools: ctslg. &quot;Types for Function Group TR_LOG_OVERVIEW
type-pools: icon.  &quot;Assignment: Icon Names in List of ASCII Codes
type-pools: slis.  &quot;Global types for generic list modules
type-pools: stms.  &quot;Transport Management System: Global Types
type-pools: abap.

* Class for handling Events
class: lcl_eventhandler_ztct definition deferred.
class: lcl_ztct              definition deferred.

data: e070       type e070.       &quot;CTS: Header
data: e071       type e071.       &quot;CTS: Object Entries Requests/Task
data: vrsd       type vrsd.       &quot;Version management: directory table
data: ctsproject type ctsproject. &quot;Assignm. of CTS Proj. to Ext. Proj.

*--------------------------------------------------------------------*
* Data definitions
*--------------------------------------------------------------------*
* Database tables:
tables: sscrfields.      &quot;Fields on selection screens
constants:
       co_months               type numc3        value &apos;012&apos;.

data:  ra_project_trkorrs      type range of ctsproject-trkorr.
data:  st_project_trkorrs      like line  of ra_project_trkorrs.
data:  ra_systems              type range of tmscsys-sysnam.
data:  st_systems              like line  of ra_systems.

* Global data declarations:
data:  tp_prefix               type char5.
data:  ta_sapsystems           type table of tmscsys.
data:  st_sapsystems           type tmscsys.
data:  st_tcesyst              type tcesyst.
data:  st_smp_dyntxt           type smp_dyntxt.
data:  tp_dokl_object          type doku_obj. &quot;To check existence of doc

data:  ta_trkorr_range         type range of e070-trkorr.
data:  st_trkorr_range         like line of ta_trkorr_range.
data:  ta_project_range        type range of ctsproject-trkorr.
data:  ta_date_range           type range of as4date.
data:  ta_excluded_objects     type range of trobj_name.
data:  tp_transport_descr      type as4text.
data:  tp_project_reference    type trvalue.
* Process type is used to identify if a list is build (1),
* uploaded (2) or the program is used for version checking (3)
data:  tp_process_type         type i.
* Date from for transport collection (passed to class)
data:  tp_date_from             type as4date.
* To determine transport track on selection screen
data:  ta_prev_systems         type tmscsyss.
data:  st_prev_system          type tmscsys.
data:  ta_system_track         type tcesys.
data:  st_system_track         type sysname.
data:  ta_targets              type trsysclis.
data:  st_target               type trsyscli.
data:  tp_sysname              type sysname.
data:  tp_index                type sytabix.
data:  tp_msg                  type string.

*--------------------------------------------------------------------*
* Data - ALV
*--------------------------------------------------------------------*
* Declaration for ALV Grid
data: rf_table                type ref to cl_salv_table.
data: rf_table_xls            type ref to cl_salv_table.
data: rf_conflicts            type ref to cl_salv_table.
data: rf_table_keys           type ref to cl_salv_table.
data: rf_handle_events        type ref to lcl_eventhandler_ztct.
data: rf_events_table         type ref to cl_salv_events_table.

* Exception handling
data: rf_root                 type ref to cx_root.
data: rf_ztct                 type ref to lcl_ztct.

*----------------------------------------------------------------------*
*       CLASS lcl_eventhandler_ztct DEFINITION
*----------------------------------------------------------------------*
class lcl_eventhandler_ztct definition friends lcl_ztct.

  public section.
    class-data:
      rf_conflicts  type ref to cl_salv_table,
      rf_table_keys type ref to cl_salv_table.

    class-methods on_function_click
      for event if_salv_events_functions~added_function
        of cl_salv_events_table importing e_salv_function.

    class-methods: on_double_click
      for event double_click
        of cl_salv_events_table importing row column.

    class-methods: on_link_click
      for event link_click
        of cl_salv_events_table importing row column.

    class-methods: on_double_click_popup
      for event double_click
        of cl_salv_events_table importing row column.

    class-methods: on_link_click_popup
      for event link_click
        of cl_salv_events_table importing row column.

endclass.                    &quot;lcl_eventhandler_ztct DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_ztct DEFINITION
*----------------------------------------------------------------------*
class lcl_ztct definition friends lcl_eventhandler_ztct.

  public section.

    types: ra_trkorr                 type range of trkorr.
    types: ra_excluded_objects       type range of trobj_name.
    types: ra_date                   type range of as4date.
    data:  ls_excluded_objects       like line  of ta_excluded_objects.
    types: begin of ty_request_details,
             trkorr         type trkorr,
             checked        type icon_l4,
             info           type icon_l4,
             tr_descr       type as4text,
             dev            type icon_l4,
             qas            type icon_l4,
             retcode        type char04,
             prd            type icon_l4,
             warning_lvl    type icon_d,
*                     Warning_rank: The higher the number,
*                     the more serious the error
             warning_rank   type numc4,
             warning_txt    type text74,
             pgmid          type pgmid,
             object         type trobjtype,
             obj_name       type trobj_name,
             objkey         type trobj_name,
             keyobject      type trobjtype,
             keyobjname     type tabname,
             tabkey         type tabkey,
             checked_by     type syuname,
             as4date        type as4date,
             as4time        type as4time,
             as4user        type as4user,
             status_text    type char20,
             trfunction_txt type val_text,
             project        type cts_id,
             project_descr  type as4text,
             objfunc        type objfunc,
             flag           type flag,
             trstatus       type trstatus,
             trfunction     type trfunction,
             re_import      type char20.
    types:            t_color type lvc_t_scol,
                      end of  ty_request_details.

    types: tt_request_details type standard table of ty_request_details
                              with default key.

    types: begin of lty_tables_with_keys,
             tabname type trobj_name,
             ddtext  type as4text,
             counter type i, &quot;lvc_outlen,
           end of lty_tables_with_keys.
    data: table_keys      type table of lty_tables_with_keys.
    data: table_keys_line type lty_tables_with_keys.

    constants:
      co_info             type icon_d       value &apos;@0S@&apos;. &quot;ICON_INFORMATION

*   Attributes
    data:  main_list                  type tt_request_details.
    data:  main_list_line             type ty_request_details.
    data:  main_list_xls              type tt_request_details.
    data:  main_list_line_xls         type ty_request_details.
    data:  conflicts                  type tt_request_details.
    data:  st_request      type ctslg_request_info.
    data:  st_steps        type ctslg_step.
    data:  st_actions      type ctslg_action.
    data:  tp_tabkey       type trobj_name.
    data:  tp_lines        type i.
    data:  tp_tab          type char1
                                value cl_abap_char_utilities=&gt;horizontal_tab.
    data: lp_save_restriction type salv_de_layout_restriction.

*   Methods
    methods: constructor.
    methods: execute.
    methods: refresh_alv.
    methods: get_tp_prefix            importing im_dev              type sysname   optional
                                      returning value(re_tp_prefix) type char5.
    methods: get_filename             exporting ex_file             type localfile.
    methods: set_check_flag           importing im_check_flag       type abap_bool optional.
    methods: set_check_ddic           importing im_check_ddic       type abap_bool optional.
    methods: set_check_tabkeys        importing im_check_tabkeys    type abap_bool optional.
    methods: set_clear_checked        importing im_clear_checked    type abap_bool optional.
    methods: set_skip_buffer_chk      importing im_skip_buffer_chk  type abap_bool optional.
    methods: set_trkorr_range         importing im_trkorr_range     type ra_trkorr optional.
    methods: set_project_range        importing im_project_range    type ra_trkorr optional.
    methods: set_date_range           importing im_date_range       type ra_date   optional.
    methods: set_excluded_objects     importing im_excluded_objects type ra_excluded_objects optional.
    methods: set_search_string        importing im_search_string    type as4text   optional.
    methods: set_user_layout          importing im_user_layout      type abap_bool optional.
    methods: set_process_type         importing im_process_type     type i.
    methods: set_skiplive             importing im_skiplive         type abap_bool optional.
    methods: set_filename             importing im_filename         type localfile optional.
    methods: set_systems              importing im_dev_system type sysname
                                                im_qas_system type sysname
                                                im_prd_system type sysname.
    methods: set_building_conflict_popup importing im_building_conflict_popup type abap_bool optional.
    methods: go_back_months           importing im_backmonths	 type numc3
                                                im_currdate    type sydatum
                                      returning value(re_date) type sydatum.

  private section.
    types: begin of ty_tms_mgr_buffer,
             request       type  tmsbuffer-trkorr,
             target_system type  tmscsys-sysnam,
             request_infos type  stms_wbo_requests,
           end   of ty_tms_mgr_buffer.
    types: tt_tms_mgr_buffer   type hashed table of ty_tms_mgr_buffer
                               with unique key request target_system.

    data:  tms_mgr_buffer      type tt_tms_mgr_buffer.
    data:  tms_mgr_buffer_line type ty_tms_mgr_buffer.
    types: begin of ty_ddic_e071,
             trkorr   type trkorr,
             pgmid    type pgmid,
             object   type trobjtype,
             obj_name type trobj_name,
           end of ty_ddic_e071.
    types: tt_ddic_e071 type standard table of ty_ddic_e071.
    data:  ta_ddic_e071 type tt_ddic_e071.
    constants:
      co_error   type icon_d       value &apos;@F1@&apos;, &quot;ICON_LED_RED
      co_tp_fail type icon_d       value &apos;@2O@&apos;, &quot;ICON_SYSTEM_CANCEL
      co_ddic    type icon_d       value &apos;@CY@&apos;, &quot;ICON_INCOMPLETE
      co_warn    type icon_d       value &apos;@5D@&apos;, &quot;ICON_LED_YELLOW
      co_okay    type icon_d       value &apos;@5B@&apos;, &quot;ICON_LED_GREEN
      co_checked type icon_d       value &apos;@01@&apos;, &quot;ICON_CHECKED
      co_hint    type icon_d       value &apos;@AI@&apos;, &quot;ICON_HINT
      co_alert   type icon_d       value &apos;@03@&apos;, &quot;ICON_FAILURE
      co_scrap   type icon_d       value &apos;@K3@&apos;, &quot;ICON_SCRAP
      co_docu    type icon_d       value &apos;@DH@&apos;, &quot;ICON_PROTOCOL
      co_inact   type icon_d       value &apos;@BZ@&apos;. &quot;ICON_LED_INACTIVE
    constants:
      co_okay_rank    type i            value 0,  &quot;ICON_LED_GREEN
      co_alert0_rank  type i            value 5,  &quot;ICON_FAILURE
      co_alert1_rank  type i            value 6,  &quot;ICON_FAILURE
      co_alert2_rank  type i            value 7,  &quot;ICON_FAILURE
      co_alert3_rank  type i            value 8,  &quot;ICON_FAILURE
      co_hint1_rank   type i            value 10, &quot;ICON_HINT
      co_hint2_rank   type i            value 12, &quot;ICON_HINT
      co_hint3_rank   type i            value 14, &quot;ICON_HINT
      co_hint4_rank   type i            value 16, &quot;ICON_HINT
      co_info_rank    type i            value 20, &quot;ICON_INFORMATION
      co_warn_rank    type i            value 50, &quot;ICON_LED_YELLOW
      co_tp_fail_rank type i            value 97, &quot;ICON_SYSTEM_CANCEL
      co_ddic_rank    type i            value 98, &quot;ICON_INCOMPLETE
      co_error_rank   type i            value 99. &quot;ICON_LED_RED
    constants:
      co_non_charlike    type string       value &apos;h&apos;.

    data: lp_alert0_text type text74.
    data: lp_alert1_text type text74.
    data: lp_alert2_text type text74.
    data: lp_alert3_text type text74.
    data: lp_hint1_text  type text74.
    data: lp_hint2_text  type text74.
    data: lp_hint3_text  type text74.
    data: lp_hint4_text  type text74.
    data: lp_info_text   type text74.
    data: lp_fail_text   type text74.
    data: lp_warn_text   type text74.
    data: lp_error_text  type text74.
    data: lp_ddic_text type text74.

* Attributes
    data:  project_trkorrs            type ra_trkorr.
    data:  prefix                     type char5.
    data:  aggr_tp_list_of_objects    type tt_request_details.
    data:  add_to_main                type tt_request_details.
    data:  tab_delimited              type table_of_strings.
    data:  conflict_line              type ty_request_details.
    data:  line_found_in_list         type ty_request_details.
    data:  total(10)                  type n.
    data:  ddic_objects               type string_table.
    data:  ddic_e071                  type tt_ddic_e071.
    data:  ddic_e071_line             type ty_ddic_e071.
    data:  where_used                 type sci_findlst.
    data:  where_used_line            type rsfindlst.
    data:  check_flag                 type abap_bool.
    data:  check_ddic                 type abap_bool.
    data:  check_tabkeys              type abap_bool.
    data:  clear_checked              type abap_bool.
    data:  skip_buffer_chk            type abap_bool.
    data:  trkorr_range               type ra_trkorr.
    data:  project_range              type ra_trkorr.
    data:  date_range                 type ra_date.
    data:  excluded_objects           type ra_excluded_objects.
    data:  search_string              type as4text.
    data:  user_layout                type abap_bool.
    data:  process_type               type i.
    data:  skiplive                   type abap_bool.
    data:  filename                   type string.
    data:  dev_system                 type sysname.
    data:  qas_system                 type sysname.
    data:  prd_system                 type sysname.
    data:  tooltips                   type ref to cl_salv_tooltips.
    data:  building_conflict_popup    type flag.

    methods: refresh_import_queues.
    methods: handle_error             importing rf_oref             type ref to cx_root.
    methods: flag_for_process         importing rows type salv_t_row
                                                cell type salv_s_cell.
    methods: get_main_transports      importing im_trkorr_range     type gtabkey_trkorrt.
    methods: get_tp_info              importing im_trkorr      type trkorr
                                                im_obj_name    type trobj_name
                                      returning value(re_line) type ty_request_details.
    methods: get_added_objects        importing im_to_add type ra_trkorr
                                      exporting ex_to_add type tt_request_details.
    methods: add_to_list              importing im_to_add type tt_request_details
                                      exporting ex_main   type tt_request_details.
    methods: build_conflict_popup     importing rows type salv_t_row
                                                cell type salv_s_cell.
    methods: delete_tp_from_list      importing rows type salv_t_row
                                                cell type salv_s_cell.
    methods: flag_same_objects        exporting ex_main_list        type tt_request_details.
    methods: mark_all_tp_records      importing im_cell type salv_s_cell
                                      changing  im_rows type salv_t_row.
    methods: main_to_tab_delimited    importing im_main_list     type tt_request_details
                                      exporting ex_tab_delimited type table_of_strings.
    methods: tab_delimited_to_main    importing im_tab_delimited type table_of_strings
                                      exporting ex_main_list     type tt_request_details.
    methods: display_transport        importing im_trkorr           type trkorr.
    methods: display_user             importing im_user             type syuname.
    methods: display_docu             importing im_trkorr           type trkorr.
    methods: check_if_in_list         importing im_line  type ty_request_details
                                                im_tabix type sytabix
                                      exporting ex_line  type ty_request_details.
    methods: check_documentation      importing im_trkorr type trkorr
                                      changing  ch_table  type tt_request_details.
    methods: docu_call                importing im_object           type doku_obj.
    methods: clear_flags.
    methods: column_settings          importing im_column_ref       type salv_t_column_ref
                                                im_rf_columns_table type ref to cl_salv_columns_table
                                                im_table            type ref to cl_salv_table.
    methods: is_empty_column          importing im_column          type lvc_fname
                                                im_table           type tt_request_details
                                      returning value(re_is_empty) type abap_bool.
*    METHODS: refresh_alv.
    methods: display_excel            importing im_table            type tt_request_details.
    methods: set_tp_prefix            importing im_dev              type sysname optional.
    methods: top_of_page              exporting ex_form_element     type ref to cl_salv_form_element.
    methods: check_if_same_object     importing im_line        type ty_request_details
                                                im_newer_older type ty_request_details
                                      exporting ex_tabkey      type trobj_name
                                                ex_return      type c.
    methods: sort_main_list.
    methods: determine_warning_text   importing im_highest_rank type numc4
                                      exporting ex_highest_text type text74.
    methods: get_tps_for_same_object  importing im_line  type ty_request_details
                                      exporting ex_newer type tt_request_details
                                                ex_older type tt_request_details.
    methods: progress_indicator       importing im_counter type sytabix
                                                im_object  type trobj_name
                                                im_total   type numc10
                                                im_text    type itex132
                                                im_flag    type c.
    methods: alv_xls_init             exporting ex_rf_table type ref to cl_salv_table
                                      changing  ch_table    type table.
    methods: alv_xls_output.
    methods: prepare_ddic_check.
    methods: set_ddic_objects.
    methods: do_ddic_check            changing  ch_main_list        type tt_request_details.
    methods: set_properties_conflicts importing im_table type tt_request_details
                                      exporting ex_xend  type i.
    methods: get_data                 importing im_trkorr_range     type gtabkey_trkorrt.
    methods: check_for_conflicts      changing  ch_main_list        type tt_request_details.
    methods: build_table_keys_popup.
    methods: add_table_keys_to_list   exporting table               type tt_request_details.
    methods: get_additional_tp_info   changing  ch_table            type tt_request_details.
    methods: gui_upload               importing im_filename      type string
                                      exporting ex_tab_delimited type table_of_strings
                                                ex_cancelled     type abap_bool.
    methods: determine_col_width      importing im_field    type any
                                      changing  ex_colwidth type lvc_outlen.
    methods: check_colwidth           importing im_name            type abap_compname
                                                im_colwidth        type lvc_outlen
                                      returning value(re_colwidth) type lvc_outlen.
    methods: remove_tp_in_prd.
    methods: version_check.
    methods: alv_init.
    methods: set_color.
    methods: alv_set_properties       importing im_table            type ref to cl_salv_table.
    methods: alv_set_tooltips         importing im_table            type ref to cl_salv_table.
    methods: alv_output.
    methods: set_where_used.
    methods: get_import_datetime_qas  importing im_trkorr  type trkorr
                                      exporting ex_as4time type as4time
                                                ex_as4date type as4date
                                                ex_return  type sysubrc.
endclass.                    &quot;lcl_ztct DEFINITION

*--------------------------------------------------------------------*
* Selection screen Build
*--------------------------------------------------------------------*

* Possibility to add a button on the selection screen application
* toolbar (If required, uncomment). Function text and icon is filled
* in AT SELECTION-SCREEN OUTPUT
* SELECTION-SCREEN: FUNCTION KEY 1.

* B10: Selection range / Upload file
*---------------------------------------
selection-screen: begin of block box1 with frame title tp_b10.
parameters:       pa_sel radiobutton group mod default &apos;X&apos;
                                               user-command sel.
parameters:       pa_upl radiobutton group mod.
selection-screen: end of block box1.

* B20: Selection criteria or Upload file
*---------------------------------------
selection-screen: begin of block box2 with frame title tp_b20.
select-options:   so_korr for e070-strkorr modif id sel.
parameters:       pa_str type as4text visible length 41
                                      modif id sel.
selection-screen: skip 1.
selection-screen: begin of line.
selection-screen: comment 1(20) tp_c21 modif id sel.
selection-screen: position 30.
select-options:   so_user for sy-uname default sy-uname
                                       matchcode object user_addr
                                       modif id sel.
selection-screen: pushbutton 71(5) i_name
                                   user-command name
                                   modif id sel.            &quot;#EC NEEDED
selection-screen: end of line.
select-options:   so_date for e070-as4date modif id sel.
selection-screen: pushbutton 69(7) i_date
                             user-command date
                             modif id sel.                  &quot;#EC NEEDED
select-options:   so_proj for ctsproject-trkorr modif id sel.
selection-screen: begin of line.
selection-screen: comment 1(20) tp_c22 modif id upl.
selection-screen: position pos_low.
parameters:       pa_file type localfile modif id upl.
selection-screen: end of line.
selection-screen: end of block box2.

* B30: Transport Track
*---------------------------------------
selection-screen: begin of block box3 with frame title tp_b30.
selection-screen: begin of line.
* C31 - Route
selection-screen: comment 1(20) tp_c31.
selection-screen: position pos_low.
parameters:       pa_dev type sysname default &apos;DEV&apos;.
* C32 - --&gt;
selection-screen: comment 45(3) tp_c32.
selection-screen: position 51.
parameters:       pa_qas type sysname default &apos;QAS&apos;.
* C33 - --&gt;
selection-screen: comment 63(3) tp_c33 modif id vrs.
selection-screen: position 69.
parameters:       pa_prd type sysname default &apos;PRD&apos; modif id vrs.
selection-screen: end of line.
selection-screen: end of block box3.

* B40: Check options
*---------------------------------------
selection-screen: begin of block box4 with frame title tp_b40.
selection-screen: begin of line.
parameters:       pa_check radiobutton group rad default &apos;X&apos;
                           user-command chk modif id vrs.
selection-screen: comment 4(20)   tp_c46 modif id vrs.
parameters:       pa_nochk radiobutton group rad modif id vrs.
selection-screen: end of line.
selection-screen: skip 1.
selection-screen: begin of line.
parameters:       pa_noprd as checkbox default &apos;X&apos; modif id vrs.
* C41 - Use User specific layout
selection-screen: comment 4(63) tp_c40 modif id vrs.
selection-screen: end of line.

selection-screen: begin of line.
parameters:       pa_user as checkbox default &apos; &apos; modif id vrs.
* C41 - Use User specific layout
selection-screen: comment 4(63) tp_c41 modif id vrs.
selection-screen: end of line.

selection-screen: begin of line.
parameters:       pa_buff as checkbox default &apos;X&apos; modif id vrs.
* C42 - Skip transport buffer check
selection-screen: comment 4(63) tp_c42 modif id vrs.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       pa_chkky as checkbox default &apos;X&apos; modif id chk
                           user-command key.
* C43 - Check table keys
selection-screen: comment 4(16) tp_c43 modif id chk.
selection-screen: end of line.
*PARAMETERS:       pa_kdate TYPE as4date MODIF ID key.
selection-screen: begin of line.
parameters:       pa_chd as checkbox default &apos; &apos; modif id upl.
* C44  - Reset &apos;Checked&apos; field
selection-screen: comment 4(16) tp_c44 modif id upl.
selection-screen: end of line.
selection-screen: end of block box4.

* B50: Exclude from check
*---------------------------------------
selection-screen: begin of block box5 with frame title tp_b50.
*C51 - Objects in the range will not be taken into account when checking
*      the
selection-screen: comment /1(74) tp_c51 modif id chk.
*C52 - transports. Useful to exclude common customizing tables (like
*      SWOTICE for
selection-screen: comment /1(74) tp_c52 modif id chk.
* C53 - workflow or the tables for Pricing procedures).
selection-screen: comment /1(74) tp_c53 modif id chk.
select-options:   so_exobj for e071-obj_name no intervals
                                               modif id chk.
selection-screen: end of block box5.

* B60 - Overview of used Icons
*---------------------------------------
selection-screen: begin of block box6 with frame title tp_b60.
selection-screen: begin of line.
parameters:       pa_icon radiobutton group ico user-command ico
                                                modif id vrs.
* C61 - Show
selection-screen: comment 4(6) tp_c61 modif id vrs.
parameters:       pa_noicn radiobutton group ico default &apos;X&apos;
                                                 modif id vrs.
* C62 - Hide
selection-screen: comment 14(4) tp_c62 modif id vrs.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_error user-command error
                                          modif id ico.     &quot;#EC NEEDED
* W01 - Transporting to Production will overwrite a newer version!
selection-screen: comment 8(74) tp_w01  modif id ico.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_ddic user-command ddic
                                          modif id ico.     &quot;#EC NEEDED
*W18 - Transport already in Production, but selected for re-import by
*      the user
selection-screen: comment 8(74) tp_w05  modif id ico.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_warn  user-command warn
                                          modif id ico.     &quot;#EC NEEDED
* W17 - Previous transport not transported
selection-screen: comment 8(74) tp_w17  modif id ico.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_info  user-command info
                                          modif id ico.     &quot;#EC NEEDED
*W23 - There is a newer version in Acceptance. Check if it should be
*      moved too
selection-screen: comment 8(74) tp_w23  modif id ico.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_hint  user-command hint
                                          modif id ico.     &quot;#EC NEEDED
*W04 - Previous or newer transport not transported, but is also in the
*      list
selection-screen: comment 8(74) tp_w04  modif id ico.
selection-screen: end of line.
selection-screen: begin of line.
selection-screen: pushbutton 1(4) p_added user-command added
                                          modif id ico.     &quot;#EC NEEDED
*W18 - Transport already in Production, but selected for re-import by
*      the user
selection-screen: comment 8(74) tp_w18  modif id ico.
selection-screen: end of line.
selection-screen: end of block box6.

*--------------------------------------------------------------------*
* Initialize
*--------------------------------------------------------------------*
initialization.

* To be able to use methods on the selection screen
  if rf_ztct is not bound.
    try .
        create object rf_ztct.
      catch cx_root into rf_root.
        tp_msg = rf_root-&gt;get_text( ).
        concatenate &apos;ERROR:&apos;(038) tp_msg into tp_msg separated by space.
        message tp_msg type &apos;E&apos;.
    endtry.
  endif.

  move: icon_terminated_position       to i_name,
        icon_defect                    to p_error,
        icon_wf_workitem_error         to p_ddic,
        icon_led_yellow                to p_warn,
        icon_information               to p_info,
        icon_hint                      to p_hint,
        icon_scrap                     to p_added.

  move: &apos;Clear&apos;(025)                   to i_date.
  if so_date is initial.
    move: &apos;Clear&apos;(025)                 to i_date.
    so_date-sign = &apos;I&apos;.
    so_date-option = &apos;BT&apos;.
    so_date-high = sy-datum.
    so_date-low = rf_ztct-&gt;go_back_months( im_currdate   = sy-datum
                                           im_backmonths = 6 ).
    append so_date to so_date.
  else.
    move: &apos;Def.&apos;(026)                  to i_date.
    refresh so_date.
  endif.

* Set selection texts (to link texts to selection screen):
* This is done to facilitate (love that word...) the copying of this
* program to other environments without losing all the texts.
  tp_b10 = &apos;Selection range / Upload file&apos;(b10).
  tp_b30 = &apos;Transport Track&apos;(b30).
  tp_b40 = &apos;Check options&apos;(b40).
  tp_b50 = &apos;Exclude from check&apos;(b50).
  tp_b60 = &apos;Overview of used Icons&apos;(b60).
  tp_c21 = &apos;User&apos;(c21).
  tp_c22 = &apos;File name&apos;(c22).
  tp_c31 = &apos;Route&apos;(c31).
  tp_c32 = &apos;--&gt;&apos;(c32).
  tp_c33 = &apos;--&gt;&apos;(c33).
  tp_c40 = &apos;Do not select transports already in production&apos;(c40).
  tp_c41 = &apos;Use User specific layout&apos;(c41).
  tp_c42 = &apos;Skip transport buffer check&apos;(c42).
  tp_c43 = &apos;Check table keys&apos;(c43).
  tp_c44 = &apos;Reset `Checked` field&apos;(c44).
  tp_c46 = &apos;Check ON / Check OFF&apos;(c46).
  tp_c51 = &apos;Objects in the range will not be taken into account &apos; &amp;
           &apos;when checking the&apos;(c51).
  tp_c52 = &apos;transports. Useful to exclude common customizing tables &apos; &amp;
           &apos;(like SWOTICE for&apos;(c52).
  tp_c53 = &apos;workflow or the tables for Pricing procedures).&apos;(c53).
  tp_c61 = &apos;Show&apos;(c61).
  tp_c62 = &apos;Hide&apos;(c62).
*  tp_w01 = &apos;Newer version in production!&apos;(w01).
  tp_w01 = &apos;Newer version in target environment!&apos;(w01).
  tp_w05 = &apos;Object missing in list and target environment!&apos;(w05).
  tp_w17 = &apos;Previous transport not transported&apos;(w17).
  tp_w23 = &apos;Newer version in target environment&apos;(w23).
  tp_w04 = &apos;All conflicts are dealt with&apos;(w04).
  tp_w18 = &apos;Marked for re-import to target environment&apos;(w18).

* Create a range table containing all project numbers:
  st_project_trkorrs-sign = &apos;I&apos;.
  st_project_trkorrs-option = &apos;EQ&apos;.
  select trkorr from ctsproject
                into st_project_trkorrs-low.          &quot;#EC CI_SGLSELECT
    append st_project_trkorrs to ra_project_trkorrs.
  endselect.
  if ra_project_trkorrs[] is initial.
    st_project_trkorrs-low = &apos;DUMMY&apos;.
    append st_project_trkorrs to ra_project_trkorrs.
  endif.

* Get the transport track
  tp_sysname = sy-sysid.
  call function &apos;TR_GET_LIST_OF_TARGETS&apos;
    exporting
      iv_src_system    = tp_sysname
    importing
      et_targets       = ta_targets
    exceptions
      tce_config_error = 1
      others           = 2.
  if sy-subrc &lt;&gt; 0.
    message id sy-msgid type sy-msgty number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  endif.
  pa_dev = sy-sysid.
  loop at ta_targets into st_target.
    case sy-tabix.
      when 1.
        pa_qas = st_target.
      when 2.
        pa_prd = st_target.
    endcase.
  endloop.

* Move to range:
  st_systems-sign   = &apos;I&apos;.
  st_systems-option = &apos;EQ&apos;.
  loop at ta_sapsystems into st_sapsystems.
    move st_sapsystems-sysnam to st_systems-low.
    append st_systems to ra_systems.
  endloop.

* Default values for s_exobj. These objects will not be checked!
* Exclude Single values:
  so_exobj-sign   = &apos;E&apos;.
  so_exobj-option = &apos;EQ&apos;.
  so_exobj-low    = &apos;SWOTICE&apos;.  &quot; Index of Frozen DDIC Structures
  append so_exobj to so_exobj.
  so_exobj-low    = &apos;TVDIR&apos;.    &quot; View Directory
  append so_exobj to so_exobj.
  so_exobj-low    = &apos;TDDAT&apos;.    &quot; Maintenance Areas for Tables
  append so_exobj to so_exobj.
*--------------------------------------------------------------------*
* Selection screen Checks
*--------------------------------------------------------------------*
at selection-screen.
  case sy-ucomm.
    when &apos;NAME&apos;.
      if not so_user is initial.
        refresh: so_user.
        clear:   so_user.
        move icon_create_position to i_name.
      else.
        so_user-option = &apos;EQ&apos;.
        so_user-sign = &apos;I&apos;.
        so_user-low = sy-uname.
        append: so_user to so_user.
        move icon_terminated_position to i_name.
      endif.
    when &apos;DATE&apos;.
      if so_date is initial.
        move: &apos;Clear&apos;(025) to i_date.
        if so_date[] is initial.
          so_date-sign = &apos;I&apos;.
          so_date-option = &apos;BT&apos;.
          so_date-high = sy-datum.
          so_date-low = rf_ztct-&gt;go_back_months( im_currdate   = sy-datum
                                                 im_backmonths = 6 ).
          append so_date to so_date.
        endif.
      else.
        move: &apos;Def.&apos;(026) to i_date.
        refresh so_date.
      endif.
  endcase.

at selection-screen on pa_dev.
  select single * from tcesyst into st_tcesyst where sysname = pa_dev.
  if sy-subrc &lt;&gt; 0.
    message e000(db) display like &apos;E&apos;
                  with &apos;System&apos; pa_dev &apos;does not exist...&apos;.
  endif.

at selection-screen on pa_qas.
  select single * from tcesyst into st_tcesyst where sysname = pa_qas.
  if sy-subrc &lt;&gt; 0.
    message e000(db) display like &apos;E&apos;
                  with &apos;System&apos; pa_qas &apos;does not exist...&apos;.
  endif.

at selection-screen on pa_prd.
  select single * from tcesyst into st_tcesyst where sysname = pa_prd.
  if sy-subrc &lt;&gt; 0.
    message e000(db) display like &apos;E&apos;
                  with &apos;System&apos; pa_prd &apos;does not exist...&apos;.
  endif.

at selection-screen output.
* This commented out code can be used to add a function on the toolbar:
  st_smp_dyntxt-text       = &apos;Information&apos;(027).
  st_smp_dyntxt-icon_id    = rf_ztct-&gt;co_info.
  st_smp_dyntxt-icon_text  = &apos;Info&apos;(024).
  st_smp_dyntxt-quickinfo  = &apos;General Info&apos;(028).
  st_smp_dyntxt-path       = &apos;I&apos;.
  sscrfields-functxt_01 = st_smp_dyntxt.

  loop at screen.
    case screen-group1.
      when &apos;SEL&apos;.
        if pa_sel = &apos;X&apos;.
          screen-active = &apos;1&apos;.
          tp_b20 = &apos;Selection criteria&apos;(b21).
        else.
          screen-active = &apos;0&apos;.
          tp_b20 = &apos;File upload&apos;(b22).
        endif.
        modify screen.
      when &apos;CHK&apos;.
        if pa_check = &apos;X&apos;.
          screen-active = &apos;1&apos;.
        else.
          screen-active = &apos;0&apos;.
        endif.
        modify screen.
      when &apos;DIC&apos;.
        if pa_check = &apos;X&apos;.
          screen-active = &apos;1&apos;.
        else.
          screen-active = &apos;0&apos;.
        endif.
        modify screen.
      when &apos;KEY&apos;.
        if pa_chkky = &apos;X&apos; and pa_check = &apos;X&apos;.
          screen-active = &apos;1&apos;.
        else.
          screen-active = &apos;0&apos;.
        endif.
        modify screen.
      when &apos;UPL&apos;.
        if pa_upl = &apos;X&apos;.
          screen-active = &apos;1&apos;.
        else.
          screen-active = &apos;0&apos;.
        endif.
        modify screen.
      when &apos;ICO&apos;.
        if pa_icon = &apos;X&apos;.
          screen-active = &apos;1&apos;.
        else.
          screen-active = &apos;0&apos;.
        endif.
        modify screen.
      when &apos;GRY&apos;.
        screen-input = &apos;0&apos;.
        modify screen.
    endcase.
  endloop.

* If the user range is initial (removed manually), set the correct Icon:
at selection-screen on so_user.
  if so_user[] is initial.
    move icon_create_position to i_name.
  endif.

at selection-screen on value-request for pa_file.
  rf_ztct-&gt;get_filename( importing ex_file = pa_file ).

*--------------------------------------------------------------------*
*       CLASS lcl_eventhandler_ztct IMPLEMENTATION
*--------------------------------------------------------------------*
class lcl_eventhandler_ztct implementation.

  method on_function_click.
    types: begin of lty_sval.
            include type sval.
    types: end of lty_sval.
    types: lty_field type standard table of lty_sval.
    data: ra_transports_to_add type range of e070-trkorr,
          st_transports_to_add like line of ra_transports_to_add.
    data: ta_excluded_objects  type range of trobj_name.
    data: ls_excluded_objects  like line  of ta_excluded_objects.
* Global data declarations:
    data: lp_title            type string.
    data: lp_filename         type string.
    data: lp_file             type localfile.
    data: lt_fields           type lty_field. &quot;ty_sval.
    data: ls_fields           type sval.
    data: lp_tabix            type sytabix.
    data: lr_selections       type ref to cl_salv_selections.
    data: lp_localfile        type localfile.
    data: lp_filelength       type i.
    data: ls_row              type int4.
    data: lp_row_found        type abap_bool.
    data: lp_return           type c.
*   Selected rows
    data: lt_rows             type salv_t_row.
    data: ls_cell             type salv_s_cell.
    data: lp_path             type string.
    data: lp_fullpath         type string.
    data: lp_result           type i.
    data: lp_desktop          type string.
    data: lp_timestamp        type tzntstmps.
    data: lp_default_filename type string.
    data: lp_question         type string.
    data: lp_answer           type char01.

    field-symbols: &lt;rf_ref_table&gt; type ref to cl_salv_table.

*   Which popup are we displaying? Conflicts or Table keys?
    if rf_conflicts is bound.
      assign rf_conflicts to &lt;rf_ref_table&gt;.
    elseif rf_table_keys is bound.
      assign rf_table_keys to &lt;rf_ref_table&gt;.
    else.
      assign rf_table to &lt;rf_ref_table&gt;.
    endif.

*   Get current row
    if e_salv_function = &apos;GOON&apos; or e_salv_function = &apos;ABR&apos;.
      lr_selections = &lt;rf_ref_table&gt;-&gt;get_selections(  ).
      lt_rows = lr_selections-&gt;get_selected_rows( ).
      ls_cell = lr_selections-&gt;get_current_cell( ).
    else.
      lr_selections = &lt;rf_ref_table&gt;-&gt;get_selections(  ).
      lt_rows = lr_selections-&gt;get_selected_rows( ).
      ls_cell = lr_selections-&gt;get_current_cell( ).
      read table rf_ztct-&gt;main_list into  rf_ztct-&gt;main_list_line
                                    index ls_cell-row.
    endif.
    case e_salv_function.
      when &apos;GOON&apos;.
        if rf_conflicts is bound.
          rf_conflicts-&gt;close_screen( ).
*         Move the conflicts to a range. The transports in this range will
*         be added to the main list:
          refresh: ra_transports_to_add.
          rf_ztct-&gt;set_building_conflict_popup( abap_false ).
          clear: st_transports_to_add.
          st_transports_to_add-sign = &apos;I&apos;.
          st_transports_to_add-option = &apos;EQ&apos;.
*         If row(s) are selected, use the table
          loop at lt_rows into ls_row.
            read table rf_ztct-&gt;conflicts into  rf_ztct-&gt;conflict_line
                                          index ls_row.
            st_transports_to_add-low = rf_ztct-&gt;conflict_line-trkorr.
            append st_transports_to_add to ra_transports_to_add.
          endloop.
*         Rows MUST be selected, take the current cell instead
          if lt_rows[] is initial.
            message i000(db) with &apos;No rows selected: No transports will be added&apos;(m06).
          endif.
          if ra_transports_to_add[] is not initial.
            rf_ztct-&gt;get_added_objects( exporting im_to_add = ra_transports_to_add
                                        importing ex_to_add = rf_ztct-&gt;add_to_main ).
            rf_ztct-&gt;get_additional_tp_info( changing ch_table = rf_ztct-&gt;add_to_main ).
            rf_ztct-&gt;add_to_list( exporting im_to_add = rf_ztct-&gt;add_to_main
                                  importing ex_main   = rf_ztct-&gt;main_list ).
*         After the transports have been added, check if there are added
*         transports that are already in prd. If so, make them visible by
*         changing the prd icon to co_scrap.
            loop at rf_ztct-&gt;main_list into rf_ztct-&gt;main_list_line
                                       where prd    = rf_ztct-&gt;co_okay
                                       and   trkorr in ra_transports_to_add.
              rf_ztct-&gt;main_list_line-prd = rf_ztct-&gt;co_scrap.
              modify rf_ztct-&gt;main_list from rf_ztct-&gt;main_list_line.
            endloop.
*         After the transports have been added, we need to check again
            rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
            rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
            rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
          endif.
          free rf_conflicts.
        else.
*         If row(s) are selected, use the table
          rf_table_keys-&gt;close_screen( ).
          loop at lt_rows into ls_row.
            read table rf_ztct-&gt;table_keys into rf_ztct-&gt;table_keys_line
                                           index ls_row.
*           Add all tables that were NOT selected to the exclusion range
            if sy-subrc &lt;&gt; 0.
              ls_excluded_objects-sign   = &apos;E&apos;.
              ls_excluded_objects-option = &apos;EQ&apos;.
              ls_excluded_objects-low    = rf_ztct-&gt;table_keys_line-tabname.
              append ls_excluded_objects to ta_excluded_objects.
            endif.
          endloop.
*         If user pressed cancel (Add all tables, do not check any)
          if lt_rows[] is initial.
            loop at rf_ztct-&gt;table_keys into  rf_ztct-&gt;table_keys_line.
              ls_excluded_objects-sign   = &apos;E&apos;.
              ls_excluded_objects-option = &apos;EQ&apos;.
              ls_excluded_objects-low    = rf_ztct-&gt;table_keys_line-tabname.
              append ls_excluded_objects to ta_excluded_objects.
            endloop.
            message i000(db) with &apos;No rows selected: Table keys will &apos; &amp;
                                  &apos;not be checked&apos;(m07).
            rf_ztct-&gt;check_tabkeys = abap_false.
          endif.
          free rf_table_keys.
        endif.
      when &apos;ABR&apos;.
        if rf_table_keys is bound.
          rf_table_keys-&gt;close_screen( ).
*         If user pressed cancel (Add all tables, do not check any)
          loop at rf_ztct-&gt;table_keys into  rf_ztct-&gt;table_keys_line.
            ls_excluded_objects-sign   = &apos;E&apos;.
            ls_excluded_objects-option = &apos;EQ&apos;.
            ls_excluded_objects-low    = rf_ztct-&gt;table_keys_line-tabname.
            append ls_excluded_objects to ta_excluded_objects.
          endloop.
          message i000(db) with &apos;Cancelled: Table keys will &apos; &amp;
                                &apos;not be checked&apos;(m09).
          free rf_table_keys.
          rf_ztct-&gt;check_tabkeys = abap_false.
        else.
          rf_conflicts-&gt;close_screen( ).
          free rf_conflicts.
        endif.
      when &apos;RECHECK&apos;.
        rf_ztct-&gt;set_building_conflict_popup( abap_false ).
        rf_ztct-&gt;refresh_import_queues( ).
        rf_ztct-&gt;flag_for_process( exporting rows = lt_rows
                                             cell = ls_cell ).
        rf_ztct-&gt;add_table_keys_to_list( importing table = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;get_additional_tp_info( changing ch_table = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;DDIC&apos;.
        if rf_ztct-&gt;where_used[] is initial.
          lp_question = &apos;This will take approx. 5-15 minutes... Continue?&apos;(041).
        else.
          lp_question = &apos;This has already been done. Do again?&apos;(042).
        endif.

        call function &apos;POPUP_TO_CONFIRM&apos;
          exporting
            titlebar              = &apos;Runtime Alert&apos;(039)
            text_question         = lp_question
            text_button_1         = &apos;Yes&apos;(037)
            icon_button_1         = &apos;ICON_OKAY&apos;
            text_button_2         = &apos;No&apos;(043)
            icon_button_2         = &apos;ICON_CANCEL&apos;
            default_button        = &apos;2&apos;
            display_cancel_button = &apos; &apos;
*           START_COLUMN          = 25
*           START_ROW             = 6
          importing
            answer                = lp_answer
          exceptions
            text_not_found        = 0
            others                = 0.
        if sy-subrc &lt;&gt; 0.
* Implement suitable error handling here
        endif.
        if lp_answer = &apos;1&apos;.
          rf_ztct-&gt;check_ddic = abap_true.
          rf_ztct-&gt;set_ddic_objects( ).
          rf_ztct-&gt;set_where_used( ).
        endif.
        rf_ztct-&gt;do_ddic_check( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;&amp;ADD&apos;. &quot;Button clicked
        rf_ztct-&gt;set_building_conflict_popup(  ).
*       Here, we want to give the option to the user to select the
*       transports to be added. Display a popup with the option to select the
*       transports to be added with checkboxes.
        rf_ztct-&gt;flag_for_process( exporting rows = lt_rows
                                             cell = ls_cell ).
        rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;build_conflict_popup( rows = lt_rows
                                       cell = ls_cell ).
      when &apos;&amp;ADD_TP&apos;.
        refresh: lt_fields.
        clear:   ls_fields.
        ls_fields-tabname   = &apos;E070&apos;.
        ls_fields-fieldname = &apos;TRKORR&apos;.
        append ls_fields to lt_fields.
        call function &apos;POPUP_GET_VALUES_DB_CHECKED&apos;
          exporting
            popup_title     = &apos;Selected transports&apos;(t01)
          importing
            returncode      = lp_return
          tables
            fields          = lt_fields
          exceptions
            error_in_fields = 1
            others          = 2.
        case sy-subrc.
          when 1.
            message e000(db) with &apos;ERROR: ERROR_IN_FIELDS&apos;(m08).
          when 2.
            message e000(db) with &apos;Error occurred&apos;(029).
        endcase.
*       Exit if cancelled:
        check lp_return &lt;&gt; &apos;A&apos;.
*       Move the conflicts to a range. The transports in this range will
*       be added to the main list:
        refresh: ra_transports_to_add.
        clear:   st_transports_to_add.
        st_transports_to_add-sign = &apos;I&apos;.
        st_transports_to_add-option = &apos;EQ&apos;.
        read table lt_fields into ls_fields index 1.
        check not ls_fields-value is initial.
*       Is it already in the list?
        read table rf_ztct-&gt;main_list with key trkorr = ls_fields-value(20)
                                        transporting no fields.
        check sy-subrc &lt;&gt; 0.
*       Add transport number to the internal table to add:
        st_transports_to_add-low = ls_fields-value.
        append st_transports_to_add to ra_transports_to_add.
        rf_ztct-&gt;get_added_objects( exporting im_to_add = ra_transports_to_add
                                      importing ex_to_add = rf_ztct-&gt;add_to_main ).
        rf_ztct-&gt;get_additional_tp_info( changing ch_table = rf_ztct-&gt;add_to_main ).
        rf_ztct-&gt;add_to_list( exporting im_to_add = rf_ztct-&gt;add_to_main
                                importing ex_main   = rf_ztct-&gt;main_list ).
*       After the transports have been added, check if there are added
*       transports that are already in prd. If so, make them visible by
*       changing the prd icon to co_scrap.
        loop at rf_ztct-&gt;main_list into  rf_ztct-&gt;main_list_line
                             where prd    = rf_ztct-&gt;co_okay
                             and   trkorr in ra_transports_to_add.
          rf_ztct-&gt;main_list_line-prd = rf_ztct-&gt;co_scrap.
          modify rf_ztct-&gt;main_list from rf_ztct-&gt;main_list_line.
        endloop.
*       Unfortunately, after the transports have been added, we need to
*       check again...
        rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;&amp;ADD_FILE&apos;.
        rf_ztct-&gt;clear_flags( ).
        rf_ztct-&gt;get_filename( importing ex_file = lp_localfile ).
        move lp_localfile to lp_filename.
        rf_ztct-&gt;gui_upload( exporting im_filename      = lp_filename
                             importing ex_tab_delimited = rf_ztct-&gt;tab_delimited ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;&amp;DEL&apos;.                                &quot;Button clicked
*       Mark all records for the selected transport(s)
        rf_ztct-&gt;clear_flags( ).
        rf_ztct-&gt;mark_all_tp_records( exporting im_cell = ls_cell
                                      changing  im_rows = lt_rows ).
        rf_ztct-&gt;flag_for_process( exporting rows = lt_rows
                                             cell = ls_cell ).
        rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;delete_tp_from_list( exporting rows = lt_rows
                                                cell = ls_cell ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;&amp;IMPORT&apos;. &quot;Button clicked
*       Re-transport a request (transport already in production)
        rf_ztct-&gt;clear_flags( ).
        rf_ztct-&gt;flag_for_process( exporting rows = lt_rows
                                               cell = ls_cell ).
        refresh: ra_transports_to_add.
        clear:   st_transports_to_add.
        st_transports_to_add-sign = &apos;I&apos;.
        st_transports_to_add-option = &apos;EQ&apos;.
        loop at rf_ztct-&gt;main_list into  rf_ztct-&gt;main_list_line
                                     where flag = &apos;X&apos;
                                     and   prd  = rf_ztct-&gt;co_okay.
          st_transports_to_add-low = rf_ztct-&gt;main_list_line-trkorr.
          append st_transports_to_add to ra_transports_to_add.
        endloop.
        if ra_transports_to_add is initial.
          message i000(db) with &apos;No records selected that can be re-imported&apos;(m11).
          exit.
        endif.
        loop at rf_ztct-&gt;main_list into rf_ztct-&gt;main_list_line
                                     where trkorr in ra_transports_to_add.
          rf_ztct-&gt;main_list_line-flag = &apos;X&apos;.
          rf_ztct-&gt;main_list_line-prd  = rf_ztct-&gt;co_scrap.
          modify rf_ztct-&gt;main_list from rf_ztct-&gt;main_list_line.
        endloop.
        rf_ztct-&gt;flag_same_objects( importing ex_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;check_for_conflicts( changing ch_main_list = rf_ztct-&gt;main_list ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;&amp;DOC&apos;. &quot;Button clicked
        move rf_ztct-&gt;main_list_line-trkorr to tp_dokl_object.
        rf_ztct-&gt;docu_call( exporting im_object = tp_dokl_object ).
        rf_ztct-&gt;check_documentation( exporting im_trkorr = rf_ztct-&gt;main_list_line-trkorr
                                        changing  ch_table  = rf_ztct-&gt;main_list ).
      when &apos;&amp;PREP_XLS&apos;.
        check rf_table_xls is not bound.
        rf_ztct-&gt;display_excel( exporting im_table = rf_ztct-&gt;main_list ).
      when &apos;&amp;SAVE&apos;.
*       Build header
        rf_ztct-&gt;main_to_tab_delimited( exporting im_main_list     = rf_ztct-&gt;main_list
                                        importing ex_tab_delimited = rf_ztct-&gt;tab_delimited ).
* Finding desktop
        call method cl_gui_frontend_services=&gt;get_desktop_directory
          changing
            desktop_directory    = lp_desktop
          exceptions
            cntl_error           = 1
            error_no_gui         = 2
            not_supported_by_gui = 3
            others               = 4.
        if sy-subrc &lt;&gt; 0.
          message e001(00) with
              &apos;Desktop not found&apos;(008).
        endif.

        convert date sy-datum time sy-uzeit
          into time stamp lp_timestamp time zone sy-zonlo.
        lp_default_filename = lp_timestamp.
        concatenate &apos;ZTCT-&apos; lp_default_filename into lp_default_filename.

        lp_title = &apos;Save Transportlist&apos;(009).
        call method cl_gui_frontend_services=&gt;file_save_dialog
          exporting
            window_title         = lp_title
            default_extension    = &apos;TXT&apos;
            default_file_name    = lp_default_filename
            initial_directory    = lp_desktop
          changing
            filename             = lp_filename
            path                 = lp_path
            fullpath             = lp_fullpath
          exceptions
            cntl_error           = 1
            error_no_gui         = 2
            not_supported_by_gui = 3
            others               = 4.
        if sy-subrc &lt;&gt; 0.
          message id sy-msgid type sy-msgty number sy-msgno
                     with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        endif.

*       Display save dialog window
        call method cl_gui_frontend_services=&gt;gui_download
          exporting
            filename                = lp_fullpath
            filetype                = &apos;ASC&apos;
          importing
            filelength              = lp_filelength
          changing
            data_tab                = rf_ztct-&gt;tab_delimited
          exceptions
            file_write_error        = 1
            no_batch                = 2
            gui_refuse_filetransfer = 3
            invalid_type            = 4
            no_authority            = 5
            unknown_error           = 6
            header_not_allowed      = 7
            separator_not_allowed   = 8
            filesize_not_allowed    = 9
            header_too_long         = 10
            dp_error_create         = 11
            dp_error_send           = 12
            dp_error_write          = 13
            unknown_dp_error        = 14
            access_denied           = 15
            dp_out_of_memory        = 16
            disk_full               = 17
            dp_timeout              = 18
            file_not_found          = 19
            dataprovider_exception  = 20
            control_flush_error     = 21
            not_supported_by_gui    = 22
            error_no_gui            = 23
            others                  = 24.
        case sy-subrc.
          when 0.
          when others.
            message id sy-msgid type sy-msgty number sy-msgno
                       with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        endcase.
      when &apos;&amp;NCONF&apos;.
        clear: lp_row_found.
        lp_tabix = ls_cell-row + 1.
        loop at rf_ztct-&gt;main_list into rf_ztct-&gt;main_list_line from lp_tabix.
          if lp_row_found is initial and
            ( rf_ztct-&gt;main_list_line-warning_rank &gt;= rf_ztct-&gt;co_info_rank ).
            ls_cell-row = sy-tabix.
            ls_cell-columnname = &apos;WARNING_LVL&apos;.
            lr_selections-&gt;set_current_cell( ls_cell ).
            lp_row_found = abap_true.
          endif.
        endloop.
        if lp_row_found is initial.
          loop at rf_ztct-&gt;main_list into rf_ztct-&gt;main_list_line.
            if lp_row_found is initial and
             ( rf_ztct-&gt;main_list_line-warning_rank &gt;= rf_ztct-&gt;co_info_rank ).
              ls_cell-row = sy-tabix.
              ls_cell-columnname = &apos;WARNING_LVL&apos;.
              lr_selections-&gt;set_current_cell( ls_cell ).
              lp_row_found = abap_true.
            endif.
          endloop.
          if lp_row_found is initial.
            message i000(db) with &apos;No next conflict found&apos;(021).
          endif.
        endif.
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
    endcase.
  endmethod.                    &quot;on_function_click

  method on_double_click.
    data: lr_selections      type ref to cl_salv_selections.
*   Selected rows
    data: lt_rows    type salv_t_row.
    data: ls_cell    type salv_s_cell.

    lr_selections = rf_table-&gt;get_selections(  ).
    lt_rows = lr_selections-&gt;get_selected_rows( ).
    ls_cell = lr_selections-&gt;get_current_cell( ).

*   Only display the details when the list is the MAIN list (Object level
* not when the list is on Header level (XLS)
    if rf_table_xls is bound.
      exit.
    else.
      read table rf_ztct-&gt;main_list     into rf_ztct-&gt;main_list_line index row.
    endif.
    case column.
      when &apos;TRKORR&apos;.
        rf_ztct-&gt;display_transport( exporting im_trkorr = rf_ztct-&gt;main_list_line-trkorr ).
      when &apos;AS4USER&apos;.
        rf_ztct-&gt;display_user( exporting im_user = rf_ztct-&gt;main_list_line-as4user ).
      when &apos;CHECKED_BY&apos;.
        rf_ztct-&gt;display_user( exporting im_user = rf_ztct-&gt;main_list_line-checked_by ).
*     Documentation
      when &apos;INFO&apos;.
        rf_ztct-&gt;display_docu( exporting im_trkorr = rf_ztct-&gt;main_list_line-trkorr ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when &apos;WARNING_LVL&apos;.
*       Display popup with the conflicting transports/objects
        if rf_ztct-&gt;main_list_line-warning_lvl is not initial.
          rf_ztct-&gt;build_conflict_popup( rows = lt_rows
                                         cell = ls_cell ).
          rf_ztct-&gt;refresh_alv( ).                 &quot;Refresh the ALV
        endif.
      when others.
    endcase.
  endmethod.                                       &quot;on_double_click

  method on_double_click_popup.
    data: lr_selections      type ref to cl_salv_selections.
*   Selected rows
    data: lt_rows    type salv_t_row.
    data: ls_cell    type salv_s_cell.

    lr_selections = rf_table-&gt;get_selections(  ).
    lt_rows = lr_selections-&gt;get_selected_rows( ).
    ls_cell = lr_selections-&gt;get_current_cell( ).

    read table rf_ztct-&gt;conflicts into rf_ztct-&gt;conflict_line index row.
    case column.
      when &apos;TRKORR&apos;.
        rf_ztct-&gt;display_transport( exporting im_trkorr = rf_ztct-&gt;conflict_line-trkorr ).
      when &apos;AS4USER&apos;.
        rf_ztct-&gt;display_user( exporting im_user = rf_ztct-&gt;conflict_line-as4user ).
      when &apos;CHECKED_BY&apos;.
        rf_ztct-&gt;display_user( exporting im_user = rf_ztct-&gt;conflict_line-checked_by ).
*     Documentation
      when &apos;INFO&apos;.
        rf_ztct-&gt;display_docu( exporting im_trkorr = rf_ztct-&gt;conflict_line-trkorr ).
        rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
      when others.
    endcase.
  endmethod.                                       &quot;on_double_click

  method on_link_click.
    field-symbols: &lt;rf_ref_table&gt; type ref to cl_salv_table.
*   Which table are we displaying? Object level or Header level (XLS)?
    if rf_table_xls is bound.
      read table rf_ztct-&gt;main_list_xls into rf_ztct-&gt;main_list_line index row.
    else.
      read table rf_ztct-&gt;main_list     into rf_ztct-&gt;main_list_line index row.
    endif.
    case column.
      when &apos;TRKORR&apos;.
        rf_ztct-&gt;display_transport( exporting im_trkorr = rf_ztct-&gt;main_list_line-trkorr ).
      when &apos;OBJ_NAME&apos;.
        call function &apos;TR_OBJECT_JUMP_TO_TOOL&apos;
          exporting
            iv_pgmid    = rf_ztct-&gt;main_list_line-pgmid
            iv_object   = rf_ztct-&gt;main_list_line-object
            iv_obj_name = rf_ztct-&gt;main_list_line-obj_name
            iv_action   = &apos;SHOW&apos;
          exceptions
            others      = 1.
        if sy-subrc &lt;&gt; 0.
          message i000(db) with &apos;Object cannot be displayed...&apos;(m14).
        endif.
      when others.
    endcase.
  endmethod.                                       &quot;on_link_click

  method on_link_click_popup.
    read table rf_ztct-&gt;conflicts into rf_ztct-&gt;conflict_line index row.
    case column.
      when &apos;TRKORR&apos;.
        rf_ztct-&gt;display_transport( exporting im_trkorr = rf_ztct-&gt;conflict_line-trkorr ).
      when others.
    endcase.
  endmethod.                                       &quot;on_link_click_popup

endclass.                    &quot;lcl_eventhandler_ztct IMPLEMENTATION

*--------------------------------------------------------------------*
*       CLASS lcl_ztct IMPLEMENTATION
*--------------------------------------------------------------------*
class lcl_ztct implementation.

  method constructor.
    data: ra_project_trkorrs            type range of trkorr.
    data: st_project_trkorrs            like line of ra_project_trkorrs.

    lp_alert0_text = &apos;Log couldn&apos;&apos;t be read or TP not released&apos;(w16).
    lp_alert1_text = &apos;Transport not released&apos;(w19).
    lp_alert2_text = &apos;Release started&apos;(w20).
    lp_alert3_text = &apos;Transport not in Transport Buffer&apos;(m12).
    lp_hint1_text  = &apos;Newer version in Acceptance, but in list&apos;(w22).
    lp_hint2_text  = &apos;All conflicts are dealt with by the list&apos;(w04).
    lp_hint3_text  = &apos;Couldn&apos;&apos;t read log, but object in list&apos;(w21).
    lp_hint4_text  = &apos;Overwrites version(s), newer version in list&apos;(w11).
    lp_warn_text   = &apos;Previous transport not transported&apos;(w17).
    lp_error_text  = &apos;Newer version in production!&apos;(w01).
    lp_ddic_text   = &apos;Uses object not in list or production&apos;(w03).
    lp_info_text   = &apos;Newer version in test environment&apos;(w23).
    lp_fail_text   = &apos;Transport not possible&apos;(w24).
*   Create a range table containing all project transport numbers.
*   When selecting transports, these can be skipped.
    st_project_trkorrs-sign = &apos;I&apos;.
    st_project_trkorrs-option = &apos;EQ&apos;.
    select trkorr from ctsproject
                  into st_project_trkorrs-low.        &quot;#EC CI_SGLSELECT
      append st_project_trkorrs to me-&gt;project_trkorrs.
    endselect.
    if me-&gt;project_trkorrs[] is initial.
      append st_project_trkorrs to me-&gt;project_trkorrs.
    endif.
  endmethod.                    &quot;constructor

  method execute.
    data: lp_cancelled type abap_bool.
    if process_type = 1.
      me-&gt;get_data( exporting im_trkorr_range = trkorr_range ).
      me-&gt;get_additional_tp_info( changing ch_table = me-&gt;main_list ).
*     First selection: If the flag to exclude transport that are already
*     in production is set, remove all these transports from the main
*     list.
      if skiplive is not initial.
        me-&gt;remove_tp_in_prd( ).
      endif.
*     Table checks not possible for version checking.
      if process_type = 1.
        me-&gt;build_table_keys_popup( ).
        me-&gt;add_table_keys_to_list( importing table = me-&gt;main_list ).
      endif.
* Reason to check data dictionary objects:
* If objects in the transport list contain DDIC objects that do NOT
* exist in production and do NOT exist in the transport list, errors
* (DUMPS) will happen when the transports are moved to production.
* Checking steps:
*   1. Get all Z-objects in tables DD01L, DD02L and DD04L (Domains,
*      Tables, Elements)
*   2. Get all transports from E071 containing these objects
*   3. Store the link between Transports and Objects in attribute WHERE_USED
*   4. Remove from the table all records for objects/transports that have
*       been transported to production
*   5. Execute a Where-Used on all remaining objects
*   6. If there are Objects in the main transport list, that are ALSO in
*     the Where-Used list then THE TRANSPORT CANNOT GO TO PRODUCTION!
      if check_ddic = abap_true.
        me-&gt;prepare_ddic_check( ).
      endif.
      me-&gt;check_for_conflicts( changing ch_main_list = me-&gt;main_list ).
    else.
      me-&gt;gui_upload( exporting im_filename  = filename
                      importing ex_cancelled = lp_cancelled ).
      if lp_cancelled = abap_true.
        exit.
      endif.
    endif.
    me-&gt;set_color( ).
    me-&gt;alv_init( ).
    me-&gt;alv_set_properties( exporting im_table = rf_table ).
    me-&gt;alv_set_tooltips( exporting im_table = rf_table ).
    me-&gt;alv_output( ).
  endmethod.                    &quot;execute

  method get_data.
    me-&gt;refresh_import_queues( ).
    me-&gt;get_main_transports( exporting im_trkorr_range = im_trkorr_range ).
  endmethod.                    &quot;get_data

  method: get_tp_prefix.
    if me-&gt;prefix is initial.
*     Build transport prefix
      if im_dev is supplied.
        set_tp_prefix( exporting im_dev = im_dev ).
      else.
        set_tp_prefix( ).
      endif.
    endif.
    re_tp_prefix = me-&gt;prefix.
  endmethod.                    &quot;set_tp_prefix

  method: set_tp_prefix.
*   Build transport prefix:
    if im_dev is supplied.
      concatenate im_dev &apos;K%&apos; into me-&gt;prefix.
    else.
      concatenate sy-sysid &apos;K%&apos; into me-&gt;prefix.
    endif.
  endmethod.                    &quot;set_tp_prefix

  method: refresh_import_queues.
    call function &apos;TMS_MGR_REFRESH_IMPORT_QUEUES&apos;.
  endmethod.                    &quot;refresh_import_queues

  method: flag_for_process.
    data: ra_trkorr type range of trkorr.
    data: ls_trkorr like line of ra_trkorr.
    data: ls_row      type int4.
    if rows is initial and cell is initial.
      message i000(db) with &apos;Please select records or put the cursor on a row&apos;(m10).
      exit.
    endif.
*   First clear all the flags:
    me-&gt;clear_flags( ).
*   If the DDIC check is OFF, but there ARE DDIC warnings in the list,
*   then we need to flag these records to be checked. If that is not
*   done then the DDIC warning icon would stay, even if the missing
*   DDIC object would be added to the list...
    if me-&gt;check_ddic = abap_false.
      loop at me-&gt;main_list into  me-&gt;main_list_line
                            where warning_lvl = co_ddic.
        me-&gt;main_list_line-flag = abap_true.
        modify me-&gt;main_list from me-&gt;main_list_line index sy-tabix transporting flag.
      endloop.
    endif.
*   If row(s) are selected, use the table
    loop at rows into ls_row.
      me-&gt;main_list_line-flag = abap_true.
      modify me-&gt;main_list from me-&gt;main_list_line index ls_row transporting flag.
    endloop.
*   If no rows were selected, take the current cell instead
    if sy-subrc &lt;&gt; 0.
      read table me-&gt;main_list into me-&gt;main_list_line index cell-row.
      me-&gt;main_list_line-flag = abap_true.
      modify me-&gt;main_list from me-&gt;main_list_line index cell-row transporting flag.
    endif.
  endmethod.                    &quot;flag_for_process

  method: check_for_conflicts.
    data: ls_ddic_conflict_info type ty_request_details.
    data: ta_stms_wbo_requests type table of stms_wbo_request,
          st_stms_wbo_requests type stms_wbo_request.
    data: lp_counter           type i.
    data: lp_tabix             type sytabix.
    data: lp_return            type c.
    data: lp_exit              type abap_bool.
    data: ls_main              type ty_request_details.
    data: ls_line_temp         type ty_request_details.
    data: lt_newer_transports  type tt_request_details.
    data: lt_older_transports  type tt_request_details.
    data: ls_newer_line        type ty_request_details.
    data: ls_older_line        type ty_request_details.
    data: lp_domnam            type char10.
    data: lp_highest_lvl       type icon_d.
    data: lp_highest_rank      type numc4.
    data: lp_highest_text      type text74.
    data: lp_highest_col       type lvc_t_scol.
    data: lp_target            type tmssysnam.
    data: lp_obj_name          type trobj_name.
    refresh: me-&gt;conflicts.
    clear:   me-&gt;conflict_line,
             me-&gt;total.
    check me-&gt;check_flag = abap_true.
*   For each transports, all the objects in the transport will be checked.
*   If there is a newer version of an object in prd, then a warning will
*   be displayed. Also if a newer version that was in prd was actually
*   overwritten or if an object could not be checked.
*   Total for progress indicator: How many will be checked?
    clear: lp_counter.
    loop at ch_main_list into ls_main where prd &lt;&gt; co_okay
                                      and   dev &lt;&gt; co_error
                                      and   flag = abap_true.
      me-&gt;total = me-&gt;total + 1.
    endloop.

*   Check each object in the main list, that has been flagged (also allow
*   checking of transports in prd, those may have been added for transport
*   again):
    loop at ch_main_list into ls_main where prd  &lt;&gt; co_okay
                                      and   dev  &lt;&gt; co_error
                                      and   flag =  abap_true.
      clear: me-&gt;conflict_line.
      clear: ls_main-warning_lvl,
             ls_main-warning_rank,
             ls_main-warning_txt.
      lp_tabix = sy-tabix.
*     Show the progress indicator
      lp_counter = lp_counter + 1.
      me-&gt;progress_indicator( exporting im_counter = lp_counter
                                        im_object  = ls_main-obj_name
                                        im_total   = me-&gt;total
                                        im_text    = &apos;Objects checked&apos;(011)
                                        im_flag    = &apos; &apos; ).
*     The CHECKED flag is useful to check if the check has been carried
*     out. On the selection screen, you can choose to clear the flags
*     (which can be useful if the file is old and needs to be rechecked)
*     This flag will aid the user when the user checks the list in
*     stages (Example: Half today and the other half tomorrow).
*     st_main-checked is set here to &apos;X&apos;. It will be updated later when
*     the check has been executed and the main list updated with the
*     change.
      ls_main-checked = co_checked.
      modify ch_main_list from ls_main transporting checked.
*     Check for documentation:
      me-&gt;check_documentation( exporting im_trkorr = ls_main-trkorr
                               changing  ch_table  = ch_main_list ).
*     The check is only relevant if transport is in QAS or DEV! Check is
*     skipped for the transports, already in prd.
      if ls_main-qas = co_okay.
        move me-&gt;prd_system to lp_target.
      endif.
*     Now check the object:
      me-&gt;get_tps_for_same_object( exporting im_line  = ls_main
                                   importing ex_newer = lt_newer_transports
                                             ex_older = lt_older_transports ).
*     Compare version in QAS with version in prd
*     If a newer version/request is found in prd, then add a warning and
*     continue with the next.
      if not lt_newer_transports[] is initial.
        loop at lt_newer_transports into ls_newer_line.  &quot;#EC CI_NESTED
*         Get transport description:
          select single as4text from  e07t
                                into  ls_newer_line-tr_descr
                                where trkorr = ls_newer_line-trkorr
                                and   langu  = sy-langu. &quot;#EC CI_SEL_NESTED
*         Check if it has been transported to the target system:
          refresh: ta_stms_wbo_requests.
          clear:   ta_stms_wbo_requests.
          read table tms_mgr_buffer into tms_mgr_buffer_line
               with table key request          = ls_newer_line-trkorr
                              target_system    = lp_target.
          if sy-subrc = 0.
            ta_stms_wbo_requests = tms_mgr_buffer_line-request_infos.
          else.
            call function &apos;TMS_MGR_READ_TRANSPORT_REQUEST&apos;
              exporting
                iv_request                 = ls_newer_line-trkorr
                iv_target_system           = lp_target
                iv_header_only             = &apos;X&apos;
                iv_monitor                 = &apos; &apos;
              importing
                et_request_infos           = ta_stms_wbo_requests
              exceptions
                read_config_failed         = 1
                table_of_requests_is_empty = 2
                system_not_available       = 3
                others                     = 4.
            if sy-subrc &lt;&gt; 0.
              message id sy-msgid type sy-msgty number sy-msgno
                      with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            else.
              tms_mgr_buffer_line-request       = ls_newer_line-trkorr.
              tms_mgr_buffer_line-target_system = lp_target.
              tms_mgr_buffer_line-request_infos = ta_stms_wbo_requests.
              insert tms_mgr_buffer_line into table tms_mgr_buffer.
            endif.
          endif.
          read table ta_stms_wbo_requests index 1
                             into st_stms_wbo_requests.
          if st_stms_wbo_requests-e070 is not initial.
*           Only display the warning if the preceding transport is not
*           one of the selected transports (and in an earlier
*           position)
            me-&gt;check_if_same_object( exporting im_line        = ls_main
                                                im_newer_older = ls_newer_line
                                      importing ex_tabkey      = tp_tabkey
                                                ex_return      = lp_return ).
            check lp_return = abap_true.
*           Fill conflict list
            move-corresponding ls_newer_line to me-&gt;conflict_line.
            me-&gt;conflict_line-warning_lvl  = co_error.
            me-&gt;conflict_line-warning_rank = co_error_rank.
            me-&gt;conflict_line-warning_txt  = lp_error_text.
            me-&gt;conflict_line-objkey       = tp_tabkey.
*           Get the last date the object was imported
            me-&gt;get_import_datetime_qas( exporting im_trkorr  = ls_older_line-trkorr
                                         importing ex_as4time = me-&gt;conflict_line-as4time
                                                   ex_as4date = me-&gt;conflict_line-as4date ).
*           Check if the transport is in the list
*           Display the warning if the preceding transport is not
*           in the main list. If it is, then display the hint icon.
            read table ch_main_list
                 into  ls_line_temp
                 with key trkorr = ls_newer_line-trkorr
                 transporting prd.
            if sy-subrc = 0.
              if ls_line_temp-prd = co_scrap.
*               This newer version is in the list and made visible:
                me-&gt;conflict_line-warning_lvl = co_scrap.
              endif.
            else.
              append: me-&gt;conflict_line to me-&gt;conflicts.
              clear:  me-&gt;conflict_line.
            endif.
          else.
            me-&gt;check_if_in_list( exporting im_line  = ls_newer_line
                                            im_tabix = lp_tabix
                                  importing ex_line  = me-&gt;line_found_in_list ).
            if me-&gt;line_found_in_list is not initial.
*             Even if the transport is only in QAS and not in prd (so a
*             newer transport exists, but will not be overwritten), we still
*             want to let the user now about it. To prevent that a newer
*             development exists and should go to production, but it might
*             be forgotten if not selected....
              ls_newer_line-warning_lvl  = ls_main-warning_lvl  = co_hint.
              ls_newer_line-warning_rank = ls_main-warning_rank = co_hint2_rank.
              ls_newer_line-warning_txt  = ls_main-warning_txt  = lp_hint2_text.
*             No need to check further. A newer transport was found but because
*             that newer transport is in the list, we can stop checking for newer
*             transports because that will be done for the transport that is in
*             the list.
              lp_exit = abap_true.
            else.
*             The transport is not yet transported, but if it is found
*             further down in the list, it is okay. Change the warning level
*             from ERROR to INFO.
              ls_newer_line-warning_lvl  = ls_main-warning_lvl  = co_info.
              ls_newer_line-warning_rank = ls_main-warning_rank = co_info_rank.
              ls_newer_line-warning_txt  = ls_main-warning_txt  = lp_info_text.
            endif.
            move-corresponding ls_newer_line to me-&gt;conflict_line.
            append: me-&gt;conflict_line to me-&gt;conflicts.
            clear:  me-&gt;conflict_line.
            if lp_exit = abap_true.
              exit.
            endif.
          endif.
        endloop.
      endif.
*     Select all the transports that are older. These will be checked to
*     see if they have been moved to prd. If the older version has been
*     transported, it is okay.
*     If not, then add a warning and continue with the next record.
      if not lt_older_transports[] is initial.
        loop at lt_older_transports into ls_older_line.  &quot;#EC CI_NESTED
*         Get transport description:
          select single as4text from  e07t
                                into  ls_older_line-tr_descr
                                where trkorr = ls_older_line-trkorr
                                and   langu  = sy-langu. &quot;#EC CI_SEL_NESTED
*         Check if it has been transported to QAS
          refresh: ta_stms_wbo_requests.
          clear:   ta_stms_wbo_requests.
          read table tms_mgr_buffer into tms_mgr_buffer_line
                          with table key request          = ls_older_line-trkorr
                                         target_system    = lp_target.
          if sy-subrc = 0.
            ta_stms_wbo_requests = tms_mgr_buffer_line-request_infos.
          else.
            call function &apos;TMS_MGR_READ_TRANSPORT_REQUEST&apos;
              exporting
                iv_request                 = ls_older_line-trkorr
                iv_target_system           = lp_target
                iv_header_only             = &apos;X&apos;
                iv_monitor                 = &apos; &apos;
              importing
                et_request_infos           = ta_stms_wbo_requests
              exceptions
                read_config_failed         = 1
                table_of_requests_is_empty = 2
                system_not_available       = 3
                others                     = 4.
            if sy-subrc &lt;&gt; 0.
              message id sy-msgid type sy-msgty number sy-msgno
                      with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
            else.
              tms_mgr_buffer_line-request       = ls_older_line-trkorr.
              tms_mgr_buffer_line-target_system = lp_target.
              tms_mgr_buffer_line-request_infos = ta_stms_wbo_requests.
              insert tms_mgr_buffer_line into table tms_mgr_buffer.
            endif.
          endif.
*         Was an older transport found that has not yet gone to EEP?
          read table ta_stms_wbo_requests index 1
                                          into st_stms_wbo_requests.
          if st_stms_wbo_requests-e070 is initial.
            me-&gt;check_if_same_object( exporting im_line        = ls_main
                                                im_newer_older = ls_older_line
                                      importing ex_tabkey      = tp_tabkey
                                                ex_return      = lp_return ).
            if lp_return = abap_true.                      &quot;Yes, same object!
              move-corresponding ls_older_line to me-&gt;conflict_line.
*             Get the last date the object was imported
              me-&gt;get_import_datetime_qas( exporting im_trkorr  = ls_older_line-trkorr
                                           importing ex_as4time = me-&gt;conflict_line-as4time
                                                     ex_as4date = me-&gt;conflict_line-as4date ).
              me-&gt;conflict_line-warning_lvl  = co_warn.
              me-&gt;conflict_line-warning_rank = co_warn_rank.
              me-&gt;main_list_line-warning_txt = lp_warn_text.
              me-&gt;conflict_line-objkey       = tp_tabkey.
*             Check if the transport is in the list
*             Display the warning if the preceding transport is not
*             in the main list. If it is, then display the hint icon.
              read table ch_main_list
                   with key trkorr = ls_older_line-trkorr
                   transporting no fields.
              if sy-subrc = 0.
*               There is a warning but the conflicting transport is
*               ALSO in the list. Display the HINT Icon. The other
*               transport will be checked too, sooner or later...
                me-&gt;conflict_line-warning_lvl  = co_hint.
                me-&gt;conflict_line-warning_rank = co_hint2_rank.
                me-&gt;conflict_line-warning_txt  = lp_hint2_text.
              endif.
*             Check if transport has been released.
*             D - Modifiable
*             L - Modifiable, protected
*             A - Modifiable, protected
*             O - Release started
*             R - Released
*             N - Released (with import protection for repaired objects)
              refresh: ta_stms_wbo_requests.
              clear:   ta_stms_wbo_requests.
              read table tms_mgr_buffer into tms_mgr_buffer_line
                              with table key request          = ls_older_line-trkorr
                                             target_system    = me-&gt;dev_system.
              if sy-subrc = 0.
                ta_stms_wbo_requests = tms_mgr_buffer_line-request_infos.
              else.
                call function &apos;TMS_MGR_READ_TRANSPORT_REQUEST&apos;
                  exporting
                    iv_request                 = ls_older_line-trkorr
                    iv_target_system           = me-&gt;dev_system
                    iv_header_only             = &apos;X&apos;
                    iv_monitor                 = &apos; &apos;
                  importing
                    et_request_infos           = ta_stms_wbo_requests
                  exceptions
                    read_config_failed         = 1
                    table_of_requests_is_empty = 2
                    system_not_available       = 3
                    others                     = 4.
                if sy-subrc &lt;&gt; 0.
                  message id sy-msgid type sy-msgty number sy-msgno
                          with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
                else.
                  tms_mgr_buffer_line-request       = ls_older_line-trkorr.
                  tms_mgr_buffer_line-target_system = lp_target.
                  tms_mgr_buffer_line-request_infos = ta_stms_wbo_requests.
                  insert tms_mgr_buffer_line into table tms_mgr_buffer.
                endif.
              endif.
              read table ta_stms_wbo_requests index 1
                                              into st_stms_wbo_requests.
              if st_stms_wbo_requests-e070-trstatus na &apos;NR&apos;.
                me-&gt;conflict_line-warning_lvl  = co_alert.
                me-&gt;conflict_line-warning_rank = co_alert1_rank.
                me-&gt;conflict_line-warning_txt  = lp_alert1_text.
              elseif st_stms_wbo_requests-e070-trstatus = &apos;O&apos;.
                me-&gt;conflict_line-warning_lvl  = co_alert.
                me-&gt;conflict_line-warning_rank = co_alert2_rank.
                me-&gt;conflict_line-warning_txt  = lp_alert2_text.
              endif.
              append: me-&gt;conflict_line to me-&gt;conflicts.
              clear:  me-&gt;conflict_line.
            endif.
          else.
*           When the first earlier transported version is found,
*           the check must be ended.
            exit.
          endif.
        endloop.
      endif.
*     Determine highest warning level in conflict list
*     Only when NOT building the conflict popup
      if me-&gt;building_conflict_popup = abap_false.
        clear: lp_highest_lvl,
               lp_highest_rank,
               lp_highest_text,
               lp_highest_col.
        loop at me-&gt;conflicts into me-&gt;conflict_line.    &quot;#EC CI_NESTED
          if me-&gt;conflict_line-warning_rank &gt; lp_highest_rank.
            lp_highest_lvl  = me-&gt;conflict_line-warning_lvl.
            lp_highest_rank = me-&gt;conflict_line-warning_rank.
            lp_highest_col  = me-&gt;conflict_line-t_color.
            me-&gt;determine_warning_text( exporting im_highest_rank = lp_highest_rank
                                        importing ex_highest_text = lp_highest_text ).
          endif.
        endloop.
        ls_main-warning_lvl  = lp_highest_lvl.
        ls_main-warning_rank = lp_highest_rank.
        ls_main-warning_txt  = lp_highest_text.
        ls_main-t_color      = lp_highest_col.
        modify: ch_main_list from ls_main transporting warning_lvl
                                                       warning_rank
                                                       warning_txt
                                                       t_color.
      endif.
*     Refresh the conflict table. But, if the conflict popup is being build
*     for one or more lines, then do NOT refresh the conflict table. Display
*     ALL conflicts for all selected lines.
      if me-&gt;building_conflict_popup = abap_false.
        refresh: me-&gt;conflicts.
      endif.
    endloop.

*   Update the conflict table and the main list with DDIC information
    me-&gt;do_ddic_check( changing ch_main_list = ch_main_list ).

*   Check if the transport is in Transport Buffer
*   TMS_MGR_REFRESH_IMPORT_QUEUES updates this table
    clear:lp_counter.
    if me-&gt;skip_buffer_chk         = abap_false and &quot; X = Skip buffer check.
       me-&gt;building_conflict_popup = abap_false.    &quot; Never when building popup
      loop at ch_main_list into ls_main where prd  &lt;&gt; co_okay
                                        and   dev  &lt;&gt; co_error
                                        and   flag =  abap_true.
*       Show the progress indicator
        lp_counter = lp_counter + 1.
        me-&gt;progress_indicator( exporting im_counter = lp_counter
                                          im_object  = ls_main-obj_name
                                          im_total   = me-&gt;total
                                          im_text    = &apos;Checking buffer&apos;(050)
                                          im_flag    = &apos; &apos; ).
        clear: lp_domnam.
        select single domnam into  lp_domnam from tmsbuffer
                             where trkorr eq ls_main-trkorr
                             and   sysnam eq me-&gt;prd_system. &quot;#EC CI_SEL_NESTED
        if sy-subrc eq 4.
*          ls_main-checked = co_okay.
          ls_main-warning_lvl  = co_alert.
          ls_main-warning_rank = co_alert3_rank.
          ls_main-warning_txt  = lp_alert3_text.
          modify ch_main_list from  ls_main.
        endif.
      endloop.
    endif.
*   Sort ta_conflicts by date time stamp, descending. Most recent should
*   be displayed first:
    sort me-&gt;conflicts by as4date descending
                          as4time descending
                          trkorr  descending.
    delete adjacent duplicates from me-&gt;conflicts
                               comparing trkorr object obj_name.
  endmethod.                    &quot;check_for_conflicts

  method: build_table_keys_popup.
*   A popup is displayed with all tables found in the main list, that
*   have keys. The user has now the option to include them in the
*   checking procedure. This is the only place where the user has a
*   complete overview of the tables that have been found...
*   Declaration for ALV Columns
    data: lr_columns_table       type ref to cl_salv_columns_table.
    data: lr_column_table        type ref to cl_salv_column_table.
    data: lt_t_column_ref        type salv_t_column_ref.
    data: ls_reference           type salv_s_ddic_reference.
    data: ls_s_column_ref        type salv_s_column_ref.
    data: st_colo                type lvc_s_colo.
    data: lr_events              type ref to cl_salv_events_table.
*   Declaration for Global Display Settings
    data: lr_display_settings    type ref to cl_salv_display_settings.
*   Declaration for Table Selection settings
    data: lr_selections          type ref to cl_salv_selections.
    data: lp_title               type lvc_title.
    data: lp_tp_prefix           type char5.
    data: lp_xstart              type i value 26.
    data: lp_xend                type i.
    data: lp_ystart              type i value 7.
    data: lp_yend                type i.
    data: lp_cw_tabname          type lvc_outlen.  &quot;Length
    data: lp_cw_counter          type lvc_outlen.  &quot;Length
    data: lp_cw_ddtext           type lvc_outlen.  &quot;Length
    lp_title = &apos;Keys can be checked for &apos; &amp;
               &apos;the following tables&apos;(t02).
*   Only if the option to check for table keys is switched ON and
*   checking is active
    check: me-&gt;check_tabkeys = abap_true and
           me-&gt;check_flag    = abap_true.
* Determine the transport prefix (if not done already)
    lp_tp_prefix = me-&gt;get_tp_prefix( im_dev = me-&gt;dev_system ).
*   Fill the internal table to be displayed in the popup:
    loop at me-&gt;main_list into  me-&gt;main_list_line
                          where objfunc    = &apos;K&apos;
                          and   keyobject  is initial
                          and   keyobjname is initial
                          and   obj_name   in excluded_objects.
      clear: table_keys_line.
      select ddtext from  dd02t
                    up to 1 rows
                    into  table_keys_line-ddtext
                    where ddlanguage = sy-langu
                    and   tabname    = me-&gt;main_list_line-obj_name. &quot;#EC CI_SEL_NESTED
      endselect.
*     Count the keys...
      select count(*)
              from  e071k into table_keys_line-counter
              where trkorr     =  me-&gt;main_list_line-trkorr
              and   mastertype =  me-&gt;main_list_line-object
              and   not trkorr in  me-&gt;project_trkorrs
              and   trkorr like lp_tp_prefix
              and   objname    in excluded_objects.  &quot;#EC CI_SEL_NESTED
      table_keys_line-tabname  = me-&gt;main_list_line-obj_name.
      collect table_keys_line into table_keys.
    endloop.
    delete table_keys where counter = 0.
    check not table_keys[] is initial.
    sort  table_keys by counter descending.
*   Determine total width
    loop at table_keys into table_keys_line.
      me-&gt;determine_col_width( exporting im_field    = table_keys_line-tabname
                               changing  ex_colwidth = lp_cw_tabname ).
*      me-&gt;determine_col_width( EXPORTING im_field    = table_keys_line-counter
*                               IMPORTING ex_colwidth = lp_cw_counter ).
      me-&gt;determine_col_width( exporting im_field    = table_keys_line-ddtext
                               changing  ex_colwidth = lp_cw_ddtext ).
    endloop.

    lp_xend = lp_cw_tabname + lp_cw_counter + lp_cw_ddtext.

    try.
        call method cl_salv_table=&gt;factory
          importing
            r_salv_table = rf_table_keys
          changing
            t_table      = table_keys.
*   Global display settings
        lr_display_settings = rf_table_keys-&gt;get_display_settings( ).
*   Activate Striped Pattern
        lr_display_settings-&gt;set_striped_pattern( if_salv_c_bool_sap=&gt;true ).
*   Report header
        lr_display_settings-&gt;set_list_header( lp_title ).
*       Table Selection Settings
        lr_selections = rf_table_keys-&gt;get_selections( ).
        if lr_selections is not initial.
*         Allow row and column Selection (Adds checkbox)
          lr_selections-&gt;set_selection_mode(
                          if_salv_c_selection_mode=&gt;row_column ).
        endif.
*       Get the columns from ALV Table
        lr_columns_table = rf_table_keys-&gt;get_columns( ).
        if lr_columns_table is not initial.
          refresh : lt_t_column_ref.
          lt_t_column_ref = lr_columns_table-&gt;get( ).
*         Get columns properties
          lr_columns_table-&gt;set_optimize( if_salv_c_bool_sap=&gt;true ).
          lr_columns_table-&gt;set_key_fixation( if_salv_c_bool_sap=&gt;true ).
*         Individual Column Properties.
          loop at lt_t_column_ref into ls_s_column_ref.
            try.
                lr_column_table ?=
                  lr_columns_table-&gt;get_column( ls_s_column_ref-columnname ).
              catch cx_salv_not_found into rf_root.
                me-&gt;handle_error( exporting rf_oref = rf_root ).
            endtry.
            case lr_column_table-&gt;get_columnname( ).
              when &apos;COUNTER&apos;.
                ls_reference-table = &apos;UGMD_S_STOP_CONDITION&apos;.
                ls_reference-field = &apos;NUMBER_OF_RESULTS&apos;.
                lr_column_table-&gt;set_ddic_reference( ls_reference ).
                lr_column_table-&gt;set_alignment( if_salv_c_alignment=&gt;centered ).
            endcase.
          endloop.
        endif.
*       Register handler for actions
        lr_events = rf_table_keys-&gt;get_event( ).
        set handler lcl_eventhandler_ztct=&gt;on_function_click for lr_events.
*       Save reference to access object from handler
        lcl_eventhandler_ztct=&gt;rf_table_keys = rf_table_keys.
*       Use gui-status ST850 from program SAPLKKB
        rf_table_keys-&gt;set_screen_status( pfstatus = &apos;ST850&apos;
                                          report   = &apos;SAPLKKBL&apos; ).
*       Determine the size of the popup window:
        lp_xend = lp_xend + lp_xstart + 5.
        describe table table_keys lines lp_yend.
        lp_yend = lp_yend + lp_ystart.
*       Display as popup
        rf_table_keys-&gt;set_screen_popup( start_column = lp_xstart
                                         end_column   = lp_xend
                                         start_line   = lp_ystart
                                         end_line     = lp_yend ).
        rf_table_keys-&gt;display( ).
      catch cx_salv_msg into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.
  endmethod.                    &quot;build_table_keys_popup

  method: add_table_keys_to_list .
    data: lp_counter          type sy-tabix.
    data: lp_total(10)        type n.
    data: lt_keys             type tt_request_details.
    data: ls_keys             type ty_request_details.
*   Only if the option to check for table keys is switched ON, on the
*   selection screen:
    check: check_tabkeys = abap_true.
*   Check if keys exist in table E071K. Only do this for the records
*   that have not been added already (without key object and name)
*   Remove the entries for which that is the case and add the objects,
*   with the keys.
*   s_exobj contains all tables that we do not want to check.
    loop at table into ls_keys where objfunc    = &apos;K&apos;
                               and   keyobject  is initial
                               and   keyobjname is initial
                               and   obj_name   in excluded_objects.  &quot;Exclude
* Now read the keys from the database
      select object objname tabkey
                from e071k
                into (ls_keys-keyobject,
                      ls_keys-keyobjname,
                      ls_keys-tabkey)
                where trkorr     =  ls_keys-trkorr
                and   mastertype =  ls_keys-object
                and   mastername =  ls_keys-obj_name
                and   not trkorr in  me-&gt;project_trkorrs
                and   trkorr     like me-&gt;prefix
                and   objname    in excluded_objects. &quot;#EC CI_SEL_NESTED
        append ls_keys to lt_keys.
      endselect.
    endloop.
    sort lt_keys.
    delete adjacent duplicates from lt_keys.
*   Add the entries for the table keys, and remove the root objects.
    clear: lp_counter.
    describe table lt_keys lines lp_total.
    loop at lt_keys into ls_keys.
**     Show the progress indicator
*      lp_counter = lp_counter + 1.
*      me-&gt;progress_indicator( EXPORTING im_counter = lp_counter
*                                        im_object  = ls_keys-obj_name
*                                        im_total   = lp_total
*                                        im_text    = &apos;Determining table keys&apos;(006)
*                                        im_flag    = &apos; &apos; ).
      delete table where objfunc  = &apos;K&apos;
                   and   trkorr   = ls_keys-trkorr
                   and   object   = ls_keys-object
                   and   obj_name = ls_keys-obj_name.
    endloop.
    append lines of lt_keys to table.

  endmethod.                    &quot;add_table_keys_to_list

  method progress_indicator.
    data: lp_gprogtext         type char1024.
    data: lp_gprogperc(4)      type p decimals 0.
    data: lp_gproggui          type i.
    data: lp_step              type i value 1.
    data: lp_difference        type i.
    data: lp_string            type string.
    data: lp_total             type numc10.
    data: lp_counter_reset     type i.
*   IM_TOTAL cannot be changed, and we need to remove the leading
*   zero&apos;s. That is why intermediate parameter lp_TOTAL was added
    lp_total = im_total.
    lp_difference = lp_total - im_counter.
*   Determine step size
    if im_flag = abap_true.
      if lp_difference &lt; 100.
        lp_step = 1.
      elseif lp_difference &lt; 1000.
        lp_step = 50.
      else.
        lp_step = 100.
      endif.
    endif.
*   Number of selected items on GUI:
    check lp_step &lt;&gt; 0.
    lp_gproggui = im_counter mod lp_step.
    if lp_gproggui = 0.
      write im_counter to lp_gprogtext left-justified.
      if lp_total &lt;&gt; 0.
        shift lp_total left deleting leading &apos;0&apos;.
        concatenate lp_gprogtext &apos;of&apos; lp_total
                    into lp_gprogtext separated by &apos; &apos;.
      endif.
      if im_object is not initial.
        concatenate &apos;(&apos; im_object &apos;)&apos;
                    into lp_string.
        condense lp_string.
      endif.
      concatenate lp_gprogtext im_text lp_string
                  into lp_gprogtext
                  separated by &apos; &apos;.
      condense lp_gprogtext.
      call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
        exporting
          percentage = lp_gprogperc
          text       = lp_gprogtext.
    endif.

* To avoid timeouts
    if me-&gt;check_tabkeys = abap_true.
      lp_counter_reset = im_counter mod 5.
    else.
      lp_counter_reset = im_counter mod 50.
    endif.

    if lp_counter_reset = 0.
      call function &apos;TH_REDISPATCH&apos;.
    endif.

  endmethod.                    &quot;progress_indicator

  method get_main_transports.
    data: ta_main_list_vrsd  type tt_request_details.
    data: st_main_list_vrsd  type ty_request_details.
    data: lp_return          type c.
    field-symbols: &lt;l_main_list&gt; type ty_request_details.
    refresh: ta_main_list_vrsd.
    call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      exporting
        text = &apos;Selecting data...&apos;(014).
*   Join over E070, E071:
*   Description is read later to prevent complicated join and
*   increased runtime
    select a~trkorr   a~trfunction a~trstatus
           a~as4user  a~as4date    a~as4time
           b~pgmid b~object   b~obj_name   b~objfunc
           into corresponding fields of table me-&gt;main_list
           from  e070 as a join e071 as b
             on  a~trkorr  = b~trkorr
           where a~trkorr  in im_trkorr_range
           and   strkorr   = &apos;&apos;
           and   a~trkorr  like me-&gt;prefix
           and ( pgmid     = &apos;LIMU&apos; or
                 pgmid     = &apos;R3TR&apos; ).

    if me-&gt;main_list[] is not initial.
      loop at me-&gt;main_list assigning &lt;l_main_list&gt;.
*       If the transports should be checked, flag it.
        &lt;l_main_list&gt;-flag = abap_true.
*       Read transport description:
        select single  as4text
                 from  e07t
                 into &lt;l_main_list&gt;-tr_descr
                 where trkorr = &lt;l_main_list&gt;-trkorr
                 and   langu  = sy-langu.            &quot;#EC CI_SEL_NESTED
      endloop.
    endif.
    sort me-&gt;main_list.
    delete adjacent duplicates from me-&gt;main_list.
*   Only continue if there are transports to check...
    check not me-&gt;main_list[] is initial.
*   Check if project is in selection range:
    if project_range is not initial.
      loop at me-&gt;main_list assigning &lt;l_main_list&gt;.
        select single reference
               from e070a
               into  &lt;l_main_list&gt;-project
               where trkorr = &lt;l_main_list&gt;-trkorr
               and   attribute = &apos;SAP_CTS_PROJECT&apos;   &quot;#EC CI_SEL_NESTED
               and   reference in project_range.
        if sy-subrc &lt;&gt; 0.
          delete me-&gt;main_list index sy-tabix.
        endif.
      endloop.
    endif.
*   Check if the searchstring is in the transport description:
    if not me-&gt;search_string is initial.
      loop at me-&gt;main_list into me-&gt;main_list_line.
        if me-&gt;search_string cs &apos;*&apos;.
          if me-&gt;main_list_line-tr_descr np me-&gt;search_string.
            delete me-&gt;main_list index sy-tabix.
            continue.
          endif.
        else.
          if me-&gt;main_list_line-tr_descr ns me-&gt;search_string.
            delete me-&gt;main_list index sy-tabix.
            continue.
          endif.
        endif.
      endloop.
    endif.
    check me-&gt;main_list[] is not initial.
*   Also read from the version table VRSD. This table contains all
*   dependent objects. For example: If from E071 a function group
*   is retrieved, VRSD will contain all functions too.
    select korrnum objtype objname
           author  datum zeit
           from  vrsd
           into (st_main_list_vrsd-trkorr,
                 st_main_list_vrsd-object,
                 st_main_list_vrsd-obj_name,
                 st_main_list_vrsd-as4user,
                 st_main_list_vrsd-as4date,
                 st_main_list_vrsd-as4time)
           for all entries in me-&gt;main_list
           where korrnum   =  me-&gt;main_list-trkorr.
      read table me-&gt;main_list into me-&gt;main_list_line
                               with key trkorr = st_main_list_vrsd-trkorr.
      move: st_main_list_vrsd-object   to me-&gt;main_list_line-object,
            st_main_list_vrsd-obj_name to me-&gt;main_list_line-obj_name,
            st_main_list_vrsd-as4user  to me-&gt;main_list_line-as4user,
            st_main_list_vrsd-as4date  to me-&gt;main_list_line-as4date,
            st_main_list_vrsd-as4time  to me-&gt;main_list_line-as4time.
*     Only append if the object from VRSD does not already exist in the
*     main list:
      read table me-&gt;main_list with key trkorr  = me-&gt;main_list_line-trkorr
                                        object   = me-&gt;main_list_line-object
                                        obj_name = me-&gt;main_list_line-obj_name
                                        transporting no fields.
      if sy-subrc &lt;&gt; 0.
        me-&gt;main_list_line-flag = abap_true.
        append me-&gt;main_list_line to ta_main_list_vrsd.
      endif.
    endselect.
*   Duplicates may exist if the same object exists in different tasks
*   belonging to the same request:
    sort ta_main_list_vrsd descending.
    delete adjacent duplicates from ta_main_list_vrsd
                    comparing trkorr object obj_name.
*   Now add all VRSD entries to the main list:
    append lines of ta_main_list_vrsd to me-&gt;main_list.
    me-&gt;sort_main_list( ).
  endmethod.                    &quot;get_main_transports

  method get_tp_info.
*   Join over E070, E071:
*   Description is read later to prevent complicated join and
*   increased runtime
    select single a~trkorr  a~trfunction a~trstatus
                  a~as4user a~as4date  a~as4time
                  b~object  b~obj_name
           into (re_line-trkorr,
                 re_line-trfunction,
                 re_line-trstatus,
                 re_line-as4user,
                 re_line-as4date,
                 re_line-as4time,
                 re_line-object,
                 re_line-obj_name)
           from  e070 as a join e071 as b
           on    a~trkorr   = b~trkorr
           where a~trkorr   = im_trkorr
           and   strkorr    = &apos;&apos;
           and   b~obj_name = im_obj_name.
*   Read transport description:
    select single  as4text
             from  e07t
             into  re_line-tr_descr
             where trkorr = im_trkorr
             and   langu  = sy-langu.
    re_line-checked_by = sy-uname.
*       First get the descriptions (Status/Type/Project):
*       Retrieve texts for Status Description
    select ddtext
           from  dd07t
           into  re_line-status_text up to 1 rows
           where domname    = &apos;TRSTATUS&apos;
           and   ddlanguage = sy-langu
           and   domvalue_l = re_line-trstatus.      &quot;#EC CI_SEL_NESTED
    endselect.
*       Retrieve texts for Description of request/task type
    select ddtext
           from  dd07t
           into  re_line-trfunction_txt up to 1 rows
           where domname    = &apos;TRFUNCTION&apos;
           and   ddlanguage = sy-langu
           and   domvalue_l = re_line-trfunction.    &quot;#EC CI_SEL_NESTED
    endselect.
*       Retrieve the project number (and description):
    select reference
           from  e070a up to 1 rows
           into  re_line-project
           where trkorr    = re_line-trkorr
           and   attribute = &apos;SAP_CTS_PROJECT&apos;.      &quot;#EC CI_SEL_NESTED
      select descriptn
             from  ctsproject up to 1 rows
             into  re_line-project_descr              &quot;#EC CI_SGLSELECT
             where trkorr  = re_line-project.        &quot;#EC CI_SEL_NESTED
      endselect.
    endselect.
*       Retrieve the description of the status
    select ddtext
           from  dd07t up to 1 rows
           into  re_line-trstatus
           where domname    = &apos;TRSTATUS&apos;
           and   ddlanguage = sy-langu
           and   domvalue_l = re_line-trstatus.      &quot;#EC CI_SEL_NESTED
    endselect.

  endmethod.                    &quot;get_tp_info

  method get_added_objects.
    data: lp_tabix          type sytabix,
          ls_main           type ty_request_details,
          ls_main_list_vrsd type ty_request_details,
          lt_main_list_vrsd type tt_request_details,
          ls_added          type ty_request_details.
    field-symbols: &lt;l_main_list&gt; type ty_request_details.
    refresh: ex_to_add.
    refresh: lt_main_list_vrsd.
    clear:   ls_main.
*   Select all requests (not tasks) in the range. Objects belonging to
*   the request are included in the table.
    select a~trkorr   a~trfunction a~trstatus
           a~as4user  a~as4date    a~as4time
           b~object   b~obj_name   b~objfunc
           into corresponding fields of table ex_to_add
           from  e070 as a join e071 as b
             on  a~trkorr = b~trkorr
           where a~trkorr in im_to_add
           and   a~strkorr = &apos;&apos;
           and   ( b~pgmid = &apos;LIMU&apos; or
                   b~pgmid = &apos;R3TR&apos; or
                   b~pgmid = &apos;R3OB&apos; or
                   b~pgmid = &apos;LANG&apos;).
*   Read transport description:
    if ex_to_add[] is not initial.
      loop at ex_to_add assigning &lt;l_main_list&gt;.
        &lt;l_main_list&gt;-flag = abap_true.
        select single  as4text
                 from  e07t
                 into &lt;l_main_list&gt;-tr_descr
                 where trkorr = &lt;l_main_list&gt;-trkorr
                 and   langu  = sy-langu.            &quot;#EC CI_SEL_NESTED
      endloop.
    endif.
*   Also read from the version table VRSD. This table contains all
*   dependent objects. For example: If from E071 a function group
*   is retrieved, VRSD will contain all functions too.
    if not ex_to_add[] is initial.
      select korrnum objtype objname
             author  datum zeit
             from  vrsd
             into (ls_main_list_vrsd-trkorr,
                   ls_main_list_vrsd-object,
                   ls_main_list_vrsd-obj_name,
                   ls_main_list_vrsd-as4user,
                   ls_main_list_vrsd-as4date,
                   ls_main_list_vrsd-as4time)
             for all entries in ex_to_add
             where korrnum   =  ex_to_add-trkorr.
        read table ex_to_add
                   into ls_main
                   with key trkorr = ls_main_list_vrsd-trkorr.
        move: ls_main_list_vrsd-object   to ls_main-object,
              ls_main_list_vrsd-obj_name to ls_main-obj_name,
              ls_main_list_vrsd-as4user  to ls_main-as4user,
              ls_main_list_vrsd-as4date  to ls_main-as4date,
              ls_main_list_vrsd-as4time  to ls_main-as4time.
*       Only append if the object from VRSD does not already exist
*       in the main list:
        read table ex_to_add with key trkorr   = ls_main-trkorr
                                      object   = ls_main-object
                                      obj_name = ls_main-obj_name
                             transporting no fields.
        if sy-subrc &lt;&gt; 0.
          ls_main-flag = abap_true.
          append ls_main to lt_main_list_vrsd.
        endif.
      endselect.
    endif.
*   Now add all VRSD entries to the main list:
    append lines of lt_main_list_vrsd to ex_to_add.
    me-&gt;add_table_keys_to_list( importing table = ex_to_add ).
*   Only add the records that are not existing in the main list, so we
*   do not add the records that already exist in the main list.
    loop at ex_to_add into ls_added.
      lp_tabix = sy-tabix.
      read table me-&gt;main_list with key trkorr     = ls_added-trkorr
                                        object     = ls_added-object
                                        obj_name   = ls_added-obj_name
                                        keyobject  = ls_added-keyobject
                                        keyobjname = ls_added-keyobjname
                                        tabkey     = ls_added-tabkey
                               transporting no fields.
      if sy-subrc = 0.
*       If the added transports are already in the list, but in prd, they
*       will be &apos;invisible&apos;, because the records with prd icon = co_okay
*       are filtered out. So, the prd icon needs to be changed to co_scrap
*       to become visible. We just make sure that all records for this
*       transport are made visible.
        loop at me-&gt;main_list into  me-&gt;main_list_line   &quot;#EC CI_NESTED
                              where trkorr     = ls_added-trkorr
                              and   object     = ls_added-object
                              and   obj_name   = ls_added-obj_name
                              and   keyobject  = ls_added-keyobject
                              and   keyobjname = ls_added-keyobjname
                              and   tabkey     = ls_added-tabkey
                              and   prd        = co_okay.
          me-&gt;main_list_line-prd = co_scrap.
          modify me-&gt;main_list from me-&gt;main_list_line index sy-tabix.
        endloop.
*       No need to add this transport again:
        delete ex_to_add index lp_tabix.
      endif.
    endloop.
    sort: ex_to_add.
    delete adjacent duplicates from ex_to_add.
  endmethod.                    &quot;get_added_objects

  method get_additional_tp_info.
    data: lt_tr_cofilines      type tr_cofilines.
    data: ls_tstrfcofil        type tstrfcofil.
    data: ta_stms_wbo_requests type table of stms_wbo_request.
    data: lp_retcode           type strw_int4.
    data: st_stms_wbo_requests type stms_wbo_request.
    data: st_systems           type ctslg_system.
    data: lp_counter           type i.
    data: lp_index             type sytabix.
    data: lp_indexinc          type sytabix.
    data: lp_trkorr            type trkorr.
    data: ls_main_backup       type ty_request_details.
    clear: lp_counter,
           me-&gt;total.
*   The CHECKED_BY field is always going to be filled. If it is empty,
*   then this subroutine has not yet been executed for the record, and has
*   to be executed. Additional info ONLY needs to be gathered once.
*   This needs to be checked because transports can be added. If that
*   happened, additional info only needs to be retrieved for the added
*   transports.
    loop at ch_table into me-&gt;main_list_line
                     where flag = abap_true.
      me-&gt;total = me-&gt;total + 1.
    endloop.
    loop at ch_table into me-&gt;main_list_line
                     where flag = abap_true.
*     Show the progress indicator
      if me-&gt;main_list_line-prd &lt;&gt; co_okay.
        lp_counter = lp_counter + 1.
        me-&gt;progress_indicator( exporting im_counter = lp_counter
                                          im_object  = me-&gt;main_list_line-obj_name
                                          im_total   = me-&gt;total
                                          im_text    = &apos;Object data retrieved...&apos;(010)
                                          im_flag    = abap_true ).
      endif.
      lp_index    = sy-tabix.
      lp_indexinc = lp_index + 1. &quot; To check next lines for same object
*     Only need to retrieve the additional info once, when a new transport
*     is encountered. This info is then copied to all the records (each
*     object) for the same request. So, only if the transport number is
*     different from the previous one.
      if lp_trkorr &lt;&gt; me-&gt;main_list_line-trkorr.
        lp_trkorr = me-&gt;main_list_line-trkorr.
        me-&gt;main_list_line-checked_by = sy-uname.
*       First get the descriptions (Status/Type/Project):
*       Retrieve texts for Status Description
        select ddtext
               from  dd07t
               into  me-&gt;main_list_line-status_text up to 1 rows
               where domname    = &apos;TRSTATUS&apos;
               and   ddlanguage = sy-langu
               and   domvalue_l = me-&gt;main_list_line-trstatus. &quot;#EC CI_SEL_NESTED
        endselect.
*       Retrieve texts for Description of request/task type
        select ddtext
               from  dd07t
               into  me-&gt;main_list_line-trfunction_txt up to 1 rows
               where domname    = &apos;TRFUNCTION&apos;
               and   ddlanguage = sy-langu
               and   domvalue_l = me-&gt;main_list_line-trfunction. &quot;#EC CI_SEL_NESTED
        endselect.
*       Retrieve the project number (and description):
        select reference
               from  e070a up to 1 rows
               into  me-&gt;main_list_line-project
               where trkorr    = me-&gt;main_list_line-trkorr
               and   attribute = &apos;SAP_CTS_PROJECT&apos;.  &quot;#EC CI_SEL_NESTED
          select descriptn
                 from  ctsproject up to 1 rows
                 into  me-&gt;main_list_line-project_descr &quot;#EC CI_SGLSELECT
                 where trkorr  = me-&gt;main_list_line-project. &quot;#EC CI_SEL_NESTED
          endselect.
        endselect.
*       Retrieve the description of the status
        select ddtext
               from  dd07t up to 1 rows
               into  me-&gt;main_list_line-trstatus
               where domname    = &apos;TRSTATUS&apos;
               and   ddlanguage = sy-langu
               and   domvalue_l = me-&gt;main_list_line-trstatus. &quot;#EC CI_SEL_NESTED
        endselect.
*       Check if transport has been released.
*       D - Modifiable
*       L - Modifiable, protected
*       A - Modifiable, protected
*       O - Release started
*       R - Released
*       N - Released (with import protection for repaired objects)
        refresh: ta_stms_wbo_requests.
        clear:   ta_stms_wbo_requests.
        read table tms_mgr_buffer into tms_mgr_buffer_line
                        with table key request          = me-&gt;main_list_line-trkorr
                                       target_system    = me-&gt;dev_system.
        if sy-subrc = 0.
          ta_stms_wbo_requests = tms_mgr_buffer_line-request_infos.
        else.
          call function &apos;TMS_MGR_READ_TRANSPORT_REQUEST&apos;
            exporting
              iv_request                 = me-&gt;main_list_line-trkorr
              iv_target_system           = me-&gt;dev_system
              iv_header_only             = &apos;X&apos;
              iv_monitor                 = &apos; &apos;
            importing
              et_request_infos           = ta_stms_wbo_requests
            exceptions
              read_config_failed         = 1
              table_of_requests_is_empty = 2
              system_not_available       = 3
              others                     = 4.
          if sy-subrc &lt;&gt; 0.
            message id sy-msgid type sy-msgty number sy-msgno
                    with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          else.
            tms_mgr_buffer_line-request       = me-&gt;main_list_line-trkorr.
            tms_mgr_buffer_line-target_system = me-&gt;dev_system.
            tms_mgr_buffer_line-request_infos = ta_stms_wbo_requests.
            insert tms_mgr_buffer_line into table tms_mgr_buffer.
          endif.
        endif.
        read table ta_stms_wbo_requests index 1
                                        into st_stms_wbo_requests.
*       Check if there is documentation available
        clear: me-&gt;main_list_line-info.
        if not st_stms_wbo_requests-docu[] is initial.
          me-&gt;check_documentation( exporting im_trkorr = me-&gt;main_list_line-trkorr
                                   changing  ch_table  = ch_table ).
        endif.
* Check the returncode of this transport to QAS
        call function &apos;STRF_READ_COFILE&apos;
          exporting
            iv_trkorr     = me-&gt;main_list_line-trkorr
          tables
            tt_cofi_lines = lt_tr_cofilines
          exceptions
            wrong_call    = 0
            no_info_found = 0
            others        = 0.
        read table lt_tr_cofilines into ls_tstrfcofil
                                   with key tarsystem = qas_system
                                            function  = &apos;G&apos;.
        me-&gt;main_list_line-retcode = ls_tstrfcofil-retcode.
        if st_stms_wbo_requests-e070-trstatus na &apos;NR&apos;.
          me-&gt;main_list_line-warning_lvl  = co_alert.
          me-&gt;main_list_line-warning_rank = co_alert1_rank.
          me-&gt;main_list_line-warning_txt  = lp_alert1_text.
        elseif st_stms_wbo_requests-e070-trstatus = &apos;O&apos;.
          me-&gt;main_list_line-warning_lvl  = co_alert.
          me-&gt;main_list_line-warning_rank = co_alert2_rank.
          me-&gt;main_list_line-warning_txt  = lp_alert2_text.
        else.
*         Retrieve the environments where the transport can be found.
*         Read the info of the request (transport log) to determine the
*         highest environment the transport has been moved to.
          call function &apos;TR_READ_GLOBAL_INFO_OF_REQUEST&apos;
            exporting
              iv_trkorr = me-&gt;main_list_line-trkorr
            importing
              es_cofile = st_request-cofile.

          if st_request-cofile-systems is initial.
*           Transport log does not exist: not released or log deleted
            me-&gt;main_list_line-warning_lvl  = co_alert.
            me-&gt;main_list_line-warning_rank = co_alert0_rank.
            me-&gt;main_list_line-warning_txt  = lp_alert0_text.
*           First check if the object can also be found further down in
*           the list. If it is, then THAT transport will be checked.
*           Because, even if this transport&apos;s log can&apos;t be read, if the
*           same object is found later in the list, that one will be
*           checked too. We don&apos;t have to worry about the fact that the
*           log does not exist for this transport.
            loop at ch_table into  me-&gt;line_found_in_list from lp_indexinc
                             where object     =  me-&gt;main_list_line-object
                             and   obj_name   =  me-&gt;main_list_line-obj_name
                             and   keyobject  =  me-&gt;main_list_line-keyobject
                             and   keyobjname =  me-&gt;main_list_line-keyobjname
                             and   tabkey     =  me-&gt;main_list_line-tabkey
                             and   prd        &lt;&gt; co_okay. &quot;#EC CI_NESTED
              exit.
            endloop.
            if sy-subrc = 0.
              me-&gt;main_list_line-warning_lvl  = co_hint.
              me-&gt;main_list_line-warning_rank = co_hint3_rank.
              me-&gt;main_list_line-warning_txt  = lp_hint3_text.
            endif.
          else.
*           Initialize environment fields. The environments will be
*           checked
*           and updated with the correct environment later
            me-&gt;main_list_line-dev = co_inact.
            me-&gt;main_list_line-qas = co_inact.
            me-&gt;main_list_line-prd = co_inact.
*           Now check in which environments the transport can be found
            loop at st_request-cofile-systems into st_systems. &quot;#EC CI_NESTED
*             For each environment, set the status icon:
              case st_systems-systemid.
                when me-&gt;dev_system.
                  me-&gt;main_list_line-dev = co_okay. &quot;Green - Exists
                when me-&gt;qas_system.
                  me-&gt;main_list_line-qas = co_okay. &quot;Green - Exists
*                 Get the latest date/time stamp
                  describe table st_systems-steps lines tp_lines.
                  read table st_systems-steps into st_steps
                                              index tp_lines.
                  check st_steps-stepid &lt;&gt; &apos;&lt;&apos;.

                  describe table st_steps-actions lines tp_lines.
                  read table st_steps-actions into st_actions
                                              index tp_lines.
                  move st_actions-time to me-&gt;main_list_line-as4time.
                  move st_actions-date to me-&gt;main_list_line-as4date.
                when me-&gt;prd_system.
                  describe table st_systems-steps lines tp_lines.
                  read table st_systems-steps into st_steps
                                              index tp_lines.
                  check st_steps-stepid &lt;&gt; &apos;&lt;&apos;.
                  me-&gt;main_list_line-prd = co_okay. &quot;Green - Exists
                when others.
              endcase.
            endloop.
          endif.
        endif.
*       Update the main table from the workarea.
        modify ch_table from me-&gt;main_list_line
                        index lp_index
                        transporting checked_by
                                     status_text
                                     trfunction_txt
                                     trstatus
                                     tr_descr
                                     retcode
                                     info
                                     warning_lvl
                                     warning_txt
                                     dev
                                     qas
                                     prd
                                     as4time
                                     as4date
                                     project
                                     project_descr.
*       Keep the workarea for the other objects within the same transport.
*       No need to select the same data for each objetc because it is the
*       same for all the transport objects (data retrieved on transport
*       level).
        ls_main_backup = me-&gt;main_list_line.
        continue.
      else.
*       Update the main table from the workarea.
        modify ch_table from ls_main_backup
                        index lp_index
                        transporting checked_by
                                     status_text
                                     trfunction_txt
                                     trstatus
                                     tr_descr
                                     retcode
                                     info
                                     warning_lvl
                                     warning_txt
                                     dev
                                     qas
                                     prd
                                     as4time
                                     as4date
                                     project
                                     project_descr.
        continue.
      endif.
    endloop.
  endmethod.                    &quot;get_additional_tp_info

  method add_to_list.
*   Add the records:
    append lines of im_to_add to ex_main.
*   Re-sort the list:
    me-&gt;sort_main_list( ).
  endmethod.                    &quot;add_to_list

  method build_conflict_popup.
    data: lr_events          type ref to cl_salv_events_table.
    data: ls_conflict        type ty_request_details.
    data: lp_xend            type i.
    data: lp_yend            type i.
    data: lp_xstart          type i value 50.
    data: lp_ystart          type i value 7.
*   Prevent the conflicts popup to be build multiple times
    check rf_conflicts is initial.
*   Because we are going to only display the popup, the main list
*   does not need to be checked. So we set a flag. This makes sure
*   that all conflicting transports are added to the conflict list
*   and the main list is NOT checked again.
    me-&gt;set_building_conflict_popup(  ).
    me-&gt;flag_for_process( exporting rows = rows
                                    cell = cell ).
    me-&gt;check_for_conflicts( changing ch_main_list = me-&gt;main_list ).
*   If the button to add conflicts is clicked (not a double-click), then
*   remove from the popup all low-level warning messages
    if sy-ucomm = &apos;&amp;ADD&apos;.
      loop at me-&gt;conflicts into ls_conflict
                            where warning_rank &lt; co_info_rank.
        delete me-&gt;conflicts index sy-tabix.
      endloop.
    endif.
*   Check if there are entries in the conflicts. If not, display a
*   message
    if me-&gt;conflicts is initial.
      message i000(db)
         with &apos;No transports need to be added&apos;(019)
              &apos;To see the conflicts, doubleclick the warning&apos;(020).
      exit.
    endif.
    try.
        call method cl_salv_table=&gt;factory
          importing
            r_salv_table = rf_conflicts
          changing
            t_table      = me-&gt;conflicts.
*       Set ALV properties
        me-&gt;set_properties_conflicts( exporting im_table = me-&gt;conflicts
                                      importing ex_xend  = lp_xend ).
*       Set Tooltips
        me-&gt;alv_set_tooltips( exporting im_table = rf_conflicts ).
*       Register handler for actions
        lr_events = rf_conflicts-&gt;get_event( ).
        set handler lcl_eventhandler_ztct=&gt;on_function_click for lr_events.
*       Save reference to access object from handler
        lcl_eventhandler_ztct=&gt;rf_conflicts = rf_conflicts.
*       Use gui-status ST850 from program SAPLKKB
        rf_conflicts-&gt;set_screen_status( pfstatus      = &apos;ST850&apos;
                                         report        = &apos;SAPLKKBL&apos; ).
*       Determine the size of the popup window:
        lp_xend = lp_xend + lp_xstart + 5.
        describe table me-&gt;conflicts lines lp_yend.
        if lp_yend &lt; 5.
          lp_yend = 5.
        endif.
        lp_yend = lp_yend + lp_ystart + 1.
*       Display as popup
        rf_conflicts-&gt;set_screen_popup( start_column = lp_xstart
                                        end_column   = lp_xend
                                        start_line   = lp_ystart
                                        end_line     = lp_yend ).
        rf_conflicts-&gt;display( ).
      catch cx_salv_msg into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.
    free rf_conflicts.
    me-&gt;set_building_conflict_popup( abap_false ).
  endmethod.                    &quot;build_conflict_popup

  method delete_tp_from_list.
    data: ra_trkorr type range of trkorr.
    data: ls_trkorr like line  of ra_trkorr.
    data: ls_row type int4.
*   If row(s) are selected, use the table
* Add transports to range
    ls_trkorr-sign   = &apos;I&apos;.
    ls_trkorr-option = &apos;EQ&apos;.
    loop at rows into ls_row.
      read table me-&gt;main_list into  me-&gt;main_list_line
                               index ls_row.
      ls_trkorr-low = me-&gt;main_list_line-trkorr.
      append ls_trkorr to ra_trkorr.
    endloop.
    sort ra_trkorr.
    delete adjacent duplicates from ra_trkorr.
    delete me-&gt;main_list where trkorr in ra_trkorr.
  endmethod.                    &quot;delete_tp_from_list

  method flag_same_objects.
    data: lt_main_list_copy type tt_request_details.
*   Only relevant if there is a check to be done
    check me-&gt;check_flag = abap_true.
*   Set check flag for all transports that are going to be refreshed
*   because all of these need to be checked again.
    lt_main_list_copy[] = ex_main_list[].
    loop at ex_main_list into me-&gt;main_list_line
                         where flag = abap_true.
*     Also flag all the objects already existing in the main table
*     that are in the added list: They need to be checked again.
      loop at lt_main_list_copy[] into  me-&gt;main_list_line
                                  where object     = me-&gt;main_list_line-object
                                  and   obj_name   = me-&gt;main_list_line-obj_name
                                  and   keyobject  = me-&gt;main_list_line-keyobject
                                  and   keyobjname = me-&gt;main_list_line-keyobjname
                                  and   tabkey     = me-&gt;main_list_line-tabkey
                                  and   flag = abap_false. &quot;#EC CI_NESTED
        me-&gt;main_list_line-flag = abap_true.
        modify lt_main_list_copy from  me-&gt;main_list_line
                                 index sy-tabix
                                 transporting flag.
      endloop.
    endloop.
    ex_main_list[] = lt_main_list_copy[].
    free lt_main_list_copy.
  endmethod.                    &quot;flag_same_objects

  method mark_all_tp_records.
    data: ra_trkorr type range of trkorr.
    data: ls_trkorr like line  of ra_trkorr.
    data: ls_row    type int4.
* Add transports to range
    ls_trkorr-sign   = &apos;I&apos;.
    ls_trkorr-option = &apos;EQ&apos;.
* If row(s) are selected, use the table
    loop at im_rows into ls_row.
      read table me-&gt;main_list into  me-&gt;main_list_line
                               index ls_row.
      ls_trkorr-low = me-&gt;main_list_line-trkorr.
      append ls_trkorr to ra_trkorr.
    endloop.
* If no rows were selected, take the current cell instead
    if sy-subrc &lt;&gt; 0.
      read table me-&gt;main_list into  me-&gt;main_list_line
                               index im_cell-row.
      ls_trkorr-low = me-&gt;main_list_line-trkorr.
      append ls_trkorr to ra_trkorr.
    endif.
    check ra_trkorr is not initial.
    sort ra_trkorr.
    delete adjacent duplicates from ra_trkorr.
* Mark all records for all marked transports
    loop at me-&gt;main_list into me-&gt;main_list_line
                          where trkorr in ra_trkorr.
      append sy-tabix to im_rows.
    endloop.
    sort im_rows.
    delete adjacent duplicates from im_rows.
  endmethod.                    &quot;mark_all_tp_records

  method clear_flags.
    loop at me-&gt;main_list into  me-&gt;main_list_line
                          where flag = abap_true.
      clear: me-&gt;main_list_line-flag.
      modify me-&gt;main_list from me-&gt;main_list_line
                           transporting flag.
    endloop.
  endmethod.                    &quot;clear_flags

  method get_filename.
    data: lp_window_title type string,
          lp_rc           type i,
          lp_desktop      type string,
          lt_filetable    type filetable.
* Finding desktop
    call method cl_gui_frontend_services=&gt;get_desktop_directory
      changing
        desktop_directory    = lp_desktop
      exceptions
        cntl_error           = 1
        error_no_gui         = 2
        not_supported_by_gui = 3
        others               = 4.
    if sy-subrc &lt;&gt; 0.
      message e001(00) with
          &apos;Desktop not found&apos;(012).
    endif.
* Update View
    call method cl_gui_cfw=&gt;update_view
      exceptions
        cntl_system_error = 1
        cntl_error        = 2
        others            = 3.
    lp_window_title = &apos;Select a transportlist&apos;(013).
    call method cl_gui_frontend_services=&gt;file_open_dialog
      exporting
        window_title            = lp_window_title
        default_extension       = &apos;TXT&apos;
        default_filename        = &apos;ZTCT_FILE&apos;
        file_filter             = &apos;.TXT&apos;
        initial_directory       = lp_desktop
      changing
        file_table              = lt_filetable
        rc                      = lp_rc
      exceptions
        file_open_dialog_failed = 1
        cntl_error              = 2
        error_no_gui            = 3
        not_supported_by_gui    = 4
        others                  = 5.
    if sy-subrc &lt;&gt; 0.
      message id sy-msgid type sy-msgty number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.
    read table lt_filetable index 1 into ex_file.
  endmethod.                    &quot;get_filename

  method main_to_tab_delimited.
    data: lp_string             type string.
    data: lp_type               type char01.
    data: lp_com                type i.
    field-symbols: &lt;l_fs&gt;       type any.

*   Determine the number of fields in the structure
    data: lr_tabledescr         type ref to cl_abap_tabledescr,
          lr_typedescr          type ref to cl_abap_typedescr,
          lr_structdescr        type ref to cl_abap_structdescr,
          lt_abap_component_tab type abap_component_tab,
          ls_abap_component     type abap_componentdescr.

    try.
        lr_typedescr = cl_abap_tabledescr=&gt;describe_by_data( p_data = me-&gt;main_list ).
        lr_tabledescr ?= lr_typedescr.
        lr_structdescr ?= lr_tabledescr-&gt;get_table_line_type( ).
      catch cx_sy_move_cast_error into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
      catch cx_root into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.

* Build header line
    refresh: ex_tab_delimited.
    lt_abap_component_tab = lr_structdescr-&gt;get_components( ).
    loop at lt_abap_component_tab into ls_abap_component.
      concatenate lp_string tp_tab ls_abap_component-name into lp_string.
    endloop.
    shift lp_string left deleting leading tp_tab.
    append lp_string to ex_tab_delimited.
*   Now modify the lines of the main list to a tab delimited list
    loop at im_main_list into me-&gt;main_list_line.
      clear: lp_string.
      do.
        assign component sy-index of structure me-&gt;main_list_line to &lt;l_fs&gt;.
        if sy-subrc &lt;&gt; 0.
          exit.
        else.
          if sy-index = 1.
            lp_string = &lt;l_fs&gt;.
          else.
            describe field &lt;l_fs&gt; type lp_type components lp_com.
            if lp_type na co_non_charlike.
              concatenate lp_string tp_tab &lt;l_fs&gt; into lp_string.
            endif.
          endif.
        endif.
      enddo.
      append lp_string to ex_tab_delimited.
    endloop.
  endmethod.                    &quot;main_to_tab_delimited

  method display_transport.
    call function &apos;TMS_UI_SHOW_TRANSPORT_REQUEST&apos;
      exporting
        iv_request                    = im_trkorr
      exceptions
        show_transport_request_failed = 1
        others                        = 2.
    if sy-subrc &lt;&gt; 0.
      message id sy-msgid type sy-msgty number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.
    leave screen.
  endmethod.                    &quot;display_transport

  method display_user.
    data: lp_return   type bapiret2.
    call function &apos;BAPI_USER_DISPLAY&apos;
      exporting
        username = im_user
      importing
        return   = lp_return.
    if lp_return-type ca &apos;EA&apos;.
      call function &apos;SUSR_SHOW_USER_DETAILS&apos;
        exporting
          bname = im_user.
    endif.
  endmethod.                    &quot;display_user

  method display_docu.
    data: lp_dokl_object type doku_obj.
    move: im_trkorr  to lp_dokl_object.
    me-&gt;docu_call( exporting im_object = lp_dokl_object ).
    me-&gt;check_documentation( exporting im_trkorr = im_trkorr
                             changing  ch_table  = me-&gt;main_list ).
  endmethod.                    &quot;display_docu

  method refresh_alv.
*   Declaration for Top of List settings
    data: lr_form_element type ref to cl_salv_form_element.

    me-&gt;top_of_page( importing ex_form_element = lr_form_element ).
    rf_table-&gt;set_top_of_list( lr_form_element ).
    me-&gt;set_color( ).
    me-&gt;alv_set_tooltips( exporting im_table = rf_table ).
    rf_table-&gt;refresh( ).
  endmethod.                    &quot;refresh_alv

  method tab_delimited_to_main.
    types: begin of lty_upl_line,
             field type fieldname,
             value type string,
           end of lty_upl_line.
    data: lt_upl_line       type table of lty_upl_line.
    data: ls_upl_line       type lty_upl_line.
    data: lt_main_upl       type tt_request_details.
    data: ls_main_line_upl  type ty_request_details.
    data: lp_record         type string.
    data: ls_main           type ty_request_details.
    data: lp_type           type char01.
    data: lp_com            type i.
    field-symbols: &lt;l_fs&gt;   type any.
*   Determine the number of fields in the structure
    data: l_o_tabledescr         type ref to cl_abap_tabledescr.
    data: l_o_typedescr          type ref to cl_abap_typedescr.
    data: l_o_structdescr        type ref to cl_abap_structdescr.
    data: l_s_abap_compdescr_tab type abap_compdescr.
    data: ls_component           type abap_compdescr.
    try.
        l_o_typedescr = cl_abap_tabledescr=&gt;describe_by_data( p_data = me-&gt;main_list ).
        l_o_tabledescr ?= l_o_typedescr.
        l_o_structdescr ?= l_o_tabledescr-&gt;get_table_line_type( ).
      catch cx_sy_move_cast_error into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
      catch cx_root into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.
*   First line contains the name of the fields
*   Now modify the lines of the main list to a tab delimited list
    read table im_tab_delimited index 1
                                into  lp_record.
*   Build list of fields, in order of uploaded file
    do.
      split lp_record at tp_tab into ls_upl_line-field lp_record.
      if lp_record is initial.
        exit.
      endif.
      append ls_upl_line to lt_upl_line.
    enddo.
    loop at im_tab_delimited from 2                &quot;Skip the header line
                             into lp_record.
      clear: ls_upl_line.
*     First put all values for this record in the value table
*     Build list of fields, in order of uploaded file
      do.
*       Get the corresponding line from the table containing
*       the fields and values (to be updated with the value)
        read table lt_upl_line index sy-index
                               into  ls_upl_line.
        split lp_record at tp_tab into ls_upl_line-value lp_record.
        if lp_record is initial.
          exit.
        else.
          modify lt_upl_line from  ls_upl_line
                             index sy-tabix
                             transporting value.
        endif.
      enddo.
*     Map the fields from the uploaded line to the correct component
*     of the main list
      do.
*       Get corresponding fieldname for file column
        read table lt_upl_line into  ls_upl_line
                               index sy-index.
        if sy-subrc &lt;&gt; 0.
          exit.
        endif.
*       Get information about where the column is in the structure
*       Get the lenght and position from the structure definition:
        read table l_o_structdescr-&gt;components
                   into ls_component
                   with key name = ls_upl_line-field.
        if sy-subrc = 0.
          try.
              assign component ls_component-name of structure ls_main_line_upl to &lt;l_fs&gt;.
            catch cx_root into rf_root.
          endtry.
          if sy-subrc &lt;&gt; 0.
            exit.
          else.
            describe field &lt;l_fs&gt; type lp_type components lp_com.
            if lp_type na co_non_charlike.
              try .
                  &lt;l_fs&gt; = ls_upl_line-value.
                catch cx_root into rf_root.
              endtry.
            endif.
          endif.
        endif.
      enddo.
      append ls_main_line_upl to lt_main_upl.
      clear: ls_main_line_upl.
    endloop.

*   Now move the lines of the uploaded list to the main list and
*   if another file is added to the main list (&amp;ADD_FILE), then
*   Automatically RE-Check the objects in the existing main list
    describe table lt_main_upl lines me-&gt;total.

    loop at lt_main_upl into ls_main.
      me-&gt;progress_indicator( exporting im_counter = sy-tabix
                                        im_object  = &apos;&apos;
                                        im_total   = me-&gt;total
                                        im_text    = &apos;records read and added.&apos;(022)
                                        im_flag    = abap_true ).
*     Check if the record is already in the main list:
      read table main_list with key trkorr     = ls_main-trkorr
                                    object     = ls_main-object
                                    obj_name   = ls_main-obj_name
                                    keyobject  = ls_main-keyobject
                                    keyobjname = ls_main-keyobjname
                                    tabkey     = ls_main-tabkey
                           transporting no fields.
      if sy-subrc &lt;&gt; 0.
*       If a file is uploaded to be merged (&amp;ADD_FILE), then we need to
*       check all the records that are going to be added to the main list,
*       as well as all the records in the main list that contain an object
*       also in the loaded list:
        if sy-ucomm  = &apos;&amp;ADD_FILE&apos;.
          ls_main-flag = abap_true.
          loop at main_list into  me-&gt;main_list_line
                            where object     = ls_main-object
                            and   obj_name   = ls_main-obj_name
                            and   keyobject  = ls_main-keyobject
                            and   keyobjname = ls_main-keyobjname
                            and   tabkey     = ls_main-tabkey. &quot;#EC CI_NESTED
            me-&gt;main_list_line-flag = abap_true.
            modify main_list from me-&gt;main_list_line.
          endloop.
        endif.
        append ls_main to main_list.
      else.
        check 1 = 1.
      endif.
    endloop.
    me-&gt;sort_main_list( ).
  endmethod.                    &quot;tab_delimited_to_main

  method gui_upload.
    data: lt_tab_delimited type table_of_strings.
    data: lt_temp_table    type table_of_strings.
    call method cl_gui_frontend_services=&gt;gui_upload
      exporting
        filename                = im_filename
        filetype                = &apos;ASC&apos;
      changing
        data_tab                = lt_temp_table
      exceptions
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        not_supported_by_gui    = 17
        error_no_gui            = 18
        others                  = 19.
    if sy-subrc &lt;&gt; 0.
      ex_cancelled = abap_true.
      case sy-subrc.
        when 1.
          if im_filename is initial.
            message i000(db) with &apos;Cancelled by user&apos;(031).
          else.
            message e000(db) with &apos;Error occurred&apos;(029).
          endif.
        when others.
          message e000(db) with &apos;Error occurred&apos;(029).
      endcase.
    else.
      lt_tab_delimited[] = lt_temp_table[].
*     Now convert the tab delimited file to the main list field order:
      me-&gt;tab_delimited_to_main( exporting im_tab_delimited = lt_tab_delimited
                                 importing ex_main_list     = me-&gt;main_list ).
      describe table me-&gt;main_list lines me-&gt;total.
*     Always reset the Check flag when uploading.
      me-&gt;clear_flags( ).
      loop at me-&gt;main_list into me-&gt;main_list_line.
        me-&gt;progress_indicator( exporting im_counter = sy-tabix
                                          im_object  = me-&gt;main_list_line-obj_name
                                          im_total   = me-&gt;total
                                          im_text    = &apos;records checked (documentation)&apos;(023)
                                          im_flag    = abap_true ).
        me-&gt;check_documentation( exporting im_trkorr = me-&gt;main_list_line-trkorr
                                 changing  ch_table  = me-&gt;main_list ).
      endloop.
    endif.
*   A simple check on the internal table. If a warning is found, then
*   we assume that the check parameter needs to be switched ON.
    loop at me-&gt;main_list into me-&gt;main_list_line
                          where not warning_lvl is initial.
      me-&gt;set_check_flag( ).
      exit.
    endloop.
*   Check if the Checked icon needs to be cleared:
    if me-&gt;clear_checked = abap_true.
      loop at me-&gt;main_list into  me-&gt;main_list_line
                            where checked = co_checked.
        clear: me-&gt;main_list_line-checked.
        modify me-&gt;main_list from  me-&gt;main_list_line
                             index sy-tabix.
      endloop.
    endif.
  endmethod.                    &quot;gui_upload

  method check_if_in_list.
    data: lp_tabix   type i.
    clear: ex_line.
* This subroutine checks if the conflicting transport/object is found
* further down in the list (in a later transport):
    lp_tabix = im_tabix + 1.
    loop at me-&gt;main_list into  ex_line from lp_tabix
                          where trkorr     =  im_line-trkorr
                          and   object     =  im_line-object
                          and   obj_name   =  im_line-obj_name
                          and   keyobject  =  im_line-keyobject
                          and   keyobjname =  im_line-keyobjname
                          and   tabkey     =  im_line-tabkey
                          and   prd        &lt;&gt; co_okay.
      exit.
    endloop.
  endmethod.                    &quot;check_if_in_list

  method check_if_same_object.
*   Although there is already a warning (older transport not moved or
*   newer transport was moved), it must be the exact same object. If it&apos;s
*   an entry in a table, it should not be checked if the table was
*   changed, but if it&apos;s the same entry that was changed... This perform
*   check the key entries.
    data:  ls_e071k type e071k.
    clear: ex_tabkey,
           ex_return.
*   The check on object (if the same) can either be done on key level (for
*   tables) or just on object level... Depends on the OBJFUNC field.

    case im_line-objfunc.
      when &apos;K&apos;. &quot;Key fields available
        select * from e071k
                 into ls_e071k up to 1 rows
                 where trkorr = im_newer_older-trkorr
                 and   tabkey = im_line-tabkey.
        endselect.
*       Now check if in both transports, an object exists with the
*       same key:
        if ls_e071k is initial.
*         No key found. Treat as if it&apos;s the same object...
          if im_newer_older-object   = im_line-object and
             im_newer_older-obj_name = im_line-obj_name.
            ex_return = abap_true.
          endif.
        else.
*         There are records to be compared, only if the record is for the
*         same key, accept the warning as true (return = &apos;X&apos;).
          ex_return = abap_true.
          concatenate ls_e071k-tabkey &apos; (&apos;
                      ls_e071k-objname &apos;)&apos;
                      into ex_tabkey.
        endif.
      when others.
        if im_newer_older-object   = im_line-object and
           im_newer_older-obj_name = im_line-obj_name.
          ex_return = abap_true.
        endif.
    endcase.
  endmethod.                    &quot;check_if_same_object

  method check_documentation.
    data: ls_doktl  type doktl.      &quot;Documentation - text lines
    move: im_trkorr to tp_dokl_object.
    select * from  doktl
             up to 1 rows
             into  ls_doktl
             where id        =  &apos;TA&apos;
             and   object    =  tp_dokl_object
             and   typ       =  &apos;T&apos;
             and   dokformat &lt;&gt; &apos;L&apos;
             and   doktext   &lt;&gt; &apos;&apos;.
    endselect.
    if ls_doktl is not initial.
*     There is documentation: Display Doc Icon
      me-&gt;main_list_line-info = co_docu.
    else.
*     There is no documentation: Remove Doc Icon
      clear me-&gt;main_list_line-info.
    endif.
    modify ch_table from me-&gt;main_list_line
                    transporting info
                    where trkorr = im_trkorr.
  endmethod.                    &quot;check_documentation

  method alv_init.
    clear: rf_table.
    try.
        call method cl_salv_table=&gt;factory
          exporting
            list_display = if_salv_c_bool_sap=&gt;false
          importing
            r_salv_table = rf_table
          changing
            t_table      = me-&gt;main_list.
      catch cx_salv_msg into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.
    if rf_table is initial.
      message &apos;Error Creating ALV Grid&apos;(t03) type &apos;A&apos; display like &apos;E&apos;.
    endif.
  endmethod.                    &quot;alv_init

  method alv_xls_init.
    try.
        call method cl_salv_table=&gt;factory
          exporting
            list_display = if_salv_c_bool_sap=&gt;false
          importing
            r_salv_table = ex_rf_table
          changing
            t_table      = ch_table.
      catch cx_salv_msg into rf_root.
        me-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.
    if rf_table_xls is initial.
      message &apos;Error Creating ALV Grid&apos;(t03) type &apos;A&apos; display like &apos;E&apos;.
    endif.
  endmethod.                    &quot;alv_init

  method set_color.
*   Color Structure of columns
    data: ta_scol                     type lvc_t_scol.
    data: st_scol                     type lvc_s_scol.
    field-symbols: &lt;fs_main&gt; type ty_request_details.
    loop at me-&gt;main_list assigning &lt;fs_main&gt;.
*     Init
      refresh: ta_scol.
      clear  : st_scol.
      move ta_scol to &lt;fs_main&gt;-t_color.
*     Add color
      if &lt;fs_main&gt;-warning_rank &gt;= co_info_rank.
        refresh: ta_scol.
        clear  : st_scol.
        move 3             to st_scol-color-col.
        move 0             to st_scol-color-int.
        move 0             to st_scol-color-inv.
        move &apos;WARNING_TXT&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move &apos;WARNING_LVL&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move ta_scol       to &lt;fs_main&gt;-t_color.
      endif.
      if &lt;fs_main&gt;-warning_rank &gt;= co_warn_rank.
        refresh: ta_scol.
        clear  : st_scol.
        move 7             to st_scol-color-col.
        move 0             to st_scol-color-int.
        move 0             to st_scol-color-inv.
        move &apos;WARNING_TXT&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move &apos;WARNING_LVL&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move ta_scol       to &lt;fs_main&gt;-t_color.
      endif.
      if &lt;fs_main&gt;-warning_rank &gt;= co_error_rank.
        refresh: ta_scol.
        clear  : st_scol.
        move 6             to st_scol-color-col.
        move 0             to st_scol-color-int.
        move 0             to st_scol-color-inv.
        move &apos;WARNING_TXT&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move &apos;WARNING_LVL&apos; to st_scol-fname.
        append st_scol     to ta_scol.
        move ta_scol       to &lt;fs_main&gt;-t_color.
      endif.
    endloop.
  endmethod.                    &quot;set_color

  method set_check_flag.
    if im_check_flag is supplied.
      me-&gt;check_flag = im_check_flag.
    else.
      me-&gt;check_flag = abap_true.
    endif.
  endmethod.                    &quot;set_check_flag

  method set_check_ddic.
    if im_check_ddic is supplied.
      me-&gt;check_ddic = im_check_ddic.
    else.
      me-&gt;check_ddic = abap_true.
    endif.
  endmethod.                    &quot;set_ddic_check

  method set_check_tabkeys.
    if im_check_tabkeys is supplied.
      me-&gt;check_tabkeys = im_check_tabkeys.
    else.
      me-&gt;check_tabkeys = abap_true.
    endif.
  endmethod.                    &quot;set_check_tabkeys

  method set_clear_checked.
    if im_clear_checked is supplied.
      me-&gt;clear_checked = im_clear_checked.
    else.
      me-&gt;clear_checked = abap_true.
    endif.
  endmethod.                    &quot;set_clear_checked

  method set_skip_buffer_chk.
    if im_skip_buffer_chk is supplied.
      me-&gt;skip_buffer_chk = im_skip_buffer_chk.
    else.
      me-&gt;skip_buffer_chk = abap_true.
    endif.
  endmethod.                    &quot;set_skip_buffer_chk

  method set_trkorr_range.
    me-&gt;trkorr_range = im_trkorr_range.
  endmethod.                    &quot;set_trkorr_range

  method set_project_range.
    me-&gt;project_range = im_project_range.
  endmethod.                    &quot;set_trkorr_range

  method set_date_range.
    me-&gt;date_range = im_date_range.
  endmethod.                    &quot;set_trkorr_range

  method set_excluded_objects.
    me-&gt;excluded_objects = im_excluded_objects.
  endmethod.                    &quot;set_trkorr_range

  method set_search_string.
    me-&gt;search_string = im_search_string.
  endmethod.                    &quot;set_search_string

  method set_user_layout.
    me-&gt;user_layout = im_user_layout.
  endmethod.                    &quot;set_user_layout

  method set_process_type.
    me-&gt;process_type = im_process_type.
  endmethod.                    &quot;set_process_type

  method  set_skiplive.
    if im_skiplive is supplied.
      me-&gt;skiplive = im_skiplive.
    else.
      me-&gt;skiplive = abap_true.
    endif.
  endmethod.                    &quot;set_skiplive

  method set_filename.
    me-&gt;filename = im_filename.
  endmethod.                    &quot;set_filename

  method set_systems.
    me-&gt;dev_system = im_dev_system.
    me-&gt;qas_system = im_qas_system.
    me-&gt;prd_system = im_prd_system.
  endmethod.                    &quot;set_systems

  method set_building_conflict_popup.
    if im_building_conflict_popup is supplied.
      me-&gt;building_conflict_popup = im_building_conflict_popup.
    else.
      me-&gt;building_conflict_popup = abap_true.
    endif.
  endmethod.                    &quot;set_building_conflict_popup

  method alv_set_properties.
*   Declaration for ALV Columns
    data: lr_columns_table       type ref to cl_salv_columns_table.
    data: lt_t_column_ref        type salv_t_column_ref.
    data: lr_functions_list      type ref to cl_salv_functions_list.
*   Declaration for Top of List settings
    data: lr_form_element        type ref to cl_salv_form_element.
*   Declaration for Layout Settings
    data: lr_layout              type ref to cl_salv_layout.
    data: ls_layout_key          type salv_s_layout_key.
*   Declaration for Aggregate Function Settings
    data: lr_aggregations        type ref to cl_salv_aggregations.
*   Declaration for Sort Function Settings
    data: lr_sorts               type ref to cl_salv_sorts.
*   Declaration for Table Selection settings
    data: lr_selections          type ref to cl_salv_selections.
*   Declaration for Global Display Settings
    data: lr_display_settings    type ref to cl_salv_display_settings.
    data: lp_version             type char10.
    data: lp_title               type lvc_title.
    data: lp_class               type xuclass.

    field-symbols: &lt;table&gt;       type ref to cl_salv_table.
    assign im_table to &lt;table&gt;.

*   Set status
*   Copy the status from program SAPLSLVC_FULLSCREEN and delete the
*   buttons you do not need. Add extra buttons for use in USER_COMMAND
    &lt;table&gt;-&gt;set_screen_status( pfstatus = &apos;STANDARD_FULLSCREEN&apos;
                                report   = sy-repid ).
*   Get functions details
    lr_functions_list = &lt;table&gt;-&gt;get_functions( ).
*   Activate All Buttons in Tool Bar
    lr_functions_list-&gt;set_all( if_salv_c_bool_sap=&gt;true ).
*   If necessary, deactivate functions
    if check_flag = abap_false.
      try.
          lr_functions_list-&gt;set_function( name    = &apos;RECHECK&apos;
                                           boolean = if_salv_c_bool_sap=&gt;false ).
        catch cx_root into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
    endif.
*   Layout Settings
    clear: lr_layout.
    clear: ls_layout_key.
*   Set Report ID as Layout Key
    move sy-repid to ls_layout_key-report.
*   Get Layout of Table
    lr_layout = &lt;table&gt;-&gt;get_layout( ).
*   To allow DEFAULT layout
    lr_layout-&gt;set_default( if_salv_c_bool_sap=&gt;true ).
*   Set Report Id to Layout
    lr_layout-&gt;set_key( ls_layout_key ).
*   If the user is part of a specific class, then the user can
*   maintain all layouts. Otherwise only the user specific layout.
    select single class from  usr02
                        into  lp_class
                        where bname = sy-uname.
*   Changed to specific users...
    if lp_class = &apos;SB&apos;.
      lp_save_restriction = if_salv_c_layout=&gt;restrict_none.
    else.
      lp_save_restriction = if_salv_c_layout=&gt;restrict_user_dependant.
    endif.
*   If the flag is set the default layout will be the default user
*   specific layout
    if me-&gt;user_layout = abap_false.
      lr_layout-&gt;set_initial_layout( &apos;/DEFAULT&apos; ).
    endif.

    lr_layout-&gt;set_save_restriction( lp_save_restriction ).
*   Global Display Settings
    clear: lr_display_settings.
*   Build title:
*   Get version to display in title:
    select datum from  vrsd
                 into  vrsd-datum up to 1 rows
                 where objtype = &apos;REPS&apos;
                 and   objname = sy-repid.
      write vrsd-datum to lp_version.
    endselect.
    if lp_version is not initial.
      select single text from  d347t into lp_title
                         where progname = sy-repid
                         and   sprsl    = sy-langu
                         and   obj_code = &apos;001&apos;.
      if sy-subrc &lt;&gt; 0.
        select single text from  d347t into lp_title
                           where progname = sy-repid
                           and   sprsl    = &apos;EN&apos;
                           and   obj_code = &apos;001&apos;.
      endif.
    endif.
*   Set title
    if lp_title is initial.
      lp_title = sy-title.
    else.
      replace &apos;&amp;1&apos; with lp_version into lp_title.
    endif.
*   Global display settings
    lr_display_settings = &lt;table&gt;-&gt;get_display_settings( ).
*   Activate Striped Pattern
    lr_display_settings-&gt;set_striped_pattern( if_salv_c_bool_sap=&gt;true ).
*   Report header
    lr_display_settings-&gt;set_list_header( lp_title ).
*   Aggregate Function Settings
    lr_aggregations = &lt;table&gt;-&gt;get_aggregations( ).
*   Sort Functions
    lr_sorts = &lt;table&gt;-&gt;get_sorts( ).
    if lr_sorts is not initial.
      try.
          lr_sorts-&gt;add_sort( columnname = &apos;AS4DATE&apos;
                              position = 1
                              sequence   = if_salv_c_sort=&gt;sort_up
                              subtotal   = if_salv_c_bool_sap=&gt;false
                              obligatory = if_salv_c_bool_sap=&gt;false ).
        catch cx_salv_not_found into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_existing into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
      try.
          lr_sorts-&gt;add_sort( columnname = &apos;AS4TIME&apos;
                              position = 2
                              sequence   = if_salv_c_sort=&gt;sort_up
                              subtotal   = if_salv_c_bool_sap=&gt;false
                              group      = if_salv_c_sort=&gt;group_none
                              obligatory = if_salv_c_bool_sap=&gt;false ).
        catch cx_salv_not_found into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_existing into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
    endif.
*   Table Selection Settings
    lr_selections = &lt;table&gt;-&gt;get_selections( ).
    if lr_selections is not initial.
*   Allow row Selection
      lr_selections-&gt;set_selection_mode(
                     if_salv_c_selection_mode=&gt;row_column ).
    endif.
*   Event Register settings
    rf_events_table = &lt;table&gt;-&gt;get_event( ).
    create object rf_handle_events.
    set handler rf_handle_events-&gt;on_function_click for rf_events_table.
    set handler rf_handle_events-&gt;on_double_click   for rf_events_table.
    set handler rf_handle_events-&gt;on_link_click     for rf_events_table.
*   Get the columns from ALV Table
    lr_columns_table = &lt;table&gt;-&gt;get_columns( ).
    if lr_columns_table is not initial.
      refresh : lt_t_column_ref.
      lt_t_column_ref = lr_columns_table-&gt;get( ).
*     Get columns properties
      lr_columns_table-&gt;set_optimize( if_salv_c_bool_sap=&gt;true ).
      lr_columns_table-&gt;set_key_fixation( if_salv_c_bool_sap=&gt;true ).
      try.
          lr_columns_table-&gt;set_color_column( &apos;T_COLOR&apos; ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
*     Individual Column Properties.
      me-&gt;column_settings( exporting im_column_ref         = lt_t_column_ref
                                     im_rf_columns_table   = lr_columns_table
                                     im_table              = &lt;table&gt; ).
    endif.
*   Skip the following code for the conflicts popups
    if &lt;table&gt; &lt;&gt; rf_conflicts.
*     Top of List settings
      me-&gt;top_of_page( importing ex_form_element = lr_form_element ).
      &lt;table&gt;-&gt;set_top_of_list( lr_form_element ).
    endif.
  endmethod.                    &quot;alv_set_properties

  method alv_set_tooltips.
*   Fill the symbols, colors in to table and set tooltips
    data: tooltips type ref to cl_salv_tooltips.
    data: settings type ref to cl_salv_functional_settings.
    data: value    type char128.
    data: lp_text  type lvc_tip.
    field-symbols: &lt;outtab&gt; type ty_request_details.
    free settings.
    free tooltips.
    settings = im_table-&gt;get_functional_settings( ).
    tooltips = settings-&gt;get_tooltips( ).
    try.
        lp_text = &apos;Newer version in Acceptance&apos;(w23).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@0S@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
    try.
        lp_text = &apos;Previous transport not transported&apos;(w17).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@5D@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
    try.
        lp_text = &apos;All conflicts are dealt with by the list&apos;(w04).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@AI@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
    try.
        lp_text = &apos;Marked for re-import to Production&apos;(w18).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@K3@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
    try.
        lp_text = &apos;Newer version in production!&apos;(w01).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@F1@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
    try.
        lp_text = &apos;Object missing in List and Production!&apos;(w05).
        tooltips-&gt;add_tooltip( type    = cl_salv_tooltip=&gt;c_type_symbol
                               value   = &apos;@CY@&apos;
                               tooltip = lp_text ).
      catch cx_salv_existing into rf_root.
    endtry.
  endmethod.                    &quot;alv_set_tooltips

  method alv_output.
*   Display the ALV output
    call method rf_table-&gt;display.
  endmethod.                    &quot;alv_output

  method alv_xls_output.
*   Display the ALV output
    call method rf_table_xls-&gt;display.
  endmethod.                    &quot;alv_output

  method column_settings.
    types: begin of lty_field_ran,
             sign   type c length 1,
             option type c length 2,
             low    type fieldname,
             high   type fieldname,
           end of lty_field_ran.

    data: ls_reference        type salv_s_ddic_reference.
    data: ls_s_column_ref     type salv_s_column_ref.
    data: lr_column_table     type ref to cl_salv_column_table.
    data: st_colo             type lvc_s_colo.
*   Declaration for Aggregate Function Settings
    data: lr_aggregations     type ref to cl_salv_aggregations.
*   Remove some columns for the XLS output
    data: lra_fieldname       type range of lty_field_ran.
    data: ls_fieldname        type lty_field_ran.
    data: lp_return           type abap_bool.
*   Hide columns when empty
    data: lra_hide_when_empty type range of lty_field_ran.
    data: ls_hide_when_empty  type lty_field_ran.
*   Texts
    data: lp_short_text       type char10.
    data: lp_medium_text      type char20.
    data: lp_long_text        type char40.

    data: lp_sys_s type ref to data.
    data: lp_sys_m type ref to data.
    data: lp_sys_l type ref to data.
    field-symbols: &lt;text_s&gt; type scrtext_s.
    field-symbols: &lt;text_m&gt; type scrtext_m.
    field-symbols: &lt;text_l&gt; type scrtext_l.

* Instantiate data references for column headers
    create data lp_sys_s type scrtext_s.
    create data lp_sys_m type scrtext_m.
    create data lp_sys_l type scrtext_l.
    assign lp_sys_s-&gt;* to &lt;text_s&gt;.
    assign lp_sys_m-&gt;* to &lt;text_m&gt;.
    assign lp_sys_l-&gt;* to &lt;text_l&gt;.

*   Build range for all unwanted columns:
    case im_table.
      when rf_table_xls.
        ls_fieldname-option = &apos;EQ&apos;.
        ls_fieldname-sign = &apos;I&apos;.
        ls_fieldname-low = &apos;CHECKED&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;OBJECT&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;OBJ_NAME&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;OBJKEY&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;KEYOBJECT&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;KEYOBJNAME&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;TABKEY&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;PGMID&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;DEV&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;QAS&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;PRD&apos;.
        append ls_fieldname to lra_fieldname.
        ls_fieldname-low = &apos;STATUS_TEXT&apos;.
        append ls_fieldname to lra_fieldname.
      when rf_table.
        ls_fieldname-option = &apos;EQ&apos;.
        ls_fieldname-sign = &apos;I&apos;.
        ls_fieldname-low = &apos;RE_IMPORT&apos;.
        append ls_fieldname to lra_fieldname.
    endcase.
*   Always remove the following colums, regardless of which table is used
    ls_fieldname-option = &apos;EQ&apos;.
    ls_fieldname-sign = &apos;I&apos;.
    ls_fieldname-low = &apos;TRSTATUS&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;TRFUNCTION&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;TROBJ_NAME  &apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;FLAG&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;OBJFUNC&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;CHECKED_BY&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;WARNING_RANK&apos;.
    append ls_fieldname to lra_fieldname.

*   Hide when empty
    ls_hide_when_empty-option = &apos;EQ&apos;.
    ls_hide_when_empty-sign   = &apos;I&apos;.
    ls_hide_when_empty-low    = &apos;OBJKEY&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.
    ls_hide_when_empty-low    = &apos;KEYOBJECT&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.
    ls_hide_when_empty-low    = &apos;KEYOBJNAME&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.
    ls_hide_when_empty-low    = &apos;TABKEY&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.
    ls_hide_when_empty-low    = &apos;PROJECT&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.
    ls_hide_when_empty-low    = &apos;PROJECT_DESCR&apos;.
    append ls_hide_when_empty to lra_hide_when_empty.

    loop at im_column_ref into ls_s_column_ref.
      try.
          lr_column_table ?=
            im_rf_columns_table-&gt;get_column( ls_s_column_ref-columnname ).
        catch cx_salv_not_found into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
      if lr_column_table is not initial.
*       Make Mandt column invisible
        if lr_column_table-&gt;get_ddic_datatype( ) = &apos;CLNT&apos;.
          lr_column_table-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
        endif.
*       Create Aggregate function total for All Numeric/Currency Fields
        if lr_column_table-&gt;get_ddic_inttype( ) eq &apos;P&apos; or
           lr_column_table-&gt;get_ddic_datatype( ) eq &apos;CURR&apos;.
          if lr_aggregations is not initial.
            try.
                lr_aggregations-&gt;add_aggregation(
                                  columnname = ls_s_column_ref-columnname
                                  aggregation = if_salv_c_aggregation=&gt;total ).
              catch cx_salv_data_error into rf_root.
                me-&gt;handle_error( exporting rf_oref = rf_root ).
              catch cx_salv_not_found into rf_root.
                me-&gt;handle_error( exporting rf_oref = rf_root ).
              catch cx_salv_existing into rf_root.
                me-&gt;handle_error( exporting rf_oref = rf_root ).
            endtry.
          endif.
        endif.
*       Create Check box for fields with domain &quot;XFELD&quot;
        if lr_column_table-&gt;get_ddic_domain( ) eq &apos;XFELD&apos;.
          lr_column_table-&gt;set_cell_type( if_salv_c_cell_type=&gt;checkbox ).
        endif.
*       Set color to Date Columns
        if lr_column_table-&gt;get_ddic_datatype( ) eq &apos;DATS&apos; or
           lr_column_table-&gt;get_ddic_datatype( ) eq &apos;TIMS&apos;.
          clear: st_colo.
          move 2 to st_colo-col.
          move 1 to st_colo-int.
          move 1 to st_colo-inv.
          lr_column_table-&gt;set_color( st_colo ).
        endif.
*       Remove columns that are not required
        if lr_column_table-&gt;get_columnname( ) in lra_fieldname.
          lr_column_table-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
        endif.
*       Remove columns that are not required when empty
        if lr_column_table-&gt;get_columnname( ) in lra_hide_when_empty.
          lp_return = me-&gt;is_empty_column( im_column = ls_s_column_ref-columnname
                                                im_table  = main_list ).
          if lp_return = abap_true.
            lr_column_table-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
          endif.
        endif.
        case lr_column_table-&gt;get_columnname( ).
          when &apos;TRKORR&apos;.
*           Add Hotspot &amp; Hyper Link
            lr_column_table-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
            lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;true ).
          when &apos;OBJ_NAME&apos;.
*           Add Hotspot &amp; Hyper Link
            lr_column_table-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
          when &apos;CHECKED&apos;.
            if check_flag = abap_true.
              ls_reference-table = &apos;KGALK&apos;.
              ls_reference-field = &apos;CHECKED&apos;.
              lr_column_table-&gt;set_ddic_reference( ls_reference ).
              lr_column_table-&gt;set_alignment( if_salv_c_alignment=&gt;centered ).
            else.
              lr_column_table-&gt;set_technical( ).
            endif.
          when &apos;INFO&apos;.
            ls_reference-table = &apos;RSPRINT&apos;.
            ls_reference-field = &apos;DOKU&apos;.
            lr_column_table-&gt;set_ddic_reference( ls_reference ).
            lr_column_table-&gt;set_alignment( if_salv_c_alignment=&gt;centered ).
            lr_column_table-&gt;set_icon( ).
          when &apos;CHECKED_BY&apos;.
            if check_flag = &apos;&apos;.
              lr_column_table-&gt;set_technical( ).
            endif.
          when &apos;RETCODE&apos;.
            lp_short_text = &apos;RC&apos;(015).
            lp_long_text = lp_medium_text = &apos;Return Code&apos;(016).
            lr_column_table-&gt;set_short_text( lp_short_text ).
            lr_column_table-&gt;set_medium_text( lp_medium_text ).
            lr_column_table-&gt;set_long_text( lp_long_text ).
          when &apos;STATUS_TEXT&apos;.
            lp_short_text = &apos;Descript.&apos;(017).
            lp_long_text = lp_medium_text = &apos;Description&apos;(018).
            lr_column_table-&gt;set_short_text( lp_short_text ).
            lr_column_table-&gt;set_medium_text( lp_medium_text ).
            lr_column_table-&gt;set_long_text( lp_long_text ).
          when &apos;WARNING_LVL&apos;.
            if check_flag = abap_true.
              ls_reference-table = &apos;FCALV_S_RMLIFO20&apos;.
              ls_reference-field = &apos;WARNING&apos;.
              lr_column_table-&gt;set_ddic_reference( ls_reference ).
              lr_column_table-&gt;set_icon( ).
            else.
              lr_column_table-&gt;set_technical( ).
            endif.
          when &apos;WARNING_TXT&apos;.
            if check_flag = abap_true.
              ls_reference-table = &apos;CSIM_ST_EXPL&apos;.
              ls_reference-field = &apos;TEXT_WARNING&apos;.
              lr_column_table-&gt;set_ddic_reference( ls_reference ).
            else.
              lr_column_table-&gt;set_technical( ).
            endif.
          when &apos;PROJECT&apos;.
            ls_reference-table = &apos;LOG_HEADER&apos;.
            ls_reference-field = &apos;PRONR&apos;.
            lr_column_table-&gt;set_ddic_reference( ls_reference ).
          when &apos;STATUS&apos;.
            ls_reference-table = &apos;TRHEADER&apos;.
            ls_reference-field = &apos;TRSTATUS&apos;.
            lr_column_table-&gt;set_ddic_reference( ls_reference ).
            lr_column_table-&gt;set_key( ).
          when &apos;DEV&apos;.
            &lt;text_s&gt; = me-&gt;dev_system.
            &lt;text_m&gt; = me-&gt;dev_system.
            &lt;text_l&gt; = me-&gt;dev_system.
            if &lt;text_s&gt; is assigned.
              lr_column_table-&gt;set_short_text( &lt;text_s&gt; ).
            endif.
            if &lt;text_m&gt; is assigned.
              lr_column_table-&gt;set_medium_text( &lt;text_m&gt; ).
            endif.
            if &lt;text_l&gt; is assigned.
              lr_column_table-&gt;set_long_text( &lt;text_l&gt; ).
            endif.
            lr_column_table-&gt;set_icon( ).
          when &apos;QAS&apos;.
            &lt;text_s&gt; = me-&gt;qas_system.
            &lt;text_m&gt; = me-&gt;qas_system.
            &lt;text_l&gt; = me-&gt;qas_system.
            if &lt;text_s&gt; is assigned.
              lr_column_table-&gt;set_short_text( &lt;text_s&gt; ).
            endif.
            if &lt;text_m&gt; is assigned.
              lr_column_table-&gt;set_medium_text( &lt;text_m&gt; ).
            endif.
            if &lt;text_l&gt; is assigned.
              lr_column_table-&gt;set_long_text( &lt;text_l&gt; ).
            endif.
            lr_column_table-&gt;set_icon( ).
          when &apos;PRD&apos;.
            if &lt;text_l&gt; is assigned.
              &lt;text_s&gt; = me-&gt;prd_system.
              &lt;text_m&gt; = me-&gt;prd_system.
              &lt;text_l&gt; = me-&gt;prd_system.
              if &lt;text_s&gt; is assigned.
                lr_column_table-&gt;set_short_text( &lt;text_s&gt; ).
              endif.
              if &lt;text_m&gt; is assigned.
                lr_column_table-&gt;set_medium_text( &lt;text_m&gt; ).
              endif.
              if &lt;text_l&gt; is assigned.
                lr_column_table-&gt;set_long_text( &lt;text_l&gt; ).
              endif.
              lr_column_table-&gt;set_icon( ).
            endif.
          when &apos;RE_IMPORT&apos;.
            lp_short_text = &apos;Import again&apos;(044).
            lp_long_text = lp_medium_text = &apos;Import again&apos;(044).
            lr_column_table-&gt;set_short_text( lp_short_text ).
            lr_column_table-&gt;set_medium_text( lp_medium_text ).
            lr_column_table-&gt;set_long_text( lp_long_text ).
        endcase.
      endif.
    endloop.
  endmethod.                    &quot;column_settings

  method is_empty_column.
    data: ls_line type ty_request_details.
    field-symbols: &lt;column&gt; type any.
    re_is_empty = abap_true.
    loop at im_table into ls_line.
      assign component im_column of structure ls_line to &lt;column&gt;.
      if &lt;column&gt; is not initial.
        re_is_empty = abap_false.
        exit.
      endif.
    endloop.
  endmethod.                    &quot;is_empty_culomn

  method docu_call.
    call function &apos;DOCU_CALL&apos;
      exporting
        id         = &apos;TA&apos;
        langu      = sy-langu
        object     = im_object
      exceptions
        wrong_name = 1
        others     = 2.
    if sy-subrc &lt;&gt; 0.
      message id sy-msgid type sy-msgty number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.
  endmethod.                    &quot;docu_call

  method determine_col_width.
* This method determines the width of a column in the detailed output
* lists (for conflicts or no-checks overviews). The length of the
* largest value is used as column width. This column width is then used
* in the fielddif table for function &quot;STC1_POPUP_WITH_TABLE_CONTROL&quot;.
* This is done to downsize the width of the column as much as possible.
    data: lp_value type i.
*    CLEAR: ex_colwidth.
    if not im_field is initial.
      lp_value = strlen( im_field ).
      if lp_value &gt; ex_colwidth.
        ex_colwidth = lp_value.
      endif.
    endif.
  endmethod.                    &quot;determine_col_width

  method determine_warning_text.
    case im_highest_rank.
      when 0.  &quot;ICON_LED_GREEN
      when 5.  &quot;ICON_FAILURE
        ex_highest_text = lp_alert0_text.
      when 6.  &quot;ICON_FAILURE
        ex_highest_text = lp_alert1_text.
      when 7.  &quot;ICON_FAILURE
        ex_highest_text = lp_alert2_text.
      when 8.  &quot;ICON_FAILURE
        ex_highest_text  = lp_alert3_text.
      when 10. &quot;ICON_HINT
        ex_highest_text = lp_hint1_text.
      when 12. &quot;ICON_HINT
        ex_highest_text = lp_hint2_text.
      when 14. &quot;ICON_HINT
        ex_highest_text = lp_hint3_text.
      when 16. &quot;ICON_HINT
        ex_highest_text = lp_hint4_text.
      when 20. &quot;ICON_INFORMATION
        ex_highest_text = lp_info_text.
      when 50. &quot;ICON_LED_YELLOW
        ex_highest_text = lp_warn_text.
      when 98. &quot;ICON_INCOMPLETE
        ex_highest_text = lp_ddic_text.
      when 99. &quot;ICON_LED_RED
        ex_highest_text = lp_error_text.
    endcase.
  endmethod.                    &quot;determine_warning_text

  method get_tps_for_same_object.

    data: lt_aggr_tp_list_of_objects type tt_request_details.
    data: ls_tp_same_object          type ty_request_details.
    data: lp_index                   type sytabix.
    data: lp_return                  type sysubrc.

    refresh: ex_newer.
    refresh: ex_older.
    clear:   ex_newer.
    clear:   ex_older.

*   First check if the transports for the object have already been read
*   and stored in the table. If so, then we do not need to retrieve all
*   the transports again (to speed things up a bit).
    sort me-&gt;aggr_tp_list_of_objects by object
                                        obj_name
                                        keyobject
                                        keyobjname
                                        tabkey.
    read table me-&gt;aggr_tp_list_of_objects
               with key object     = im_line-object
                        obj_name   = im_line-obj_name
                        keyobject  = im_line-keyobject
                        keyobjname = im_line-keyobjname
                        tabkey     = im_line-tabkey
               transporting no fields
               binary search.
    if sy-subrc &lt;&gt; 0.
*     The transports for this object have not been retrieved yet, so we
*     do that now:
      select a~trkorr b~object  b~obj_name b~objfunc
             a~as4user a~as4date a~as4time
             from e070 as a join e071 as b                  &quot;v_e071eu
                       on a~trkorr = b~trkorr
             into (ls_tp_same_object-trkorr,
                   ls_tp_same_object-object,
                   ls_tp_same_object-obj_name,
                   ls_tp_same_object-objfunc,
                   ls_tp_same_object-as4user,
                   ls_tp_same_object-as4date,
                   ls_tp_same_object-as4time)
             where not a~trkorr in  me-&gt;project_trkorrs
             and   b~obj_name   in excluded_objects
             and   a~strkorr    = &apos;&apos;
             and   a~trkorr     like me-&gt;prefix
             and   b~object     = im_line-object
             and   b~obj_name   = im_line-obj_name.
        append ls_tp_same_object to lt_aggr_tp_list_of_objects.
      endselect.

*   Also read from version table, because in some case, the object can
*   be part of a &apos;bigger&apos; group.
*   Example 1: - a Function Module (FUNC) is transported in one
*                transport, but the entire functiongroup (FUGR) in
*                another (this also transports the FM)
*   Example 2: - A table (TABL) is part of a table definition (TABD), so
*                should also be treated as the same object.
      select korrnum objtype objname
             author
             from  vrsd
             into (ls_tp_same_object-trkorr,
                   ls_tp_same_object-object,
                   ls_tp_same_object-obj_name,
                   ls_tp_same_object-as4user)
             where not korrnum in  me-&gt;project_trkorrs
             and   objname     in excluded_objects
             and   korrnum     &lt;&gt; im_line-trkorr
             and   korrnum     like me-&gt;prefix
             and   korrnum     &lt;&gt; &apos;&apos;
             and   objtype     =  im_line-object
             and   objname     =  im_line-obj_name.     &quot;#EC CI_NOFIELD

        append ls_tp_same_object to lt_aggr_tp_list_of_objects.
      endselect.

*     Remove duplicates:
      sort lt_aggr_tp_list_of_objects[] by trkorr object obj_name.
      delete adjacent duplicates from lt_aggr_tp_list_of_objects
                                 comparing trkorr object obj_name.

*     If the object is a table, we need to be able to check the keys.
*     Replace the entry with all entries containing the keys.
      if im_line-objfunc = &apos;K&apos;.
        me-&gt;add_table_keys_to_list( importing table = lt_aggr_tp_list_of_objects ).
      endif.

*     Now get the last date the object was imported:
      loop at lt_aggr_tp_list_of_objects into ls_tp_same_object.
        lp_index = sy-tabix.
*       Remove all transports from a source system not known (usually an
*       SAP system, not one of our systems).
        if not ls_tp_same_object-trkorr(3) in ra_systems.
          delete lt_aggr_tp_list_of_objects index sy-tabix.
          continue.
        endif.
*       Now get the global information on the transport:
*       Get the last date the object was imported
        me-&gt;get_import_datetime_qas( exporting im_trkorr  = ls_tp_same_object-trkorr
                                     importing ex_as4time = ls_tp_same_object-as4time
                                               ex_as4date = ls_tp_same_object-as4date
                                               ex_return  = lp_return ).
        if lp_return = 0.
          modify lt_aggr_tp_list_of_objects from ls_tp_same_object.
        else.
          delete lt_aggr_tp_list_of_objects index lp_index.
        endif.
      endloop.
*     Add the newly retrieved lines to the internal table:
      append lines of lt_aggr_tp_list_of_objects to me-&gt;aggr_tp_list_of_objects.
    else.
*     Already retrieved and stored in the list
      check 1 = 1.
    endif.

*   Remove duplicates:
    sort me-&gt;aggr_tp_list_of_objects[] by trkorr object obj_name.
    delete adjacent duplicates from me-&gt;aggr_tp_list_of_objects
                               comparing trkorr object obj_name.

*   Move newer transports for this object to the relevant internal table:
    loop at me-&gt;aggr_tp_list_of_objects into ls_tp_same_object
                                        where object     =  im_line-object
                                        and   obj_name   =  im_line-obj_name
                                        and   keyobject  =  im_line-keyobject
                                        and   keyobjname =  im_line-keyobjname
                                        and   tabkey     =  im_line-tabkey
                                        and   trkorr     &lt;&gt; im_line-trkorr.
*     If on the same date, check if the time is later
      if ls_tp_same_object-as4date = im_line-as4date.
        if ls_tp_same_object-as4time &gt;= im_line-as4time.
          append ls_tp_same_object to ex_newer.
        else.
          append ls_tp_same_object to ex_older.
        endif.
      else.
        if ls_tp_same_object-as4date  &gt; im_line-as4date.
          append ls_tp_same_object to ex_newer.
        else.
          append ls_tp_same_object to ex_older.
        endif.
      endif.
    endloop.

    sort ex_newer by as4date descending as4time descending.
    sort ex_older by as4date descending as4time descending.

  endmethod.                    &quot;get_tps_for_same_object

  method handle_error.
    data: lp_msg type string.
    lp_msg = rf_oref-&gt;get_text( ).
    concatenate &apos;ERROR:&apos;(038) lp_msg into lp_msg separated by space.
    message lp_msg type &apos;E&apos;.
  endmethod.                    &quot;handle_error

  method check_colwidth.
    data: ls_component type abap_compdescr.
    data: lp_as4text   type as4text.
    data: lp_len       type i.
    select single scrtext_s
                  from dd04t into lp_as4text
                  where rollname   = im_name
                  and   ddlanguage = sy-langu.
    if lp_as4text is initial.
      select single scrtext_m
                    from dd04t into lp_as4text
                    where rollname   = im_name
                    and   ddlanguage = sy-langu.
      if lp_as4text is initial.
        select single scrtext_l
                      from dd04t into lp_as4text
                      where rollname   = im_name
                      and   ddlanguage = sy-langu.
      endif.
    endif.
    lp_len = strlen( lp_as4text ).
    if lp_len &gt; im_colwidth.
      re_colwidth = lp_len.
    else.
      re_colwidth = im_colwidth.
    endif.
  endmethod.                    &quot;check_colwidth

  method remove_tp_in_prd.
    loop at me-&gt;main_list transporting no fields where prd = co_okay.
      delete me-&gt;main_list index sy-tabix.
    endloop.
  endmethod.                    &quot;remove_tp_in_prd

  method sort_main_list.
    sort me-&gt;main_list by as4date   ascending
                          as4time    ascending
                          trkorr     ascending
                          object     ascending
                          obj_name   ascending
                          objkey     ascending
                          keyobject  ascending
                          keyobjname ascending
                          tabkey     ascending.
    delete adjacent duplicates from me-&gt;main_list.
  endmethod.                    &quot;sort_main_list

  method top_of_page.
    data: lr_logo             type ref to cl_salv_form_layout_logo.
    data: lp_head             type char50.
    data: lp_file_in          type localfile.               &quot;#EC NEEDED
    data: lp_file_out         type localfile.
    data: lp_records_found(5) type n.
    data: lp_picture          type bds_typeid. &quot;VALUE &apos;XXXXXXXXXXXXXX&apos;.
    data: lr_rows             type ref to cl_salv_form_layout_grid.
    data: lr_rows_flow        type ref to cl_salv_form_layout_flow.
    data: lr_row              type ref to cl_salv_form_layout_flow.
    create object lr_rows_flow.
    lr_rows = lr_rows_flow-&gt;create_grid( ).
    lr_rows-&gt;create_grid( row     = 0
                          column  = 0
                          rowspan = 0
                          colspan = 0 ).
*   Header of Top of Page
    lp_head = &apos;Information&apos;(t05).
    lr_row = lr_rows-&gt;add_row( ).
    lr_row-&gt;create_header_information(
            text = lp_head
            ).
*   Split filename from path
    if not me-&gt;filename is initial.
      lp_file_out = me-&gt;filename.
      do.
        if lp_file_out cs &apos;\&apos;.
          split lp_file_out at &apos;\&apos; into lp_file_in lp_file_out.
        else.
          exit.
        endif.
      enddo.
      lr_row = lr_rows-&gt;add_row( ).
      lr_row = lr_rows-&gt;add_row( ).
      lr_row-&gt;create_label(
        text    = &apos;File uploaded:&apos;(049) ).
      lr_row-&gt;create_text(
              text      = &apos; &apos;
              ).
      lr_row-&gt;create_text(
        text   = lp_file_out(50)
        ).
    endif.
    lr_row = lr_rows-&gt;add_row( ).
    lr_row-&gt;create_text(
            text    = &apos;If there is a warning icon in column `Warning`, &apos; &amp;
                      &apos;double-clicking on the icon will display a list &apos; &amp;
                      &apos;of objects that should be checked&apos;(h01)
            ).
    lr_row = lr_rows-&gt;add_row( ).
    lr_row-&gt;create_text(
            text    = &apos;You can add these conflicts by means of the &apos; &amp;
                      &apos;button &apos;&apos;Add Conflicts&apos;&apos; in the application toolbar &apos; &amp;
                      &apos;or doubleclicking the warning&apos;(h02)
            ).
    lr_row = lr_rows-&gt;add_row( ).
    lr_row = lr_rows-&gt;add_row( ).
    lr_row-&gt;create_label(
            text    = &apos;No of Records found:&apos;(t04)
            ).
    case sy-ucomm.
      when &apos;&amp;PREP_XLS&apos;.
        describe table me-&gt;main_list_xls lines lp_records_found.
      when others.
        describe table me-&gt;main_list lines lp_records_found.
    endcase.
    lr_row-&gt;create_text(
            text      = &apos; &apos;
            ).
    lr_row-&gt;create_text(
            text      = lp_records_found
            tooltip   = lp_records_found
            ).
*    lr_row = lr_rows-&gt;add_row( ).
*   Create logo layout, set grid content on left and logo image on right
    create object lr_logo.
    lr_logo-&gt;set_left_content( lr_rows_flow ).
    lr_logo-&gt;set_right_logo( lp_picture ).
    ex_form_element = lr_logo.
  endmethod.                    &quot;top_of_page

  method version_check.
    data: lversno_list    type standard table of  vrsn,
          version_list    type standard table of  vrsd,
          ls_version_list type vrsd,
          lp_destination  type rfcdest.
    field-symbols: &lt;l_main_list&gt; type ty_request_details.
    delete adjacent duplicates from me-&gt;main_list comparing object obj_name.
*   Delete tables
    delete me-&gt;main_list where objfunc = &apos;K&apos;.
    loop at me-&gt;main_list assigning &lt;l_main_list&gt;.
      refresh: lversno_list,
               version_list.
      clear:   ls_version_list.
      ls_version_list-objname = &lt;l_main_list&gt;-obj_name.
      ls_version_list-objtype = &lt;l_main_list&gt;-object.
*     Check local
      call function &apos;SVRS_GET_VERSION_DIRECTORY_46&apos;
        exporting
          destination            = &apos;NONE&apos;
          objname                = ls_version_list-objname
          objtype                = ls_version_list-objtype
        tables
          lversno_list           = lversno_list
          version_list           = version_list
        exceptions
          no_entry               = 1
          communication_failure_ = 2
          system_failure         = 3
          others                 = 4.
      field-symbols &lt;version_list&gt; type vrsd.
      loop at version_list assigning &lt;version_list&gt;.     &quot;#EC CI_NESTED
        if &lt;version_list&gt;-versno &gt; ls_version_list-versno.
*       Latest version.
          ls_version_list = &lt;version_list&gt;.
        endif.
      endloop.
      refresh: lversno_list,
               version_list.
      lp_destination = me-&gt;qas_system.
*     Check system
      call function &apos;SVRS_GET_VERSION_DIRECTORY_46&apos;
        exporting
          destination            = lp_destination
          objname                = ls_version_list-objname
          objtype                = ls_version_list-objtype
        tables
          lversno_list           = lversno_list
          version_list           = version_list
        exceptions
          no_entry               = 1
          communication_failure_ = 2
          system_failure         = 3
          others                 = 4.
      if sy-subrc &lt;&gt; 0.
        append initial line to version_list assigning &lt;version_list&gt;.
        &lt;l_main_list&gt;-warning_txt = &apos;No version found to compare&apos;(w02).
      endif.
      loop at version_list assigning &lt;version_list&gt;.     &quot;#EC CI_NESTED
        if &lt;version_list&gt;-korrnum &lt;&gt; ls_version_list-korrnum.
          &lt;l_main_list&gt;-warning_lvl  = co_error.
          &lt;l_main_list&gt;-warning_rank = co_error_rank.
        elseif &lt;version_list&gt;-korrnum is initial.
          &lt;l_main_list&gt;-warning_lvl  = co_warn.
          &lt;l_main_list&gt;-warning_rank = co_warn_rank.
        else.
          &lt;l_main_list&gt;-warning_lvl  = co_okay.
          &lt;l_main_list&gt;-warning_rank = co_okay_rank.
        endif.
      endloop.
    endloop.
  endmethod.                    &quot;version_check

  method display_excel.
    data: ls_main_list_xls type me-&gt;ty_request_details.
    data: lt_main_list_xls type me-&gt;tt_request_details.
    data: lp_variant       type disvariant.
    data: lp_return        type c.
    data: lp_highest_lvl   type icon_d.
    data: lp_highest_rank  type numc4.
    data: lp_highest_text  type text74.
    data: lp_highest_col   type lvc_t_scol.

    field-symbols: &lt;l_main_list&gt; type ty_request_details.

*   Only when called from the Main Screen (Object Level). Do not build again
*   when the XLS list has been build already.
    check: me-&gt;main_list_xls is initial.
*   Remove duplicate transport numbers (only need single lines):
    me-&gt;main_list_xls[] = im_table[].
    sort me-&gt;main_list_xls by trkorr ascending.
    delete adjacent duplicates from      me-&gt;main_list_xls
                               comparing trkorr.
*   Extra actions:
*   - Make sure to keep the highest warning level
*   - rename Icons to text
*   - remove transports not in QAS
    clear: lp_return.
    loop at me-&gt;main_list_xls into me-&gt;main_list_line_xls.
      clear: lp_highest_lvl,
             lp_highest_rank,
             lp_highest_text,
             lp_highest_col.
*     Remove transports not in QAS and transports in prd that do not
*     need to be re-transported:
      if me-&gt;main_list_line_xls-qas &lt;&gt; me-&gt;co_okay or
         me-&gt;main_list_line_xls-prd =  me-&gt;co_okay.
        lp_return = abap_true.
        loop at me-&gt;main_list assigning &lt;l_main_list&gt;    &quot;#EC CI_NESTED
                              where trkorr = me-&gt;main_list_line_xls-trkorr.
          &lt;l_main_list&gt;-warning_lvl  = co_tp_fail.
          &lt;l_main_list&gt;-warning_rank = co_tp_fail_rank.
          &lt;l_main_list&gt;-warning_txt  = lp_fail_text.
        endloop.
*        EXIT.
      endif.
*     Rename Documentation Icon to text
      if me-&gt;main_list_line_xls-info = me-&gt;co_docu.
        me-&gt;main_list_line_xls-info = &apos;Yes&apos;(037).
      endif.
*     Make sure to find and keep the highest warning level for the
*     transport
      loop at me-&gt;main_list into  main_list_line         &quot;#EC CI_NESTED
                            where trkorr = me-&gt;main_list_line_xls-trkorr.
        if main_list_line-warning_rank &gt; lp_highest_rank.
          lp_highest_rank = main_list_line-warning_rank.
          lp_highest_lvl  = main_list_line-warning_lvl.
          lp_highest_text = main_list_line-warning_txt.
          lp_highest_col  = main_list_line-t_color.
        endif.
      endloop.
      rf_ztct-&gt;refresh_alv( ).                   &quot;Refresh the ALV
*     Add correct warning and change Warning Lvl Icon to text:
      if sy-subrc = 0.
        me-&gt;main_list_line_xls-warning_lvl  = lp_highest_lvl.
        me-&gt;main_list_line_xls-warning_rank = lp_highest_rank.
        me-&gt;main_list_line_xls-warning_txt  = lp_highest_text.
        me-&gt;main_list_line_xls-t_color      = lp_highest_col.
        case lp_highest_lvl.
          when me-&gt;co_info or me-&gt;co_hint.
            me-&gt;main_list_line_xls-warning_lvl = &apos;Info&apos;(024).
          when me-&gt;co_error.
            me-&gt;main_list_line_xls-warning_lvl = &apos;ERR.&apos;(033).
          when me-&gt;co_ddic.
            me-&gt;main_list_line_xls-warning_lvl = &apos;ERR.&apos;(033).
          when me-&gt;co_warn.
            me-&gt;main_list_line_xls-warning_lvl = &apos;Warn&apos;(034).
          when others.
            clear: me-&gt;main_list_line_xls-warning_lvl.
        endcase.
        if main_list_line-prd = co_scrap.
          me-&gt;main_list_line_xls-re_import = &apos;Import again&apos;(040).
        endif.
      endif.
*     Apply the changes
      try.
          modify me-&gt;main_list_xls from me-&gt;main_list_line_xls.
        catch cx_root into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
    endloop.
*   Message if entries were deleted because they were not in QAS:
    if lp_return = abap_true.
      message i000(db)
         with &apos;Some transports will be deleted from the list because&apos;(m02)
              &apos;they are missing in Acceptance or are already in&apos;(m03)
              &apos;Production but not marked for re-import.&apos;(m04)
              &apos;Please check the main list.&apos;(m05).
      free: rf_table_xls.
      free: me-&gt;main_list_xls.
      exit.
    endif.
*   Display short list for copy to Excel transport list:
    me-&gt;alv_xls_init( importing ex_rf_table = rf_table_xls
                      changing  ch_table = main_list_xls ).
    me-&gt;alv_set_properties( exporting im_table = rf_table_xls ).
    me-&gt;alv_xls_output( ).
    free rf_table_xls.
    refresh: main_list_xls.
  endmethod.                    &quot;display_excel

  method set_properties_conflicts.
    types: begin of lty_field_ran,
             sign   type c length 1,
             option type c length 2,
             low    type fieldname,
             high   type fieldname,
           end of lty_field_ran.
    data: ls_reference      type salv_s_ddic_reference.
    data: ls_s_column_ref   type salv_s_column_ref.
    data: lr_column_table   type ref to cl_salv_column_table.
*   Declaration for Aggregate Function Settings
    data: lr_aggregations   type ref to cl_salv_aggregations.
    data: ls_table          type me-&gt;ty_request_details.
    data: lp_popup_width    type lvc_outlen.  &quot;Length
    data: lp_cw_columns     type lvc_outlen.  &quot;Length
    data: lp_cw_korrnum     type lvc_outlen.  &quot;Length
    data: lp_cw_tr_descr    type lvc_outlen.  &quot;Length
    data: lp_cw_object      type lvc_outlen.  &quot;Length
    data: lp_cw_obj_name    type lvc_outlen.  &quot;Length
    data: lp_cw_tabkey      type lvc_outlen.  &quot;Length
    data: lp_cw_author      type lvc_outlen.  &quot;Length
    data: lp_cw_warning_lvl type lvc_outlen.  &quot;Length
    data: lp_cw_date        type lvc_outlen.  &quot;Length
    data: lp_cw_time        type lvc_outlen.  &quot;Length
    data: lp_cw_keyobject   type lvc_outlen.  &quot;Length
    data: lp_cw_keyobjname  type lvc_outlen.  &quot;Length
    data: lr_table_des      type ref to cl_abap_structdescr.
    data: lr_type_des       type ref to cl_abap_typedescr.
    data: lt_details        type abap_compdescr_tab.
    data: ls_details        type abap_compdescr.
    data: lp_field          type string.
    data: lp_length         type i.
    data: lp_data_type      type string.
    data: lp_bool           type abap_bool.
*   Declaration for ALV Columns
    data: lr_columns_table    type ref to cl_salv_columns_table.
    data: lt_t_column_ref     type salv_t_column_ref.
*   Declaration for Sort Function Settings
    data: lr_sorts            type ref to cl_salv_sorts.
*   Declaration for Table Selection settings
    data: lr_selections       type ref to cl_salv_selections.
*   Declaration for Global Display Settings
    data: lr_display_settings type ref to cl_salv_display_settings.
*   Declarations for Title
    data: lp_version          type char10.
    data: lp_title            type lvc_title.
    data: l_o_tabledescr         type ref to cl_abap_tabledescr,
          l_o_typedescr          type ref to cl_abap_typedescr,
          l_o_structdescr        type ref to cl_abap_structdescr,
          l_s_abap_compdescr_tab type abap_compdescr.
    field-symbols: &lt;l_type&gt; type any.
*   To remove some columns from the output
    data: lra_fieldname type range of lty_field_ran.
    data: ls_fieldname  type lty_field_ran.
*   Individual Column Properties.
*   Build range for all columns to be removed
    ls_fieldname-option = &apos;EQ&apos;.
    ls_fieldname-sign = &apos;I&apos;.
    ls_fieldname-low = &apos;INFO&apos;.
    append ls_fieldname to lra_fieldname.
*    ls_fieldname-low = &apos;TR_DESCR&apos;.
*    APPEND ls_fieldname TO lra_fieldname.
    ls_fieldname-low = &apos;RETCODE&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;TRSTATUS&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;STATUS_TEXT&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;TRFUNCTION&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;TRFUNCTION_TXT&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;OBJKEY&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;OBJFUNC&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;CHECKED_BY&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;PROJECT&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;PROJECT_DESCR&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;WARNING_TXT&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;WARNING_RANK&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;SYSTEMID&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;STEPID&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;DEV&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;QAS&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;PRD&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;FLAG&apos;.
    append ls_fieldname to lra_fieldname.
    ls_fieldname-low = &apos;CHECKED&apos;.
    append ls_fieldname to lra_fieldname.
*   Create the standard output fields.
*   Get the structure of the table.
    lr_table_des ?=
      cl_abap_typedescr=&gt;describe_by_data( me-&gt;main_list_line ).
    lt_details[] = lr_table_des-&gt;components[].
    loop at lt_details into ls_details.
      concatenate &apos;ME-&gt;MAIN_LIST_LINE&apos; &apos;-&apos;
                  ls_details-name into lp_field.
      assign (lp_field) to &lt;l_type&gt;.
      check &lt;l_type&gt; is assigned.
      lr_type_des = cl_abap_typedescr=&gt;describe_by_data( &lt;l_type&gt; ).
      lp_length = strlen( lr_type_des-&gt;absolute_name ).
      lp_data_type = lr_type_des-&gt;absolute_name+6(lp_length).
    endloop.
*   Determine the number of fields in the structure
    field-symbols:  &lt;l_fs_field1&gt; type any.
    try.
        l_o_typedescr = cl_abap_tabledescr=&gt;describe_by_data( p_data = im_table ).
        l_o_tabledescr ?= l_o_typedescr.
        l_o_structdescr ?= l_o_tabledescr-&gt;get_table_line_type( ).
      catch cx_sy_move_cast_error into rf_root.
        rf_ztct-&gt;handle_error( exporting rf_oref = rf_root ).
      catch cx_root into rf_root.
        rf_ztct-&gt;handle_error( exporting rf_oref = rf_root ).
    endtry.

*   Determine total width
    loop at im_table into ls_table.
      me-&gt;determine_col_width( exporting im_field    = ls_table-trkorr
                               changing  ex_colwidth = lp_cw_korrnum ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-tr_descr
                               changing  ex_colwidth = lp_cw_tr_descr ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-warning_lvl
                               changing  ex_colwidth = lp_cw_warning_lvl ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-object
                               changing  ex_colwidth = lp_cw_object ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-obj_name
                               changing  ex_colwidth = lp_cw_obj_name ).
      lp_cw_obj_name = lp_cw_obj_name + 10.
      me-&gt;determine_col_width( exporting im_field    = ls_table-tabkey
                               changing  ex_colwidth = lp_cw_tabkey ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-keyobject
                               changing  ex_colwidth = lp_cw_keyobject ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-keyobjname
                               changing  ex_colwidth = lp_cw_keyobjname ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-as4date
                               changing  ex_colwidth = lp_cw_date ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-as4time
                               changing  ex_colwidth = lp_cw_time ).
      me-&gt;determine_col_width( exporting im_field    = ls_table-as4user
                               changing  ex_colwidth = lp_cw_author ).
    endloop.
*   Global Display Settings
    clear: lr_display_settings.
*   Build title:
*   Get version to display in title:
    select datum from  vrsd
                 into  vrsd-datum up to 1 rows
                 where objtype = &apos;REPS&apos;
                 and   objname = sy-repid.
      write vrsd-datum to lp_version.
    endselect.
    if lp_version is not initial.
      select single text from  d347t into lp_title
                         where progname = sy-repid
                         and   sprsl    = sy-langu
                         and   obj_code = &apos;001&apos;.
      if sy-subrc &lt;&gt; 0.
        select single text from  d347t into lp_title
                           where progname = sy-repid
                           and   sprsl    = &apos;EN&apos;
                           and   obj_code = &apos;001&apos;.
      endif.
    endif.
*   Set title
    if lp_title is initial.
      lp_title = sy-title.
    else.
      replace &apos;&amp;1&apos; with lp_version into lp_title.
    endif.
*   Global display settings
    lr_display_settings = rf_conflicts-&gt;get_display_settings( ).
*   Activate Striped Pattern
    lr_display_settings-&gt;set_striped_pattern( if_salv_c_bool_sap=&gt;true ).
*   Report header
    lr_display_settings-&gt;set_list_header( lp_title ).
*   Aggregate Function Settings
    lr_aggregations = rf_conflicts-&gt;get_aggregations( ).
*   Sort Functions
    lr_sorts = rf_conflicts-&gt;get_sorts( ).
    if lr_sorts is not initial.
      try.
          lr_sorts-&gt;add_sort( columnname = &apos;AS4DATE&apos;
                               position = 1
                               sequence   = if_salv_c_sort=&gt;sort_up
                               subtotal   = if_salv_c_bool_sap=&gt;false
                               obligatory = if_salv_c_bool_sap=&gt;false ).
        catch cx_salv_not_found into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_existing into rf_root.
*          me-&gt;handle_error( EXPORTING rf_oref = rf_root ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
      try.
          lr_sorts-&gt;add_sort( columnname = &apos;AS4TIME&apos;
                               position = 2
                               sequence   = if_salv_c_sort=&gt;sort_up
                               subtotal   = if_salv_c_bool_sap=&gt;false
                               group      = if_salv_c_sort=&gt;group_none
                               obligatory = if_salv_c_bool_sap=&gt;false ).
        catch cx_salv_not_found into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
        catch cx_salv_existing into rf_root.
*          rf_ztct-&gt;handle_error( EXPORTING rf_oref = rf_root ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.
    endif.
*   Table Selection Settings
    lr_selections = rf_conflicts-&gt;get_selections( ).
    if lr_selections is not initial.
*     Allow row Selection
      lr_selections-&gt;set_selection_mode(
                      if_salv_c_selection_mode=&gt;row_column ).
    endif.
*   Event Register settings
    rf_events_table = rf_conflicts-&gt;get_event( ).
    create object rf_handle_events.
    set handler rf_handle_events-&gt;on_function_click     for rf_events_table.
    set handler rf_handle_events-&gt;on_double_click_popup for rf_events_table.
    set handler rf_handle_events-&gt;on_link_click_popup   for rf_events_table.
*   Get the columns from ALV Table
    lr_columns_table = rf_conflicts-&gt;get_columns( ).
    if lr_columns_table is not initial.
      refresh : lt_t_column_ref.
      lt_t_column_ref = lr_columns_table-&gt;get( ).
*     Get columns properties
      lr_columns_table-&gt;set_optimize( if_salv_c_bool_sap=&gt;true ).
      lr_columns_table-&gt;set_key_fixation( if_salv_c_bool_sap=&gt;true ).
      try.
          lr_columns_table-&gt;set_color_column( &apos;T_COLOR&apos; ).
        catch cx_salv_data_error into rf_root.
          me-&gt;handle_error( exporting rf_oref = rf_root ).
      endtry.

      loop at lt_t_column_ref into ls_s_column_ref.
        try.
            lr_column_table ?=
              lr_columns_table-&gt;get_column( ls_s_column_ref-columnname ).
          catch cx_salv_not_found into rf_root.
            me-&gt;handle_error( exporting rf_oref = rf_root ).
        endtry.
        if lr_column_table is not initial.
*         Make Mandt column invisible
          if lr_column_table-&gt;get_ddic_datatype( ) = &apos;CLNT&apos;.
            lr_column_table-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
          endif.
*         Create Aggregate function total for All Numeric/Currency Fields
          if lr_column_table-&gt;get_ddic_inttype( ) eq &apos;P&apos; or
             lr_column_table-&gt;get_ddic_datatype( ) eq &apos;CURR&apos;.
            if lr_aggregations is not initial.
              try.
                  lr_aggregations-&gt;add_aggregation(
                                    columnname = ls_s_column_ref-columnname
                                    aggregation = if_salv_c_aggregation=&gt;total ).
                catch cx_salv_data_error into rf_root.
                  me-&gt;handle_error( exporting rf_oref = rf_root ).
                catch cx_salv_not_found into rf_root.
                  me-&gt;handle_error( exporting rf_oref = rf_root ).
                catch cx_salv_existing into rf_root.
                  me-&gt;handle_error( exporting rf_oref = rf_root ).
              endtry.
            endif.
          endif.
*         Create Check box for fields with domain &quot;XFELD&quot;
          if lr_column_table-&gt;get_ddic_domain( ) eq &apos;XFELD&apos;.
            lr_column_table-&gt;set_cell_type( if_salv_c_cell_type=&gt;checkbox ).
          endif.
*         Add Hotspot&amp;Hyper Link to the column vbeln
          if ls_s_column_ref-columnname eq &apos;TRKORR&apos;.
            lr_column_table-&gt;set_cell_type( if_salv_c_cell_type=&gt;hotspot ).
            lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;true ).
          endif.
*         Remove columns that are not required
          if lr_column_table-&gt;get_columnname( ) in lra_fieldname.
            lr_column_table-&gt;set_technical( if_salv_c_bool_sap=&gt;true ).
            continue.
          endif.
          case lr_column_table-&gt;get_columnname( ).
            when &apos;TRKORR&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_korrnum = me-&gt;check_colwidth( im_name     = &apos;TRKORR&apos;
                                                  im_colwidth = lp_cw_korrnum ).
              lr_column_table-&gt;set_output_length( lp_cw_korrnum ).
            when &apos;TR_DESCR&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_tr_descr = me-&gt;check_colwidth( im_name     = &apos;TR_DESCR&apos;
                                                   im_colwidth = lp_cw_tr_descr ).
              lr_column_table-&gt;set_output_length( lp_cw_tr_descr ).
            when &apos;WARNING_LVL&apos;.
              if check_flag = abap_true.
                ls_reference-table = &apos;FCALV_S_RMLIFO20&apos;.
                ls_reference-field = &apos;WARNING&apos;.
                lr_column_table-&gt;set_ddic_reference( ls_reference ).
                lr_column_table-&gt;set_icon( ).
                lr_column_table-&gt;set_output_length( lp_cw_warning_lvl ).
              else.
                lr_column_table-&gt;set_technical( ).
              endif.
            when &apos;OBJECT&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_object = me-&gt;check_colwidth( im_name     = &apos;OBJECT&apos;
                                                 im_colwidth = lp_cw_object ).
              lr_column_table-&gt;set_output_length( lp_cw_object ).
            when &apos;OBJ_NAME&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_obj_name = me-&gt;check_colwidth( im_name     = &apos;OBJ_NAME&apos;
                                                   im_colwidth = lp_cw_obj_name ).
              lr_column_table-&gt;set_output_length( lp_cw_obj_name ).
            when &apos;TABKEY&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              if lp_cw_tabkey is initial.
                lr_column_table-&gt;set_technical( ).
              else.
                lp_cw_tabkey = me-&gt;check_colwidth( im_name     = &apos;TABKEY&apos;
                                                   im_colwidth = lp_cw_tabkey ).
                lr_column_table-&gt;set_output_length( lp_cw_tabkey ).
              endif.
            when &apos;KEYOBJECT&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              if lp_cw_keyobject is initial.
                lr_column_table-&gt;set_technical( ).
              else.
                lp_cw_keyobject = me-&gt;check_colwidth( im_name     = &apos;KEYOBJECT&apos;
                                                      im_colwidth = lp_cw_keyobject ).
                lr_column_table-&gt;set_output_length( lp_cw_keyobject ).
              endif.
            when &apos;KEYOBJNAME&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              if lp_cw_keyobjname is initial.
                lr_column_table-&gt;set_technical( ).
              else.
                lp_cw_keyobjname = me-&gt;check_colwidth( im_name     = &apos;KEYOBJNAME&apos;
                                                       im_colwidth = lp_cw_keyobjname ).
                lr_column_table-&gt;set_output_length( lp_cw_keyobjname ).
              endif.
            when &apos;AS4DATE&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_date = me-&gt;check_colwidth( im_name     = &apos;AS4DATE&apos;
                                               im_colwidth = lp_cw_date ).
              lr_column_table-&gt;set_output_length( lp_cw_date ).
            when &apos;AS4TIME&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_time = me-&gt;check_colwidth( im_name     = &apos;AS4TIME&apos;
                                               im_colwidth = lp_cw_time ).
              lr_column_table-&gt;set_output_length( lp_cw_time ).
            when &apos;AS4USER&apos;.
              lr_column_table-&gt;set_key( if_salv_c_bool_sap=&gt;false ).
              lp_cw_author = me-&gt;check_colwidth( im_name     = &apos;AS4USER&apos;
                                                 im_colwidth = lp_cw_author ).
              lr_column_table-&gt;set_output_length( lp_cw_author ).
          endcase.
*         Count the number of columns that are visible
          lp_bool = lr_column_table-&gt;is_technical( ).
          if lp_bool = abap_false.
            lp_cw_columns = lp_cw_columns + 1.
          endif.
        endif.
      endloop.
    endif.


    ex_xend = lp_cw_korrnum     + lp_cw_tr_descr   +
              lp_cw_warning_lvl + lp_cw_object     +
              lp_cw_obj_name    + lp_cw_tabkey     +
              lp_cw_keyobject   + lp_cw_keyobjname +
              lp_cw_date        + lp_cw_time       +
              lp_cw_author      + lp_cw_columns.
  endmethod.                    &quot;set_properties_conflicts

  method prepare_ddic_check.
    me-&gt;set_ddic_objects( ).
    me-&gt;set_where_used( ).
  endmethod.                    &quot;prepare_ddic_check

  method set_ddic_objects.
    refresh: ddic_objects.
*   DD01L (Domains)
    select a~domname  appending table ddic_objects
           from dd01l as a inner join tadir as b
           on a~domname = b~obj_name
           where b~devclass like &apos;Z%&apos;.
*   DD02L (SAP-tables)
    select a~tabname  appending table ddic_objects
           from dd02l as a inner join tadir as b
           on a~tabname = b~obj_name
           where b~devclass like &apos;Z%&apos;.
*   DD04L (Data elements)
    select a~rollname  appending table ddic_objects
           from dd04l as a inner join tadir as b
           on a~rollname = b~obj_name
           where b~devclass like &apos;Z%&apos;.
  endmethod.   &quot;set_ddic_objects

  method do_ddic_check.
    data: ls_ddic_conflict_info type ty_request_details.
    data: ls_main              type ty_request_details.
    data: lp_obj_name          type trobj_name.
*  Check if the object exists in the where_used list for data
*  dictionary elements that do not yet exist in production.
*  If it is found in the where_used list, then the object MUST
*  also be in the main transport list. If it is not, it is an ERROR,
*  because transporting to production will cause DUMPS.
*  Check is independent of Flags. (Re)Check all objects in the list!
*  Message: &quot;Contains an object that does not exist in prod. and
*            is not in the list&quot;
    loop at ch_main_list into ls_main.
      loop at where_used into  where_used_line
                         where object = ls_main-obj_name. &quot;#EC CI_NESTED
*       If the used object (i.e. element, domain etc) is in the DDIC_E071 list,
*       it means that the used object is NOT in production yet. Transporting
*       the object that uses this used object will cause dumps in production.
        read table ddic_e071 into ddic_e071_line
                             with key obj_name = where_used_line-used_obj.
*       The object in this transport contains a DDIC object that is not yet in
*       Production. This will cause dumps, unless the DDIC object can be found
*       as an object in the transport list!
        if sy-subrc = 0.
*         Check if the used object can be found in the main list
          read table ch_main_list with key obj_name = where_used_line-used_obj
                                  transporting no fields.
          if sy-subrc &lt;&gt; 0.
            if ls_main-flag = abap_true.
              lp_obj_name = where_used_line-used_obj.
              ls_ddic_conflict_info = me-&gt;get_tp_info( im_trkorr   = ddic_e071_line-trkorr
                                                       im_obj_name = lp_obj_name ).
              move-corresponding ls_ddic_conflict_info to me-&gt;conflict_line.
              me-&gt;conflict_line-warning_lvl  = co_ddic.
              me-&gt;conflict_line-warning_rank = co_ddic_rank.
              me-&gt;conflict_line-warning_txt  = lp_ddic_text.
              append: me-&gt;conflict_line to me-&gt;conflicts.
              clear:  me-&gt;conflict_line.
            endif.
            ls_main-warning_lvl  = co_ddic.
            ls_main-warning_rank = co_ddic_rank.
            ls_main-warning_txt  = lp_ddic_text.
            modify: ch_main_list from ls_main transporting warning_lvl
                                                           warning_rank
                                                           warning_txt
                                                           t_color.
            me-&gt;total = me-&gt;total + 1.
          else.
            if ls_main-warning_rank = co_ddic_rank.
              ls_main-flag         = abap_true.
              modify: ch_main_list from ls_main transporting flag.
            endif.
          endif.
        endif.
      endloop.
    endloop.
  endmethod.                    &quot;do_ddic_check

  method set_where_used.
    data: ta_stms_wbo_requests type table of stms_wbo_request,
          st_stms_wbo_requests type stms_wbo_request.
    data: st_systems           type ctslg_system.
    data: lp_scope             type seu_obj.
    data: lp_answer            type char1.
    data: lt_trkorrs           type trkorrs.
    data: lp_ddic_object       type string.
    data: ls_ddic_object       type string.
    data: lp_index             type syindex.
    data: lp_counter           type i.
    data: lp_total(10)         type n.
    data: lp_deleted           type abap_bool.
    data: lp_obj_name          type trobj_name.

    refresh: ddic_e071.
* Get all object types
*--select values for pgmid/object/text from database--------------------
    data: lt_object_table  type tr_object_texts.
    data: ls_object        type ko100.
    data: lt_objrangtab    type objrangtab.
    data: ls_objtyprang    type objtyprang.
    data: lt_objtype       type table of versobjtyp.
    data: ls_objtype       type versobjtyp.
    data: lp_chars         type string value &apos;1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;.

* Get all object types that have been transported before
    select distinct object from e071 into table lt_objtype.
    ls_objtyprang-sign   = &apos;I&apos;.
    ls_objtyprang-option = &apos;EQ&apos;.
    loop at lt_objtype into ls_objtyprang-low.
      if ls_objtyprang-low cn lp_chars.
        continue.
      endif.
      append ls_objtyprang to lt_objrangtab.
    endloop.

* Now find ALL transports for the DDIC objects with Program ID R3TR,
* for the object types found
    clear: lp_counter.
    describe table ddic_objects lines lp_total.
    loop at ddic_objects into ls_ddic_object.
      lp_counter = lp_counter + 1.
      lp_obj_name = ls_ddic_object.
      me-&gt;progress_indicator( exporting im_counter = lp_counter
                                        im_object  = lp_obj_name
                                        im_total   = lp_total
                                        im_text    = &apos;Collecting DDIC transports&apos;(053)
                                        im_flag    = &apos; &apos; ).
      select trkorr pgmid object obj_name
             from e071 appending corresponding fields of table ddic_e071
             where   pgmid    = &apos;R3TR&apos;
             and     object   in lt_objrangtab
             and     obj_name = ls_ddic_object.      &quot;#EC CI_SEL_NESTED
    endloop.

*   Check if the transport is in production, if it is, then the
*   DDIC object is existing and &apos;should&apos; not cause problems.
    clear: lp_counter.
    loop at ddic_e071 into ddic_e071_line.
      lp_index = sy-tabix.
      lp_deleted = abap_false.
      if ddic_e071_line-trkorr(3) ns me-&gt;dev_system.
*       Not a Development transport, check not required
        delete ddic_e071 index lp_index.
        continue.
      endif.
      refresh: ta_stms_wbo_requests.
      clear:   ta_stms_wbo_requests.
      read table tms_mgr_buffer into tms_mgr_buffer_line
                      with table key request          = ddic_e071_line-trkorr
                                     target_system    = me-&gt;dev_system.
      if sy-subrc = 0.
        ta_stms_wbo_requests = tms_mgr_buffer_line-request_infos.
      else.
        call function &apos;TMS_MGR_READ_TRANSPORT_REQUEST&apos;
          exporting
            iv_request                 = ddic_e071_line-trkorr
            iv_target_system           = me-&gt;dev_system
            iv_header_only             = &apos;X&apos;
            iv_monitor                 = &apos; &apos;
          importing
            et_request_infos           = ta_stms_wbo_requests
          exceptions
            read_config_failed         = 1
            table_of_requests_is_empty = 2
            system_not_available       = 3
            others                     = 4.
        if sy-subrc &lt;&gt; 0.
          message id sy-msgid type sy-msgty number sy-msgno
                  with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        else.
          tms_mgr_buffer_line-request       = ddic_e071_line-trkorr.
          tms_mgr_buffer_line-target_system = me-&gt;dev_system.
          tms_mgr_buffer_line-request_infos = ta_stms_wbo_requests.
          insert tms_mgr_buffer_line into table tms_mgr_buffer.
        endif.
      endif.
      read table ta_stms_wbo_requests index 1
                                      into st_stms_wbo_requests.
      if st_stms_wbo_requests-e070-trstatus na &apos;NR&apos;.
*       Transport not released, check not required
        delete ddic_e071 index lp_index.
        lp_deleted = abap_true.
      elseif st_stms_wbo_requests-e070-trstatus = &apos;O&apos;.
      else.
*       Retrieve the environments where the transport can be found.
*       Read the info of the request (transport log) to determine the
*       highest environment the transport has been moved to.
        call function &apos;TR_READ_GLOBAL_INFO_OF_REQUEST&apos;
          exporting
            iv_trkorr = ddic_e071_line-trkorr
          importing
            es_cofile = st_request-cofile.
        if st_request-cofile-systems is initial.
*         Transport log does not exist: not released or log deleted
          delete ddic_e071 index lp_index.
          lp_deleted = abap_true.
        else.
*         Now check in which environments the transport can be found
          loop at st_request-cofile-systems into st_systems. &quot;#EC CI_NESTED
*           For each environment, set the status icon:
            case st_systems-systemid.
              when me-&gt;prd_system.
                describe table st_systems-steps lines tp_lines.
                read table st_systems-steps into st_steps
                                            index tp_lines.
                check st_steps-stepid &lt;&gt; &apos;&lt;&apos;.
*               Transported to production, check not required on this
*               object. Delete all records for this object (not only
*               for this transport but for all transports)
                delete ddic_e071 index lp_index.
                lp_deleted = abap_true.
              when others.
            endcase.
          endloop.
        endif.
      endif.
*     Show the progress indicator
      if lp_deleted = abap_false.
*       Only add counter if the line was not deleted...
        lp_counter = lp_counter + 1.
      endif.
      describe table ddic_e071 lines lp_total.
      me-&gt;progress_indicator( exporting im_counter = lp_counter
                                        im_object  = ddic_e071_line-obj_name
                                        im_total   = lp_total
                                        im_text    = &apos;DDIC not transported...&apos;(051)
                                        im_flag    = &apos; &apos; ).
    endloop.
*   Rebuild ddic_objects list
    refresh: ddic_objects.
    loop at ddic_e071 into ddic_e071_line.
      append ddic_e071_line-obj_name to ddic_objects.
    endloop.
    sort ddic_objects.
    delete adjacent duplicates from ddic_objects.
*   Show the progress indicator
    call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      exporting
        text = &apos;Retrieving Where Used list&apos;(052).
* Build the WHERE_USED list for all remaining objects
    call function &apos;RS_EU_CROSSREF&apos;
      exporting
        i_find_obj_cls           = &apos;DT&apos;
        no_dialog                = &apos;X&apos;
      importing
        o_scope_obj_cls          = lp_scope
        o_answer                 = lp_answer
      tables
        i_findstrings            = ddic_objects
        o_founds                 = where_used
      exceptions
        not_executed             = 0
        not_found                = 0
        illegal_object           = 0
        no_cross_for_this_object = 0
        batch                    = 0
        batchjob_error           = 0
        wrong_type               = 0
        object_not_exist         = 0
        others                   = 0.
* Remove all entries from the where used list that are not existing
* in tables DD01L, DD02L or DD04L
    data: lp_string type string.
    loop at where_used into where_used_line.
* DD01L (Domains)
      select single domname
                    from dd01l into lp_string
                    where domname = where_used_line-used_obj. &quot;#EC CI_SEL_NESTED
      if sy-subrc &lt;&gt; 0.
* DD02L (SAP-tables)
        select single tabname
                      from dd02l into lp_string
                      where tabname = where_used_line-used_obj. &quot;#EC CI_SEL_NESTED
        if sy-subrc &lt;&gt; 0.
* DD04L (Data elements)
          select single rollname
                        from dd04l into lp_string
                        where rollname = where_used_line-used_obj. &quot;#EC CI_SEL_NESTED
        endif.
      endif.
      if sy-subrc &lt;&gt; 0.
        delete where_used index sy-tabix.
      endif.
    endloop.
  endmethod.                    &quot;set_where_used

  method get_import_datetime_qas.
    data: ta_stms_wbo_requests type table of stms_wbo_request,
          st_stms_wbo_requests type stms_wbo_request.
    data: st_systems           type ctslg_system.
*   Get the last date the object was imported
    call function &apos;TR_READ_GLOBAL_INFO_OF_REQUEST&apos;
      exporting
        iv_trkorr = im_trkorr
      importing
        es_cofile = st_request-cofile.
    loop at st_request-cofile-systems into  st_systems
                                      where systemid = me-&gt;qas_system.
*               Get the latest import date:
      describe table st_systems-steps lines tp_lines.
      read table st_systems-steps into st_steps
                                  index tp_lines.
      describe table st_steps-actions lines tp_lines.
      read table st_steps-actions into st_actions
                                  index tp_lines.
      move st_actions-time to ex_as4time.
      move st_actions-date to ex_as4date.
    endloop.
    ex_return = sy-subrc.
  endmethod.                    &quot;get_import_datetime_qas

  method go_back_months.
    data: begin of dat,
            jjjj(4) ,
            mm(2) ,
            tt(2) ,
          end of dat,

          begin of hdat,
            jjjj(4) ,
            mm(2) ,
            tt(2) ,
          end of hdat,
          newmm    type p,
          diffjjjj type p.

    write:  im_currdate+0(4) to dat-jjjj,
            im_currdate+4(2) to  dat-mm,
            im_currdate+6(2) to  dat-tt.
    diffjjjj =   ( dat-mm + ( - im_backmonths ) - 1 ) div 12.
    newmm    =   ( dat-mm + ( - im_backmonths ) - 1 ) mod 12 + 1.
    dat-jjjj = dat-jjjj +  diffjjjj.

    if newmm &lt; 10.
      write &apos;0&apos; to  dat-mm+0(1).
      write newmm to  dat-mm+1(1).
    else.
      write newmm to  dat-mm.
    endif.
    if dat-tt &gt; &apos;28&apos;.
      hdat-tt = &apos;01&apos;.
      newmm   = ( dat-mm  )  mod 12 + 1.
      hdat-jjjj = dat-jjjj + ( (  dat-mm ) div 12 ).

      if newmm &lt; 10.
        write &apos;0&apos; to hdat-mm+0(1).
        write newmm to hdat-mm+1(1).
      else.
        write newmm to hdat-mm.
      endif.

      if dat-tt = &apos;31&apos;.
        re_date = hdat.
        re_date = re_date - 1.
      else.
        if dat-mm = &apos;02&apos;.
          re_date = hdat.
          re_date = re_date - 1.
        else.
          re_date = dat.
        endif.
      endif.
    else.
      re_date = dat.
    endif.
  endmethod.                    &quot;go_back_months

endclass.                    &quot;lcl_ztct IMPLEMENTATION

*--------------------------------------------------------------------*
*       DATA SELECT
*--------------------------------------------------------------------*
start-of-selection.

  if rf_ztct is not bound.
    try .
        create object rf_ztct.
      catch cx_root into rf_root.
        tp_msg = rf_root-&gt;get_text( ).
        concatenate &apos;ERROR:&apos;(038) tp_msg into tp_msg separated by space.
        message tp_msg type &apos;E&apos;.
    endtry.
  endif.

  tp_prefix = rf_ztct-&gt;get_tp_prefix( im_dev = pa_dev ).

  if pa_sel = abap_true.
    tp_process_type = 1.
  else.
    tp_process_type = 3.
  endif.

  if tp_process_type = 1.
*   Get transports
    call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      exporting
        text = &apos;Selecting data...&apos;(014).
*   Join over E070, E071:
*   Description is read later to prevent complicated join and
*   increased runtime
    st_trkorr_range-sign   = &apos;I&apos;.
    st_trkorr_range-option = &apos;EQ&apos;.
    select a~trkorr
           into st_trkorr_range-low
           from  e070 as a join e071 as b
             on  a~trkorr = b~trkorr
           where a~trkorr     in so_korr
           and   a~as4user    in so_user
           and   a~as4date    in so_date
           and   b~obj_name   in so_exobj
           and   strkorr      = &apos;&apos;
           and   a~trkorr     like tp_prefix
           and   not a~trkorr in ra_project_trkorrs
           and   ( pgmid = &apos;LIMU&apos; or
                   pgmid = &apos;R3TR&apos; ).
      append st_trkorr_range to ta_trkorr_range.
    endselect.
*   Read transport description:
    if ta_trkorr_range[] is not initial.
      loop at ta_trkorr_range into st_trkorr_range.
*       Check if the description contains the search string
        select single as4text
                      from e07t into tp_transport_descr
                      where  trkorr = st_trkorr_range-low
                      and    langu  = sy-langu.      &quot;#EC CI_SEL_NESTED
        if pa_str cs &apos;*&apos;.
          if tp_transport_descr np pa_str.
            delete ta_trkorr_range index sy-tabix.
            continue.
          endif.
        else.
          if tp_transport_descr ns pa_str.
            delete ta_trkorr_range index sy-tabix.
            continue.
          endif.
        endif.
*       Check if the project is in the selection range
        select reference
               from e070a
               up to 1 rows
               into  tp_project_reference
               where trkorr = st_trkorr_range-low
               and   attribute = &apos;SAP_CTS_PROJECT&apos;.  &quot;#EC CI_SEL_NESTED
          if not tp_project_reference in so_proj.
            delete ta_trkorr_range index sy-tabix.
          endif.
        endselect.
      endloop.
      sort ta_trkorr_range.
      delete adjacent duplicates from ta_trkorr_range.
    endif.
  endif.

  ta_project_range[]    = so_proj[].
  ta_excluded_objects[] = so_exobj[].
  ta_date_range[]       = so_date[].

end-of-selection.

*--------------------------------------------------------------------*
*       Main program
*--------------------------------------------------------------------*
  if ta_trkorr_range is initial and
     tp_process_type = 1.
    message i000(db) display like &apos;E&apos;
                     with &apos;No transports found...&apos;(m13).
  else.
    perform init_ztct.
    rf_ztct-&gt;execute( ).
  endif.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  INIT_ZTCT
*&amp;---------------------------------------------------------------------*
form init_ztct.
  rf_ztct-&gt;set_check_flag( pa_check ).
  rf_ztct-&gt;set_check_tabkeys( pa_chkky ).
  rf_ztct-&gt;set_clear_checked( pa_chd ).
  rf_ztct-&gt;set_skip_buffer_chk( pa_buff ).
  rf_ztct-&gt;set_skiplive( pa_noprd ).
  rf_ztct-&gt;set_user_layout( pa_user ).
  rf_ztct-&gt;set_trkorr_range( ta_trkorr_range ).
  rf_ztct-&gt;set_project_range( ta_project_range ).
  rf_ztct-&gt;set_date_range( ta_date_range ).
  rf_ztct-&gt;set_excluded_objects( ta_excluded_objects ).
  rf_ztct-&gt;set_search_string( pa_str ).
  rf_ztct-&gt;set_process_type( tp_process_type ).
  rf_ztct-&gt;set_filename( pa_file ).
  rf_ztct-&gt;set_systems( exporting im_dev_system = pa_dev
                                  im_qas_system = pa_qas
                                  im_prd_system = pa_prd ).
endform.                    &quot; INIT_ZTCT</source>
 </PROG>
</nugget>
