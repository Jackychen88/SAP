<?xml version="1.0" encoding="utf-8"?>
<nugget name="CREATE_DATAELEMTS">
 <CLAS CLSNAME="ZCL_SD_TOOL_FILE" VERSION="1" LANGU="1" DESCRIPT="文件转换工具" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="TY_FTP_RESULT" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="9 " SRCCOLUMN1="4 " SRCROW2="11 " SRCCOLUMN2="23 " TYPESRC_LENG="0 " TYPESRC="BEGIN OF TY_FTP_RESULT,
      LINE(200) TYPE C,
    END OF TY_FTP_RESULT
"/>
  <types CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="TTY_FTP_RESULT" VERSION="1" LANGU="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="13 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="54 " TYPESRC_LENG="0 " TYPESRC="TTY_FTP_RESULT TYPE STANDARD TABLE OF TY_FTP_RESULT
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <typeUsage CLSNAME="ZCL_SD_TOOL_FILE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <attribute CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="C_E" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="2" ATTVALUE="&apos;E&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR1" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="C_ON" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CHAR1" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" VERSION="1" LANGU="1" DESCRIPT="检查栏位值" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="IV_FIELDNAME" VERSION="1" LANGU="1" DESCRIPT="字段名" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="FIELDNAME" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="IV_TYPE_KIND" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ABAP_TYPEKIND"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="IV_MAX_LENGTH" VERSION="1" LANGU="1" DESCRIPT="长度（字符数）" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DDLENG"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="IV_FIELDTEXT" VERSION="1" LANGU="1" DESCRIPT="资源库对象的简短描述" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="AS4TEXT"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="FS_I_VALUE_RAW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="FS_O_VALUE_TO" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD CHECK_FIELD.
    DATA:
      LV_TXT           TYPE MSGTXT,
      LV_QTY_C         TYPE CHAR20,
      LV_DATA_C        TYPE CHAR10,
      LV_LENGTH        TYPE I,
      LV_FLAG_OVERFLOW TYPE CHAR1,
      LV_FLAG_WRONG    TYPE CHAR1.

    CLEAR OV_FLG_ERR.
    CHECK FS_I_VALUE_RAW IS NOT INITIAL.
    CASE IV_TYPE_KIND.

      WHEN CL_ABAP_STRUCTDESCR=&gt;TYPEKIND_CHAR.    &quot;Character Fields

        LV_LENGTH = STRLEN( FS_I_VALUE_RAW ).

        IF LV_LENGTH &lt;= IV_MAX_LENGTH.
          FS_O_VALUE_TO = FS_I_VALUE_RAW.
          IF IV_FIELDNAME CS &apos;TMARK&apos; OR
            IV_FIELDNAME CS &apos;BMARK&apos;.

            DATA: MOFF TYPE I,
                  MLEN TYPE I.
*           匹配前空格或者制表符号，替换为空
            FIND REGEX &apos;^(\s+)&apos; IN FS_O_VALUE_TO
                 MATCH OFFSET MOFF
                 MATCH LENGTH MLEN.
            IF SY-SUBRC = 0 and MOFF &gt;= 0.
              REPLACE ALL OCCURRENCES OF REGEX &apos;\s&apos;
                IN SECTION OFFSET MOFF LENGTH MLEN OF FS_O_VALUE_TO WITH &apos;空&apos; .
            ENDIF.
          ENDIF.

        ELSE.
          LV_FLAG_OVERFLOW = C_ON.
        ENDIF.

      WHEN CL_ABAP_STRUCTDESCR=&gt;TYPEKIND_PACKED.  &quot;Quantity Fields

        IF FS_I_VALUE_RAW IS INITIAL.
          FS_O_VALUE_TO = 0.
        ELSE.
          CLEAR LV_QTY_C.
          CONDENSE FS_I_VALUE_RAW.
          CALL FUNCTION &apos;CATS_NUMERIC_INPUT_CHECK&apos;
            EXPORTING
              INPUT      = FS_I_VALUE_RAW
            IMPORTING
              OUTPUT     = LV_QTY_C
            EXCEPTIONS
              NO_NUMERIC = 1
              OTHERS     = 2.
          IF SY-SUBRC = 0.
            TRY .
                CONDENSE LV_QTY_C.
                FS_O_VALUE_TO = LV_QTY_C.
              CATCH CX_SY_CONVERSION_OVERFLOW.
                LV_FLAG_OVERFLOW = C_ON.
            ENDTRY.
          ELSE.
            LV_FLAG_WRONG = C_ON.
          ENDIF.
        ENDIF.

      WHEN CL_ABAP_STRUCTDESCR=&gt;TYPEKIND_NUM. &quot;Numeric Fields
*        BREAK-POINT &apos;00052576&apos;.  &quot;暂时MES订单不需要
        FS_O_VALUE_TO = FS_I_VALUE_RAW.
      WHEN CL_ABAP_STRUCTDESCR=&gt;TYPEKIND_DATE.  &quot;Date Fields
*
        IF FS_I_VALUE_RAW IS NOT INITIAL.

          LV_LENGTH = STRLEN( FS_I_VALUE_RAW ).

          IF LV_LENGTH &lt;= 10.
            LV_DATA_C  = FS_I_VALUE_RAW.
            CLEAR FS_O_VALUE_TO.

*           转换日期的内外部格式
            CONVERT_DATE( EXPORTING I_DATE = LV_DATA_C
                          CHANGING  O_DATE = FS_O_VALUE_TO ).

            IF FS_O_VALUE_TO IS INITIAL.
              LV_FLAG_WRONG = C_ON.
            ENDIF.
          ELSE.
            LV_FLAG_OVERFLOW = C_ON.
          ENDIF.

        ENDIF.
      WHEN CL_ABAP_STRUCTDESCR=&gt;TYPEKIND_STRING. &quot;String
        FS_O_VALUE_TO = FS_I_VALUE_RAW.
      WHEN OTHERS.
    ENDCASE.

*   overflow err message
    IF LV_FLAG_OVERFLOW = C_ON.
      OV_FLG_ERR = C_ON.
*     上传文件的项目值(&amp;1)超过了最大长度(&amp;2)
      MESSAGE E228(ZSD01) WITH IV_FIELDTEXT IV_MAX_LENGTH INTO LV_TXT.
      RETURN.
    ENDIF.

    IF LV_FLAG_WRONG = C_ON.
      OV_FLG_ERR = C_ON.
*      上传文件的项目值(&amp;1)不正确
      MESSAGE E229(ZSD01) WITH IV_FIELDTEXT INTO LV_TXT.
      RETURN.
    ENDIF.


  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" VERSION="1" LANGU="1" DESCRIPT="检查栏位值(长文本)" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="IV_MAX_LENGTH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="DDLENG"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="IV_FIELDTEXT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="AS4TEXT"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="FS_I_VALUE_RAW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="FS_O_VALUE_TO" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="FS_O_VALUE_TO_HASTEXT" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="FS_O_VALUE_TO_LONGTEXT" VERSION="1" LANGU="1" DESCRIPT="文本行" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="WCB_TDLINE_TAB"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CHECK_FIELD_LONGTEXT" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <source>METHOD CHECK_FIELD_LONGTEXT.
    DATA:
      LV_TXT       TYPE MSGTXT,
      LV_LENGTH    TYPE I,
      LT_TEXT      TYPE WCB_TDLINE_TAB.

    LV_LENGTH = STRLEN( FS_I_VALUE_RAW ).

*   长文本长度检查
    IF LV_LENGTH &lt;= IV_MAX_LENGTH.
      FS_O_VALUE_TO = FS_I_VALUE_RAW.
    ELSEIF LV_LENGTH &gt; 2000.
*     overflow err message
      OV_FLG_ERR = C_ON.
*     上传文件的项目值(&amp;1)超过了最大长度(&amp;2)
      MESSAGE E228(ZSD01) WITH IV_FIELDTEXT 2000 INTO LV_TXT.
      RETURN.
    ELSE.

      CALL FUNCTION &apos;CONVERT_STRING_TO_TABLE&apos;
        EXPORTING
          I_STRING         = FS_I_VALUE_RAW
          I_TABLINE_LENGTH = 132
        TABLES
          ET_TABLE         = LT_TEXT.

      FS_O_VALUE_TO_LONGTEXT = LT_TEXT.
      IF LT_TEXT IS INITIAL.
        CLEAR FS_O_VALUE_TO_HASTEXT.
      ELSE.
        FS_O_VALUE_TO_HASTEXT = C_ON.
        LOOP AT LT_TEXT ASSIGNING FIELD-SYMBOL(&lt;FS_TEXT&gt;).
          FS_O_VALUE_TO = FS_O_VALUE_TO &amp;&amp; &lt;FS_TEXT&gt;.
        ENDLOOP.

      ENDIF.

    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_DATE" VERSION="1" LANGU="1" DESCRIPT="转换日期格式" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_DATE" SCONAME="I_DATE" VERSION="1" LANGU="1" DESCRIPT="字符字段长度 = 10" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR10"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_DATE" SCONAME="O_DATE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="D"/>
   <source>METHOD CONVERT_DATE.
    DATA: L_ROOT TYPE REF TO CX_ROOT. &quot;exception root class

    DATA: LV_COUNT TYPE I,
          LV_DATE  TYPE STRING,
          LV_DATFM TYPE XUDATFM. &quot;Date format

    CONSTANTS: LC_ISLAM_DATE1 TYPE XUDATFM VALUE &apos;A&apos;,
               LC_ISLAM_DATE2 TYPE XUDATFM VALUE &apos;B&apos;,
               LC_IRAN_DATE   TYPE XUDATFM VALUE &apos;C&apos;.

* Check date is not be blank value
    IF I_DATE IS NOT INITIAL.

* There are 12 date formats supported by SAP so it is necessary to loop
* through them to identify the date format used for inputted date

      DO 12 TIMES. &quot;First 9 format in numeric value

        ADD 1 TO LV_COUNT.

        IF LV_COUNT &lt; 10.

          LV_DATFM = LV_COUNT.

        ELSE.

          CASE LV_COUNT.

            WHEN 10.

              LV_DATFM = LC_ISLAM_DATE1.

            WHEN 11.

              LV_DATFM = LC_ISLAM_DATE2.

            WHEN 12.

              LV_DATFM = LC_IRAN_DATE.

          ENDCASE.

        ENDIF.

        CLEAR L_ROOT.

        TRY.

            CALL METHOD CL_ABAP_DATFM=&gt;CONV_DATE_EXT_TO_INT
              EXPORTING
                IM_DATEXT   = I_DATE
                IM_DATFMDES = LV_DATFM
              IMPORTING
                EX_DATINT   = O_DATE.
*              EX_DATFMUSED = EX_DATFMUSED.

          CATCH CX_ABAP_DATFM_NO_DATE INTO L_ROOT ##NO_HANDLER.
          CATCH CX_ABAP_DATFM_INVALID_DATE INTO L_ROOT ##NO_HANDLER.
          CATCH CX_ABAP_DATFM_FORMAT_UNKNOWN INTO L_ROOT ##NO_HANDLER.
          CATCH CX_ABAP_DATFM_AMBIGUOUS INTO L_ROOT ##NO_HANDLER.

        ENDTRY.

        IF L_ROOT IS INITIAL AND NOT O_DATE IS INITIAL.

          EXIT.

        ENDIF.

      ENDDO.

    ENDIF.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" VERSION="1" LANGU="1" DESCRIPT="转换原始（String）数据到SAP内部结构" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IV_FLG_REF" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IV_STRUCT_RAW" VERSION="1" LANGU="1" DESCRIPT="原始结构名称" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IV_STRUCT_SAP" VERSION="1" LANGU="1" DESCRIPT="SAP内部结构名称" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IR_DATA_RAW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IR_DATA_SAP" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="IT_FILE_RAW" VERSION="1" LANGU="1" DESCRIPT="原始文件内表" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="OT_FILE_SAP" VERSION="1" LANGU="1" DESCRIPT="SAP内部文件内表" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="CONVERT_RAW_TO_SAP" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="8 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD CONVERT_RAW_TO_SAP.

    DATA:
      LV_FLG_ERR  TYPE CHAR1,
      LT_DDIC_SAP TYPE DDFIELDS,
      LS_DDIC_SAP TYPE DFIES,
      LT_DDIC_RAW TYPE DDFIELDS,
      LS_DDIC_RAW TYPE DFIES.

    DATA:
      LO_ITEM_DATA   TYPE REF TO DATA,
      LO_STRUCTDESCR TYPE REF TO CL_ABAP_STRUCTDESCR.

    DATA:
      LR_ELEMDESCR TYPE REF TO CL_ABAP_ELEMDESCR,
      LT_COMP_RAW  TYPE CL_ABAP_STRUCTDESCR=&gt;COMPONENT_TABLE,
      LT_COMP_SAP  TYPE CL_ABAP_STRUCTDESCR=&gt;COMPONENT_TABLE.


    FIELD-SYMBOLS:
      &lt;FS_ITEM_SAP&gt;    TYPE ANY,
      &lt;FS_L_VALUE_RAW&gt; TYPE ANY,
      &lt;FS_L_VALUE_TO&gt;  TYPE ANY.

*   1.获取文件的结构
*   1.1.获取原始文件的结构
    CLEAR LO_STRUCTDESCR.
    IF IV_FLG_REF IS INITIAL.
      LO_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=&gt;DESCRIBE_BY_NAME( IV_STRUCT_RAW ).
      LT_DDIC_RAW = LO_STRUCTDESCR-&gt;GET_DDIC_FIELD_LIST( ).
    ELSE.
      LO_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=&gt;DESCRIBE_BY_DATA_REF( IR_DATA_RAW ).
      LT_COMP_RAW = LO_STRUCTDESCR-&gt;GET_COMPONENTS( ).
      LOOP AT LT_COMP_RAW INTO DATA(LS_COMP).
        CLEAR LS_DDIC_RAW.
        LS_DDIC_RAW-FIELDNAME = LS_COMP-NAME.
        LS_DDIC_RAW-INTTYPE   = LS_COMP-TYPE-&gt;TYPE_KIND.
        LR_ELEMDESCR ?= LS_COMP-TYPE  .
        LS_DDIC_RAW-LENG      = LR_ELEMDESCR-&gt;OUTPUT_LENGTH.
        APPEND LS_DDIC_RAW TO LT_DDIC_RAW.
      ENDLOOP.
    ENDIF.


*   1.2.获取SAP界面文件的结构
    CLEAR LO_STRUCTDESCR.
    IF IV_FLG_REF IS INITIAL.
      LO_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=&gt;DESCRIBE_BY_NAME( IV_STRUCT_SAP ).
      LT_DDIC_SAP = LO_STRUCTDESCR-&gt;GET_DDIC_FIELD_LIST( ).
    ELSE.
      LO_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=&gt;DESCRIBE_BY_DATA_REF( IR_DATA_SAP ).
      LT_COMP_SAP = LO_STRUCTDESCR-&gt;GET_COMPONENTS( ).
      LOOP AT LT_COMP_SAP INTO LS_COMP.
        CLEAR LS_DDIC_SAP.
        LS_DDIC_SAP-FIELDNAME = LS_COMP-NAME.
        LS_DDIC_SAP-INTTYPE   = LS_COMP-TYPE-&gt;TYPE_KIND.
        LR_ELEMDESCR ?= LS_COMP-TYPE  .
        LS_DDIC_SAP-LENG      = LR_ELEMDESCR-&gt;OUTPUT_LENGTH.
        APPEND LS_DDIC_SAP TO LT_DDIC_SAP.
      ENDLOOP.
    ENDIF.


    CREATE DATA LO_ITEM_DATA TYPE HANDLE LO_STRUCTDESCR.&quot;使用结构类型对象来创建结构对象
    ASSIGN LO_ITEM_DATA-&gt;* TO &lt;FS_ITEM_SAP&gt;.

    CHECK &lt;FS_ITEM_SAP&gt; IS ASSIGNED.

*   2.开始转换主体明细from RAW ---&gt; SAP
    LOOP AT IT_FILE_RAW ASSIGNING FIELD-SYMBOL(&lt;FS_FILE_RAW&gt;).&quot;INTO DATA(LS_FILE_RAW).
      CLEAR:
       &lt;FS_ITEM_SAP&gt;,
       LV_FLG_ERR.

*     2.1.编辑主体明细中每个栏位
      LOOP AT LT_DDIC_RAW INTO LS_DDIC_RAW.

*       检查和转换文件中的原始数据
        UNASSIGN &lt;FS_L_VALUE_RAW&gt;.
        ASSIGN COMPONENT LS_DDIC_RAW-FIELDNAME OF STRUCTURE &lt;FS_FILE_RAW&gt;
         TO &lt;FS_L_VALUE_RAW&gt;.
        IF &lt;FS_L_VALUE_RAW&gt; IS ASSIGNED AND &lt;FS_L_VALUE_RAW&gt; IS NOT INITIAL.

*         匹配Field id一致的内部格式栏位
          READ TABLE LT_DDIC_SAP INTO LS_DDIC_SAP
          WITH KEY FIELDNAME = LS_DDIC_RAW-FIELDNAME.
          IF SY-SUBRC = 0.

            UNASSIGN &lt;FS_L_VALUE_TO&gt;.
            ASSIGN COMPONENT LS_DDIC_RAW-FIELDNAME OF STRUCTURE &lt;FS_ITEM_SAP&gt;
             TO &lt;FS_L_VALUE_TO&gt;.
            IF &lt;FS_L_VALUE_TO&gt; IS ASSIGNED.
*             检查栏位和转换值
              ZCL_SD_TOOL_FILE=&gt;CHECK_FIELD(
                EXPORTING
                  IV_TYPE_KIND   = LS_DDIC_SAP-INTTYPE  &quot;实际的类型
                  IV_MAX_LENGTH  = LS_DDIC_SAP-LENG     &quot;实际栏位长度
                  IV_FIELDTEXT   = LS_DDIC_SAP-FIELDTEXT &quot;上传文件的栏位描述
                  FS_I_VALUE_RAW = &lt;FS_L_VALUE_RAW&gt;      &quot;上传的值
                CHANGING
                  FS_O_VALUE_TO  = &lt;FS_L_VALUE_TO&gt;       &quot;解析后的值
                  OV_FLG_ERR     = LV_FLG_ERR
                  ).
            ENDIF.

          ENDIF.
        ENDIF.

        IF LV_FLG_ERR IS NOT INITIAL.
          EXIT.
        ENDIF.

      ENDLOOP.

      IF LV_FLG_ERR IS NOT INITIAL.
        OV_FLG_ERR = C_ON.
        CONTINUE.
      ENDIF.

      APPEND &lt;FS_ITEM_SAP&gt; TO OT_FILE_SAP.

    ENDLOOP.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" VERSION="1" LANGU="1" DESCRIPT="下载FPT文件到本地" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="IV_URI" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="USER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="SPWD" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="HOST" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="IV_LPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="OV_LPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="DOWNLOAD_FTP_TO_LOCAL" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="7 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD DOWNLOAD_FTP_TO_LOCAL.
    DATA:
      LV_FPATH(255)   TYPE C,
      LV_FFILE(255)   TYPE C,
      LV_SEP          TYPE C,
      LV_RC           TYPE I,
      LV_RESULT       TYPE ABAP_BOOL,
      LV_DIR          TYPE STRING,
      LV_LPATH        TYPE STRING,
      LV_LPATH_C(255) TYPE C.

********************************
* 1.获取电脑的默认本地地址和分隔符
********************************
    IF IV_LPATH IS NOT SUPPLIED.
*     获取SAP安装路径
      CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;GET_SAPGUI_WORKDIR
        CHANGING
          SAPWORKDIR            = LV_LPATH
        EXCEPTIONS
          GET_SAPWORKDIR_FAILED = 1
          CNTL_ERROR            = 2
          ERROR_NO_GUI          = 3
          NOT_SUPPORTED_BY_GUI  = 4
          OTHERS                = 5.
    ELSE.
      LV_LPATH = IV_LPATH.
    ENDIF.
    IF LV_LPATH IS INITIAL.
      LV_LPATH = &apos;C:\&apos;.
    ENDIF.

*   操作系统分隔符
    CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;GET_FILE_SEPARATOR
      CHANGING
        FILE_SEPARATOR       = LV_SEP
      EXCEPTIONS
        NOT_SUPPORTED_BY_GUI = 1
        ERROR_NO_GUI         = 2
        CNTL_ERROR           = 3
        OTHERS               = 4.

********************************
*   2.拆分路径和文件
********************************
    ZCL_SD_TOOL_FILE=&gt;FTP_SPLIT_FILEPATH(
      EXPORTING
        IV_URI = IV_URI
      CHANGING
        OV_FPATH = LV_FPATH
        OV_FFILE = LV_FFILE
    ).

********************************
* 3.拼接待生成本地文件的地址
********************************
    CONCATENATE LV_LPATH
                LV_FFILE
           INTO LV_DIR SEPARATED BY LV_SEP.

    OV_LPATH = LV_DIR.
********************************
* 4.文件夹创建 + 清空
********************************
    CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_EXIST
      EXPORTING
        FILE                 = LV_DIR
      RECEIVING
        RESULT               = LV_RESULT
      EXCEPTIONS
        CNTL_ERROR           = 1
        ERROR_NO_GUI         = 2
        WRONG_PARAMETER      = 3
        NOT_SUPPORTED_BY_GUI = 4
        OTHERS               = 5.
    IF SY-SUBRC = 0.
*    文件存在则删除文件
      IF LV_RESULT IS NOT INITIAL.
        CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_DELETE
          EXPORTING
            FILENAME             = LV_DIR
          CHANGING
            RC                   = LV_RC
          EXCEPTIONS
            FILE_DELETE_FAILED   = 1
            CNTL_ERROR           = 2
            ERROR_NO_GUI         = 3
            FILE_NOT_FOUND       = 4
            ACCESS_DENIED        = 5
            UNKNOWN_ERROR        = 6
            NOT_SUPPORTED_BY_GUI = 7
            WRONG_PARAMETER      = 8
            OTHERS               = 9.
        IF SY-SUBRC &lt;&gt; 0.
*          删除失败不处理
        ENDIF.
      ENDIF.

    ENDIF.

********************************
* 5. FTP下载到PC
********************************
    DATA:
      LV_SPWD(30) TYPE C,
      LV_HANDLE   TYPE I.

*   1.FTP连接
    LV_SPWD = SPWD.
    ZCL_SD_TOOL_FILE=&gt;FTP_CONNECT(
      EXPORTING
        IV_USER = USER
        IV_HOST = HOST
      CHANGING
        OV_SPWD = LV_SPWD
        OV_HANDLE = LV_HANDLE
        OV_FLG_ERR = OV_FLG_ERR
    ).
    IF OV_FLG_ERR IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE &apos;S&apos; NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE &apos;E&apos;.
*   FTP断开
      ZCL_SD_TOOL_FILE=&gt;FTP_DISCONNECT(
        EXPORTING
          IV_HANDLE = LV_HANDLE
      ).
      RETURN.
    ENDIF.

*   3.下载FTP到本地
    LV_LPATH_C = LV_LPATH.
    ZCL_SD_TOOL_FILE=&gt;FTP_GET_FILE(
      EXPORTING
      IV_HANDLE    = LV_HANDLE
      IV_LPATH     = LV_LPATH_C
      IV_FPATH     = LV_FPATH
      IV_FPATHFILE = LV_FFILE
        CHANGING
          OV_FLG_ERR = OV_FLG_ERR
    ).
    IF OV_FLG_ERR IS NOT INITIAL.
      MESSAGE ID SY-MSGID TYPE &apos;S&apos; NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 DISPLAY LIKE &apos;E&apos;.
*       FTP断开
      ZCL_SD_TOOL_FILE=&gt;FTP_DISCONNECT(
        EXPORTING
          IV_HANDLE = LV_HANDLE
      ).
      RETURN.
    ENDIF.

* 5.FTP断开
    ZCL_SD_TOOL_FILE=&gt;FTP_DISCONNECT(
      EXPORTING
        IV_HANDLE = LV_HANDLE
    ).
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" VERSION="1" LANGU="1" DESCRIPT="FTP连接" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="IV_USER" VERSION="1" LANGU="1" DESCRIPT="FTP登陆用户名" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="IV_HOST" VERSION="1" LANGU="1" DESCRIPT="FTP地址 端口" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="IV_RFCDEST" VERSION="1" LANGU="1" DESCRIPT="SAPFTP:本机作为客户端 SAPFTPA:SAP服务器作为客户端" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PARVALUE="&apos;SAPFTP&apos;"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="OV_SPWD" VERSION="1" LANGU="1" DESCRIPT="密码" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="OV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_CONNECT" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD FTP_CONNECT.

    DATA:
      LV_TXT TYPE MSGTXT,
      LV_SLEN TYPE I,
      LV_KEY  TYPE I VALUE 26101957.

*   密码加密
    LV_SLEN = STRLEN( OV_SPWD ).
    CALL FUNCTION &apos;HTTP_SCRAMBLE&apos;
      EXPORTING
        SOURCE      = OV_SPWD
        SOURCELEN   = LV_SLEN
        KEY         = LV_KEY
      IMPORTING
        DESTINATION = OV_SPWD.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LV_TXT.
      RETURN.
    ENDIF.

*    连接FTP
    CALL FUNCTION &apos;FTP_CONNECT&apos;
      EXPORTING
        USER            = IV_USER
        PASSWORD        = OV_SPWD
        HOST            = IV_HOST
        RFC_DESTINATION = IV_RFCDEST
      IMPORTING
        HANDLE          = OV_HANDLE
      EXCEPTIONS
        NOT_CONNECTED   = 1
        OTHERS          = 2.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4 INTO LV_TXT.
      RETURN.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_DISCONNECT" VERSION="1" LANGU="1" DESCRIPT="断开FTP连接" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_DISCONNECT" SCONAME="IV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_DISCONNECT" SCONAME="IV_RFCDEST" VERSION="1" LANGU="1" DESCRIPT="逻辑目标（在函数调用中指定）" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PARVALUE="&apos;SAPFTP&apos;"/>
   <source>METHOD FTP_DISCONNECT.

    CALL FUNCTION &apos;FTP_DISCONNECT&apos;
      EXPORTING
        HANDLE = IV_HANDLE.

    CALL FUNCTION &apos;RFC_CONNECTION_CLOSE&apos;
      EXPORTING
        DESTINATION = IV_RFCDEST
      EXCEPTIONS
        OTHERS      = 1.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" VERSION="1" LANGU="1" DESCRIPT="下载文件到FTP" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" SCONAME="IV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" SCONAME="IV_LPATH" VERSION="1" LANGU="1" DESCRIPT="本地文件，包含路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" SCONAME="IV_FPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" SCONAME="IV_FPATHFILE" VERSION="1" LANGU="1" DESCRIPT="FTP路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_GET_FILE" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD FTP_GET_FILE.
    DATA:
      LV_TXT         TYPE MSGTXT,
      COMMETEXT(255) TYPE C,
      COMPRESS       TYPE C VALUE &apos;N&apos;,
      LT_RESULT      TYPE TTY_FTP_RESULT.

    IF IV_FPATH IS NOT INITIAL.
      CONCATENATE &apos;cd&apos; IV_FPATH INTO COMMETEXT SEPARATED BY SPACE.
      CALL FUNCTION &apos;FTP_COMMAND&apos;
        EXPORTING
          HANDLE        = IV_HANDLE
          COMMAND       = COMMETEXT
          COMPRESS      = COMPRESS
        TABLES
          DATA          = LT_RESULT
        EXCEPTIONS
          TCPIP_ERROR   = 1
          COMMAND_ERROR = 2
          DATA_ERROR    = 3
          OTHERS        = 4.
      IF SY-SUBRC &lt;&gt; 0.
        OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO DATA(LS_RESULT) INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
        RETURN.
      ENDIF.
    ENDIF.

    CLEAR LT_RESULT.
    IF IV_LPATH IS NOT INITIAL.
      CONCATENATE &apos;lcd&apos; IV_LPATH INTO COMMETEXT SEPARATED BY SPACE.
      CALL FUNCTION &apos;FTP_COMMAND&apos;
        EXPORTING
          HANDLE        = IV_HANDLE
          COMMAND       = COMMETEXT
          COMPRESS      = COMPRESS
        TABLES
          DATA          = LT_RESULT
        EXCEPTIONS
          TCPIP_ERROR   = 1
          COMMAND_ERROR = 2
          DATA_ERROR    = 3
          OTHERS        = 4.
      IF SY-SUBRC &lt;&gt; 0.
        OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
        RETURN.
      ENDIF.

    ENDIF.

    CLEAR LT_RESULT.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = &apos;binary&apos;
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
      READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
      MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
      RETURN.
    ENDIF.

    CLEAR LT_RESULT.
    IV_FPATHFILE = &apos;&quot;&apos; &amp;&amp; IV_FPATHFILE &amp;&amp; &apos;&quot;&apos;.

    CONCATENATE &apos;get&apos; IV_FPATHFILE INTO COMMETEXT SEPARATED BY SPACE.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = COMMETEXT
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
      READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
      MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.

      RETURN.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_MOVE_FILE" VERSION="1" LANGU="1" DESCRIPT="移动文件到FTP" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_MOVE_FILE" SCONAME="IV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_MOVE_FILE" SCONAME="IV_FFILEPATH_F" VERSION="1" LANGU="1" DESCRIPT="FTP文件名" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_MOVE_FILE" SCONAME="IV_FFILEPATH_T" VERSION="1" LANGU="1" DESCRIPT="FTP路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_MOVE_FILE" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD FTP_MOVE_FILE.
    DATA:
      LV_TXT         TYPE MSGTXT,
      COMMETEXT(255) TYPE C,
      COMPRESS       TYPE C VALUE &apos;N&apos;,
      LT_RESULT      TYPE TTY_FTP_RESULT.

    CONCATENATE &apos;rename&apos; IV_FFILEPATH_F IV_FFILEPATH_T INTO COMMETEXT SEPARATED BY SPACE.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = COMMETEXT
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO DATA(LS_RESULT) INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
      RETURN.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_NEW_FOLDER" VERSION="1" LANGU="1" DESCRIPT="新建文件夹FTP" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_NEW_FOLDER" SCONAME="IV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_NEW_FOLDER" SCONAME="IV_FPATH" VERSION="1" LANGU="1" DESCRIPT="FTP路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_NEW_FOLDER" SCONAME="IV_FOLDER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_NEW_FOLDER" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD FTP_NEW_FOLDER.
    DATA:
      LV_TXT TYPE MSGTXT,
      COMMETEXT(255) TYPE C,
      COMPRESS       TYPE C VALUE &apos;N&apos;,
      LT_RESULT      TYPE TTY_FTP_RESULT.

*   打开当前文件路径
    IF IV_FPATH IS NOT INITIAL.
      CONCATENATE &apos;cd&apos; IV_FPATH INTO COMMETEXT SEPARATED BY SPACE.
      CALL FUNCTION &apos;FTP_COMMAND&apos;
        EXPORTING
          HANDLE        = IV_HANDLE
          COMMAND       = COMMETEXT
          COMPRESS      = COMPRESS
        TABLES
          DATA          = LT_RESULT
        EXCEPTIONS
          TCPIP_ERROR   = 1
          COMMAND_ERROR = 2
          DATA_ERROR    = 3
          OTHERS        = 4.
      IF SY-SUBRC &lt;&gt; 0.
        OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO DATA(LS_RESULT) INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
        RETURN.
      ENDIF.

    ENDIF.

    CLEAR LT_RESULT.
*   创建新的文件夹
    CONCATENATE &apos;mkdir&apos; IV_FOLDER INTO COMMETEXT SEPARATED BY SPACE.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = COMMETEXT
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
      RETURN.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" VERSION="1" LANGU="1" DESCRIPT="显示FTP的文件列表用于选择" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="IV_USER" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="IV_HOST" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="IV_RFCDEST" VERSION="1" LANGU="1" DESCRIPT="逻辑目标（在函数调用中指定）" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="RFCDEST" PARVALUE="&apos;SAPFTP&apos;"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="OV_SPWD" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_OPEN_FILE_LIST" SCONAME="OV_FILEPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <source>METHOD FTP_OPEN_FILE_LIST.

    DATA:
      LV_FILE        TYPE STRING,
      LV_TXT         TYPE MSGTXT,
      LV_HANDLE      TYPE I,
      LV_SPWD_E      TYPE C LENGTH 30,
      COMMETEXT(255) TYPE C,
      COMPRESS       TYPE C VALUE &apos;N&apos;,
      LT_RESULT      TYPE TTY_FTP_RESULT.

    DATA:
      LV_SIZE           TYPE C LENGTH 11,
      LV_CODE           TYPE C LENGTH 4,
      LV_COUNT          TYPE I,
      LV_LAST_FILE      TYPE STRING,
      LS_FILENAME       TYPE ZSD_S_FTP_FILE,
      LT_FILENAME       TYPE ZSD_T_FTP_FILE,
      LT_FILENAME_CLICK TYPE ZSD_T_FTP_FILE,
      LT_FILENAME_OK    TYPE ZSD_T_FTP_FILE.

    CHECK OV_FILEPATH IS NOT INITIAL.

* 1.FTP连接
    LV_SPWD_E = OV_SPWD.
    ZCL_SD_TOOL_FILE=&gt;FTP_CONNECT(
      EXPORTING
        IV_USER = IV_USER
        IV_HOST = IV_HOST
      CHANGING
        OV_SPWD = OV_SPWD
        OV_HANDLE = LV_HANDLE
        OV_FLG_ERR = OV_FLG_ERR
    ).
    OV_SPWD = LV_SPWD_E.

*---1.打开文件清单
    IF OV_FILEPATH IS NOT INITIAL.

      LV_FILE =  &apos;&quot;&apos; &amp;&amp; OV_FILEPATH &amp;&amp; &apos;&quot;&apos;.
      CONCATENATE &apos;ls&apos; LV_FILE INTO COMMETEXT SEPARATED BY SPACE.
      CLEAR LT_RESULT.
      CALL FUNCTION &apos;FTP_COMMAND&apos;
        EXPORTING
          HANDLE        = LV_HANDLE
          COMMAND       = COMMETEXT
          COMPRESS      = COMPRESS
        TABLES
          DATA          = LT_RESULT
        EXCEPTIONS
          TCPIP_ERROR   = 1
          COMMAND_ERROR = 2
          DATA_ERROR    = 3
          OTHERS        = 4.
      IF SY-SUBRC &lt;&gt; 0.
*      .FTP断开
        ZCL_SD_TOOL_FILE=&gt;FTP_DISCONNECT(
          EXPORTING
            IV_HANDLE = LV_HANDLE
        ).
        OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO DATA(LS_RESULT) INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
        RETURN.
      ENDIF.

    ENDIF.

* 5.FTP断开
    ZCL_SD_TOOL_FILE=&gt;FTP_DISCONNECT(
      EXPORTING
        IV_HANDLE = LV_HANDLE
    ).

*---2.解析出文件名，时间和标记
    LOOP AT LT_RESULT INTO LS_RESULT FROM 5.
      CLEAR:
       LV_CODE,
       LV_SIZE,
       LS_FILENAME.

      LV_CODE = LS_RESULT+0(4).
      CHECK LV_CODE &lt;&gt; &apos;226&apos;.  &quot; Transfer complete.

      LS_FILENAME-FILENAME = LS_RESULT+55.
      LS_FILENAME-CHGTIME  = LS_RESULT+42(12).
      LV_SIZE = LS_RESULT+30(11).
      CONDENSE LV_SIZE.
      IF LV_SIZE &lt;&gt; &apos;0&apos;.
        LS_FILENAME-ISFILE = &apos;N&apos;.   &quot;是文件
      ELSE.
        LS_FILENAME-ISFILE = &apos;Y&apos;.   &quot;是文件夹
      ENDIF.
      APPEND LS_FILENAME TO LT_FILENAME.
    ENDLOOP.

    CHECK LT_FILENAME IS NOT INITIAL.
*---3.呼叫ALV显示
    CALL FUNCTION &apos;Z_SD0_FTP_FILE_LIST&apos;
      EXPORTING
        IT_FILENAME       = LT_FILENAME
      IMPORTING
        OT_FILENAME_CLICK = LT_FILENAME_CLICK
        OT_FILENAME_OK    = LT_FILENAME_OK.

    IF LT_FILENAME_CLICK IS INITIAL AND LT_FILENAME_OK IS INITIAL.
      CLEAR:
        OV_FILEPATH.
      EXIT.
    ELSE.
      IF LT_FILENAME_CLICK IS NOT INITIAL.
        READ TABLE LT_FILENAME_CLICK INTO LS_FILENAME INDEX 1.
        IF SY-SUBRC = 0.
          IF LS_FILENAME-ISFILE = &apos;N&apos;.  &quot;Y代表文件夹N代表文件
            IF OV_FILEPATH IS INITIAL.
              OV_FILEPATH = LS_FILENAME-FILENAME.
            ELSE.
              OV_FILEPATH = OV_FILEPATH &amp;&amp; |/| &amp;&amp; LS_FILENAME-FILENAME.
            ENDIF.
          ELSE.
            LV_COUNT = COUNT( VAL = OV_FILEPATH  SUB = &apos;/&apos;).

            IF LS_FILENAME-FILENAME = &apos;..&apos;.  &quot;返回上一层
              IF LV_COUNT = 0.
                OV_FILEPATH = OV_FILEPATH.
              ELSEIF LV_COUNT = 1.
                OV_FILEPATH = SUBSTRING_BEFORE( VAL = OV_FILEPATH SUB = &apos;/&apos; OCC = 1 ).
              ELSEIF LV_COUNT &gt; 1.
                OV_FILEPATH = SUBSTRING_BEFORE( VAL = OV_FILEPATH SUB = &apos;/&apos; OCC = LV_COUNT ) .
                OV_FILEPATH = SUBSTRING_AFTER( VAL = OV_FILEPATH SUB = &apos;/&apos; OCC = COUNT( VAL = OV_FILEPATH  SUB = &apos;/&apos;) ).
              ENDIF.
            ELSEIF LS_FILENAME-FILENAME = &apos;.&apos;.&quot;返回根目录
              IF LV_COUNT = 0.
                OV_FILEPATH = OV_FILEPATH.
              ELSEIF LV_COUNT &gt; 0.
                OV_FILEPATH = SUBSTRING_BEFORE( VAL = OV_FILEPATH SUB = &apos;/&apos; OCC = 1 ).
              ENDIF.
            ELSE.
              IF OV_FILEPATH IS INITIAL.
                OV_FILEPATH = LS_FILENAME-FILENAME.
              ELSE.
                OV_FILEPATH = OV_FILEPATH &amp;&amp; |/| &amp;&amp; LS_FILENAME-FILENAME.
              ENDIF.
            ENDIF.

            FTP_OPEN_FILE_LIST(
            EXPORTING
               IV_USER = IV_USER
               IV_HOST = IV_HOST
              CHANGING
                OV_SPWD = OV_SPWD
                OV_FLG_ERR = OV_FLG_ERR
                OV_FILEPATH = OV_FILEPATH
            ).
            IF OV_FLG_ERR IS NOT INITIAL.
              CLEAR:
               OV_FILEPATH.
              EXIT.
            ENDIF.
          ENDIF.

        ENDIF.
      ELSEIF LT_FILENAME_OK IS NOT INITIAL.
        READ TABLE LT_FILENAME_OK INTO DATA(LS_FILENAME_OK) INDEX 1.
        IF SY-SUBRC = 0.
          IF OV_FILEPATH IS INITIAL.
            OV_FILEPATH = LS_FILENAME_OK-FILENAME.
          ELSE.
            OV_FILEPATH = OV_FILEPATH &amp;&amp; |/| &amp;&amp; LS_FILENAME_OK-FILENAME.
          ENDIF.
        ENDIF.
      ELSE.
        CLEAR:
         OV_FILEPATH.
        EXIT.
      ENDIF.

    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" VERSION="1" LANGU="1" DESCRIPT="上传文件到FTP" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" SCONAME="IV_HANDLE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="I"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" SCONAME="IV_LPATHFILE" VERSION="1" LANGU="1" DESCRIPT="本地文件，包含路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" SCONAME="IV_FFILE" VERSION="1" LANGU="1" DESCRIPT="FTP文件名" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" SCONAME="IV_FPATH" VERSION="1" LANGU="1" DESCRIPT="FTP路径" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="C"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_PUT_FILE" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <source>METHOD FTP_PUT_FILE.
    DATA:
      LV_TXT         TYPE MSGTXT,
      COMMETEXT(255) TYPE C,
      COMPRESS       TYPE C VALUE &apos;N&apos;,
      LT_RESULT      TYPE TTY_FTP_RESULT.

    IF IV_FPATH IS NOT INITIAL.
      CONCATENATE &apos;cd&apos; IV_FPATH INTO COMMETEXT SEPARATED BY SPACE.
      CALL FUNCTION &apos;FTP_COMMAND&apos;
        EXPORTING
          HANDLE        = IV_HANDLE
          COMMAND       = COMMETEXT
          COMPRESS      = COMPRESS
        TABLES
          DATA          = LT_RESULT
        EXCEPTIONS
          TCPIP_ERROR   = 1
          COMMAND_ERROR = 2
          DATA_ERROR    = 3
          OTHERS        = 4.
      IF SY-SUBRC &lt;&gt; 0.
        OV_FLG_ERR = C_ON.

        READ TABLE LT_RESULT INTO DATA(LS_RESULT) INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
        RETURN.
      ENDIF.

    ENDIF.

    CLEAR LT_RESULT.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = &apos;binary&apos;
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.
      RETURN.
    ENDIF.

    CLEAR LT_RESULT.

    IV_LPATHFILE = &apos;&quot;&apos; &amp;&amp; IV_LPATHFILE &amp;&amp; &apos;&quot;&apos;.
    IV_FFILE = &apos;&quot;&apos; &amp;&amp; IV_FFILE &amp;&amp; &apos;&quot;&apos;.

    CONCATENATE &apos;put&apos; IV_LPATHFILE IV_FFILE INTO COMMETEXT SEPARATED BY SPACE.
    CALL FUNCTION &apos;FTP_COMMAND&apos;
      EXPORTING
        HANDLE        = IV_HANDLE
        COMMAND       = COMMETEXT
        COMPRESS      = COMPRESS
      TABLES
        DATA          = LT_RESULT
      EXCEPTIONS
        TCPIP_ERROR   = 1
        COMMAND_ERROR = 2
        DATA_ERROR    = 3
        OTHERS        = 4.
    IF SY-SUBRC &lt;&gt; 0.
      OV_FLG_ERR = C_ON.
        READ TABLE LT_RESULT INTO LS_RESULT INDEX 1.
        MESSAGE E000(ZSD01) WITH LS_RESULT-LINE INTO LV_TXT.

      RETURN.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_SPLIT_FILEPATH" VERSION="1" LANGU="1" DESCRIPT="拆分URL中的文件路径和文件名" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_SPLIT_FILEPATH" SCONAME="IV_URI" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_SPLIT_FILEPATH" SCONAME="OV_FPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="FTP_SPLIT_FILEPATH" SCONAME="OV_FFILE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD FTP_SPLIT_FILEPATH.

********************************
*拆分路径和文件
********************************

    DATA:
      LEN TYPE I.
    LEN = STRLEN( IV_URI ) - 1.
    WHILE LEN &gt; 0.
*     all other
      IF IV_URI+LEN(1) = &apos;\&apos;  OR IV_URI+LEN(1) = &apos;/&apos;.
        EXIT.
      ENDIF.
      LEN = LEN - 1.
    ENDWHILE.
    IF LEN &gt; 0.
      OV_FPATH = IV_URI+0(LEN).
      LEN = LEN + 1.
      OV_FFILE = IV_URI+LEN.
    ELSE.
      OV_FFILE = IV_URI.
      CLEAR OV_FPATH.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="IGNORE_QUOTATION" VERSION="1" LANGU="1" DESCRIPT="无视引号" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="IGNORE_QUOTATION" SCONAME="OV_VALUE" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>METHOD IGNORE_QUOTATION.
    DATA:
      LV_OFF TYPE I,
      LV_LEN TYPE I.

    CHECK OV_VALUE IS NOT INITIAL.

    IF OV_VALUE+0(1) = &apos;&quot;&apos;.
      REPLACE SECTION OFFSET 0  LENGTH 1 OF:
                      OV_VALUE WITH SPACE.
    ENDIF.

    CHECK OV_VALUE IS NOT INITIAL.
    LV_OFF = STRLEN( OV_VALUE ) - 1.
    IF OV_VALUE+LV_OFF(1) = &apos;&quot;&apos;.
      REPLACE SECTION OFFSET LV_OFF LENGTH 1 OF:
                      OV_VALUE WITH SPACE.
    ENDIF.

  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_RAW" VERSION="1" LANGU="1" DESCRIPT="上传文件到sap内表" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_RAW" SCONAME="IV_FILEPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_RAW" SCONAME="IV_FLG_HEADLINE" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_RAW" SCONAME="OV_FLG_ERR" VERSION="1" LANGU="1" DESCRIPT="单一字符标识" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR1"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_RAW" SCONAME="OT_UPFILE_ST_RAW" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <source>METHOD UPLOAD_TO_RAW.

    DATA LV_FILENAME TYPE LOCALFILE.
    DATA LV_FILENAME_STR TYPE STRING.
    DATA LT_RAW TYPE TRUXS_T_TEXT_DATA.
    DATA LV_HEADER_LENGTH TYPE I.
    DATA LV_EXT TYPE CHAR30.
    DATA LV_LEN TYPE I.

    LV_FILENAME_STR = IV_FILEPATH.
    CALL FUNCTION &apos;/SAPDMC/LSM_PATH_FILE_SPLIT&apos;
      EXPORTING
        PATHFILE = LV_FILENAME_STR
      IMPORTING
        FILENAME = LV_FILENAME.

    CALL FUNCTION &apos;TRINT_FILE_GET_EXTENSION&apos;
      EXPORTING
        FILENAME  = LV_FILENAME
      IMPORTING
        EXTENSION = LV_EXT.

    CASE LV_EXT.
      WHEN &apos;XLS&apos; OR &apos;XLSX&apos;.
        LV_LEN = STRLEN( IV_FILEPATH ).
        IF LV_LEN &gt; 120.
          OV_FLG_ERR = C_ON.
          MESSAGE S010(AD) DISPLAY LIKE C_E
            WITH &apos;File path too long! (120 chars)&apos;.
          RETURN.
        ENDIF.

        IF SY-UNAME EQ &apos;TEST&apos;.
*          excel列隐藏也能正常导入
          LV_FILENAME = IV_FILEPATH.
          CALL FUNCTION &apos;TEXT_CONVERT_XLS_TO_SAP&apos;
            EXPORTING
              I_LINE_HEADER        = IV_FLG_HEADLINE
              I_TAB_RAW_DATA       = LT_RAW
              I_FILENAME           = LV_FILENAME
            TABLES
              I_TAB_CONVERTED_DATA = OT_UPFILE_ST_RAW
            EXCEPTIONS
              CONVERSION_FAILED    = 1
              OTHERS               = 2.
          IF SY-SUBRC &lt;&gt; 0.
            MESSAGE ID SY-MSGID TYPE &apos;S&apos; NUMBER SY-MSGNO
                    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            RETURN.
          ENDIF.
        ELSE.
*          excel列隐藏不能能正常导入
          DATA:LT_LIB_EXCEL     TYPE  Z_T_ALSMEX_TABLINE3,
               LS_LIB_EXCEL     LIKE LINE OF LT_LIB_EXCEL,
               LV_LIB_BEGIN_COL TYPE I,
               LV_LIB_BEGIN_ROW TYPE I,
               LV_LIB_END_COL   TYPE I,
               LV_LIB_END_ROW   TYPE I.

          FIELD-SYMBOLS:
            &lt;LIB_FS_FIELD&gt;  TYPE ANY,
            &lt;LIB_FS_STRUCT&gt; TYPE ANY.

          LV_FILENAME = IV_FILEPATH.
          IF IV_FLG_HEADLINE IS INITIAL.
            LV_LIB_BEGIN_ROW = 1.
          ELSE.
            LV_LIB_BEGIN_ROW = 2.
          ENDIF.

          LV_LIB_BEGIN_COL = 1.
          LV_LIB_END_COL   = 255.
          LV_LIB_END_ROW   = 9999.

          CALL FUNCTION &apos;ZALSM_EXCEL_TO_INTERNAL_TABLE3&apos;
            EXPORTING
              FILENAME                = LV_FILENAME
              I_BEGIN_COL             = LV_LIB_BEGIN_COL
              I_BEGIN_ROW             = LV_LIB_BEGIN_ROW
              I_END_COL               = LV_LIB_END_COL
              I_END_ROW               = LV_LIB_END_ROW
            TABLES
              INTERN                  = LT_LIB_EXCEL
            EXCEPTIONS
              INCONSISTENT_PARAMETERS = 1
              UPLOAD_OLE              = 2
              OTHERS                  = 3.
          IF SY-SUBRC &lt;&gt; 0.
            OV_FLG_ERR = C_ON.
            MESSAGE ID SY-MSGID TYPE &apos;S&apos; NUMBER SY-MSGNO
                    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
            RETURN.
          ENDIF.

          DATA:
            LO_LIB_STRUCT TYPE REF TO DATA.

          CREATE DATA LO_LIB_STRUCT LIKE LINE OF OT_UPFILE_ST_RAW.
          ASSIGN LO_LIB_STRUCT-&gt;* TO &lt;LIB_FS_STRUCT&gt;.
          CHECK &lt;LIB_FS_STRUCT&gt; IS ASSIGNED.

          LOOP AT LT_LIB_EXCEL INTO LS_LIB_EXCEL.
            UNASSIGN &lt;LIB_FS_FIELD&gt;.
            ASSIGN COMPONENT LS_LIB_EXCEL-COL OF STRUCTURE &lt;LIB_FS_STRUCT&gt;  TO &lt;LIB_FS_FIELD&gt;.
            IF &lt;LIB_FS_FIELD&gt; IS ASSIGNED.
              &lt;LIB_FS_FIELD&gt; = LS_LIB_EXCEL-VALUE.
            ENDIF.
            AT END OF ROW.
              APPEND &lt;LIB_FS_STRUCT&gt;  TO OT_UPFILE_ST_RAW.
              CLEAR &lt;LIB_FS_STRUCT&gt; .
            ENDAT.
          ENDLOOP.
        ENDIF.
      WHEN OTHERS.
        OV_FLG_ERR = C_ON.
        MESSAGE S010(AD) DISPLAY LIKE C_E
          WITH &apos;File ext. is not XLS, XLSX&apos;.
        RETURN.
    ENDCASE.
  ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_XSTRING" VERSION="1" LANGU="1" DESCRIPT="上传文件到字节流中去" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_XSTRING" SCONAME="IV_FILEPATH" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <parameter CLSNAME="ZCL_SD_TOOL_FILE" CMPNAME="UPLOAD_TO_XSTRING" SCONAME="OV_XSTRING" VERSION="1" LANGU="1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="XSTRING"/>
   <source>method UPLOAD_TO_XSTRING.
    DATA:
      LT_DATA     TYPE SOLIX_TAB,
      LV_LEN      TYPE I,
      LV_FILENAME TYPE STRING.

    CLEAR:
      OV_XSTRING,
      LT_DATA,
      LV_LEN.

    LV_FILENAME = IV_FILEPATH.

*    上传文件到内部
    CALL FUNCTION &apos;GUI_UPLOAD&apos;
      EXPORTING
        FILENAME                = LV_FILENAME
        FILETYPE                = &apos;BIN&apos;
*       CODEPAGE                = &apos;4110&apos;
      IMPORTING
        FILELENGTH              = LV_LEN
      TABLES
        DATA_TAB                = LT_DATA &quot;X类型内表
      EXCEPTIONS
        FILE_OPEN_ERROR         = 1
        FILE_READ_ERROR         = 2
        NO_BATCH                = 3
        GUI_REFUSE_FILETRANSFER = 4
        INVALID_TYPE            = 5
        NO_AUTHORITY            = 6
        UNKNOWN_ERROR           = 7
        BAD_DATA_FORMAT         = 8
        HEADER_NOT_ALLOWED      = 9
        SEPARATOR_NOT_ALLOWED   = 10
        HEADER_TOO_LONG         = 11
        UNKNOWN_DP_ERROR        = 12
        ACCESS_DENIED           = 13
        DP_OUT_OF_MEMORY        = 14
        DISK_FULL               = 15
        DP_TIMEOUT              = 16
        OTHERS                  = 17.
    IF SY-SUBRC &lt;&gt; 0.

    ENDIF.

    CHECK LT_DATA[] IS NOT INITIAL.

    &quot;将内表以X类型拼接成XString字符串
    CALL FUNCTION &apos;SCMS_BINARY_TO_XSTRING&apos;
      EXPORTING
        INPUT_LENGTH = LV_LEN
      IMPORTING
        BUFFER       = OV_XSTRING
      TABLES
        BINARY_TAB   = LT_DATA.
  endmethod.</source>
  </method>
 </CLAS>
 <FUGR AREA="Z_SD038" SPRAS="1" AREAT="DDIC工具">
  <functionGroupDocumentation/>
  <mainprogram NAME="SAPLZ_SD038" VARCL="X" DBAPL="S" DBNA="D$" SUBC="F" APPL="S" RMAND="008" RLOAD="1" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
   <textPool/>
   <source>*******************************************************************
*   System-defined Include-files.                                 *
*******************************************************************
  INCLUDE LZ_SD038TOP.                       &quot; Global Data
  INCLUDE LZ_SD038UXX.                       &quot; Function Modules

*******************************************************************
*   User-defined Include-files (if necessary).                    *
*******************************************************************
* INCLUDE LZ_SD038F...                       &quot; Subroutines
* INCLUDE LZ_SD038O...                       &quot; PBO-Modules
* INCLUDE LZ_SD038I...                       &quot; PAI-Modules
* INCLUDE LZ_SD038E...                       &quot; Events
* INCLUDE LZ_SD038P...                       &quot; Local class implement.
* INCLUDE LZ_SD038T99.                       &quot; ABAP Unit tests</source>
  </mainprogram>
  <includeprograms>
   <include NAME="LZ_SD038TOP" VARCL="X" DBAPL="S" DBNA="D$" SUBC="I" APPL="S" RMAND="008" FIXPT="X" LDBNAME="D$S" UCCHECK="X">
    <include_source>FUNCTION-POOL Z_SD038.                      &quot;MESSAGE-ID ..

* INCLUDE LZ_SD038D...                       &quot; Local class definition</include_source>
   </include>
  </includeprograms>
  <functionmodules>
   <functionmodule NAME="Z_SD0_CREATE_ELEMENT" STEXT="创建dataelement">
    <importing PARAMETER="ROLLNAME" TYP="ROLLNAME"/>
    <importing PARAMETER="DESCRIPTION" TYP="AS4TEXT"/>
    <importing PARAMETER="DDLANGUAGE" DEFAULT="SY-LANGU" OPTIONAL="X" TYP="DDLANGUAGE"/>
    <importing PARAMETER="DOMNAME" OPTIONAL="X" TYP="DOMNAME"/>
    <importing PARAMETER="ROUTPUTLEN" OPTIONAL="X" TYP="DDLENG"/>
    <importing PARAMETER="MEMORYID" OPTIONAL="X" TYP="MEMORYID"/>
    <importing PARAMETER="LOGFLAG" OPTIONAL="X" TYP="LOGFLAG"/>
    <importing PARAMETER="REPTEXT" OPTIONAL="X" TYP="REPTEXT"/>
    <importing PARAMETER="SCRTEXT_S" OPTIONAL="X" TYP="SCRTEXT_S"/>
    <importing PARAMETER="SCRTEXT_M" OPTIONAL="X" TYP="SCRTEXT_M"/>
    <importing PARAMETER="SCRTEXT_L" OPTIONAL="X" TYP="SCRTEXT_L"/>
    <importing PARAMETER="DEVCLASS" DEFAULT="&apos;$TMP&apos;" TYP="DEVCLASS"/>
    <importing PARAMETER="REQUEST_WB" OPTIONAL="X" TYP="TRKORR"/>
    <tables PARAMETER="RETURN" OPTIONAL="X" TYP="BAPIRETTAB"/>
    <documentation PARAMETER="ROLLNAME" KIND="P" STEXT="数据元素 (语义域)" INDEX=" 001"/>
    <documentation PARAMETER="DESCRIPTION" KIND="P" STEXT="资源库对象的简短描述" INDEX=" 002"/>
    <documentation PARAMETER="DDLANGUAGE" KIND="P" STEXT="语言代码" INDEX=" 003"/>
    <documentation PARAMETER="DOMNAME" KIND="P" STEXT="定义域名" INDEX=" 004"/>
    <documentation PARAMETER="ROUTPUTLEN" KIND="P" STEXT="长度（字符数）" INDEX=" 005"/>
    <documentation PARAMETER="MEMORYID" KIND="P" STEXT="设置/获取参数标识" INDEX=" 006"/>
    <documentation PARAMETER="LOGFLAG" KIND="P" STEXT="  写变化文档指示符" INDEX=" 007"/>
    <documentation PARAMETER="REPTEXT" KIND="P" STEXT="标题" INDEX=" 008"/>
    <documentation PARAMETER="SCRTEXT_S" KIND="P" STEXT="短字段标签" INDEX=" 009"/>
    <documentation PARAMETER="SCRTEXT_M" KIND="P" STEXT="中字段标签" INDEX=" 010"/>
    <documentation PARAMETER="SCRTEXT_L" KIND="P" STEXT="长字段标签" INDEX=" 011"/>
    <documentation PARAMETER="DEVCLASS" KIND="P" STEXT="包" INDEX=" 012"/>
    <documentation PARAMETER="REQUEST_WB" KIND="P" STEXT="请求/任务" INDEX=" 013"/>
    <documentation PARAMETER="RETURN" KIND="P" STEXT="含 BAPI 返回信息的表" INDEX=" 014"/>
    <fm_source_new>DATA: LT_NEW_OBJECT         TYPE COMT_GOX_DEF_HEADER,
      LT_OLD_OBJECT         LIKE LT_NEW_OBJECT,
      LV_ELEMENT_NAME       TYPE CHAR32,
      LV_DEVCLASS           TYPE DEVCLASS,
      LV_REQUEST_WB         TYPE TRKORR,
      LS_NEW_OBJECT         LIKE LINE OF LT_NEW_OBJECT,
      LS_NEW_OBJECT_DETAILS TYPE LINE OF COMT_GOX_TABLE_ENTRY_FIELDS,
      ET_BAPIRETURN         TYPE BAPIRETTAB,
      ET_TRANSPORT          TYPE COMT_GOX_TRANS_OBJECT.
LV_ELEMENT_NAME  = ROLLNAME.
LV_REQUEST_WB    = REQUEST_WB.
MOVE DEVCLASS                    TO LV_DEVCLASS.
MOVE &apos;ELEMENT&apos;                   TO LS_NEW_OBJECT-OBJECT_TYPE.
MOVE ROLLNAME                    TO LS_NEW_OBJECT-OBJECT_NAME.
TRY.
    DATA(LV_GUID) = CL_SYSTEM_UUID=&gt;IF_SYSTEM_UUID_STATIC~CREATE_UUID_C32( ).
  CATCH CX_UUID_ERROR .
ENDTRY.
MOVE     LV_GUID                 TO LS_NEW_OBJECT-KEY_GUID          .
DATA(LV_PARENT_GUID)              =  LS_NEW_OBJECT-KEY_GUID.
MOVE    &apos;DESCRIPTION&apos;            TO LS_NEW_OBJECT_DETAILS-FIELDNAME.&quot;描述
MOVE     DESCRIPTION             TO LS_NEW_OBJECT_DETAILS-FIELDVALUE.
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;DOMNAME&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     DOMNAME                 TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;DDLANGUAGE&apos;             TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .
IF DDLANGUAGE IS INITIAL .
  MOVE     DDLANGUAGE            TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
ELSE.
  MOVE     SY-LANGU              TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
ENDIF.
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;ROUTPUTLEN&apos;             TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     ROUTPUTLEN              TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

*CLEAR    LS_NEW_OBJECT_DETAILS.
*MOVE    &apos;MEMORYID&apos;             TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
*MOVE     MEMORYID              TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
*APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;LOGFLAG&apos;             TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     LOGFLAG              TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;REPTEXT&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     REPTEXT                 TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;HEADLEN&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     STRLEN( REPTEXT )       TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRTEXT_S&apos;              TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     SCRTEXT_S               TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRLEN1&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     STRLEN( SCRTEXT_S )       TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRTEXT_M&apos;              TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     SCRTEXT_M               TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRLEN2&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     STRLEN( SCRTEXT_M )       TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRTEXT_L&apos;              TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     SCRTEXT_L               TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.

CLEAR    LS_NEW_OBJECT_DETAILS.
MOVE    &apos;SCRLEN3&apos;                TO LS_NEW_OBJECT_DETAILS-FIELDNAME  .&quot;
MOVE     STRLEN( SCRTEXT_L )       TO LS_NEW_OBJECT_DETAILS-FIELDVALUE .
APPEND   LS_NEW_OBJECT_DETAILS   TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
IF DESCRIPTION IS NOT INITIAL.
DATA LS_OBJECT_TEXT TYPE COMS_GOX_DEF_TEXT.
LS_OBJECT_TEXT-LANGUAGE = DDLANGUAGE.
LS_OBJECT_TEXT-DESCRIPTION     = DESCRIPTION.
APPEND LS_OBJECT_TEXT TO LS_NEW_OBJECT-OBJECT_TEXT[].
ENDIF.
APPEND LS_NEW_OBJECT TO LT_NEW_OBJECT.
CLEAR LS_NEW_OBJECT.

MOVE     DEVCLASS                TO LV_DEVCLASS .
MOVE     REQUEST_WB              TO LV_REQUEST_WB .
  CALL FUNCTION &apos;GOX_GEN_DTEL_STD&apos;
    EXPORTING
      IV_OBJECT_NAME       = LV_ELEMENT_NAME
      IT_OBJECT_NEW        = LT_NEW_OBJECT
      IT_OBJECT_OLD        = LT_OLD_OBJECT
      IV_DEVCLASS          = LV_DEVCLASS
      IV_REQUEST_WB        = LV_REQUEST_WB
    IMPORTING
      ET_BAPIRETURN        = ET_BAPIRETURN
      ET_TRANSPORT         = ET_TRANSPORT
            .
    APPEND LINES OF ET_BAPIRETURN TO RETURN.
DATA: LV_DDOBJNAME TYPE DDOBJNAME,
      LS_DD02V     TYPE DD02V.
LV_DDOBJNAME = LV_ELEMENT_NAME.
DATA GOTSTATE  TYPE DDGOTSTATE.
DATA DD04V_WA  TYPE DD04V.
DATA TPARA_WA  TYPE TPARA.
CALL FUNCTION &apos;DDIF_DTEL_GET&apos;
  EXPORTING
    NAME                = LV_DDOBJNAME
    STATE               = &apos;A&apos;
    LANGU               = SY-LANGU
  IMPORTING
    GOTSTATE            = GOTSTATE
    DD04V_WA            = DD04V_WA
    TPARA_WA            = TPARA_WA
  EXCEPTIONS
    ILLEGAL_INPUT       = 1
          .
CALL FUNCTION &apos;DDIF_DTEL_PUT&apos;
  EXPORTING
    NAME                    = LV_DDOBJNAME
    DD04V_WA                = DD04V_WA
 EXCEPTIONS
   DTEL_NOT_FOUND          = 1
   NAME_INCONSISTENT       = 2
   DTEL_INCONSISTENT       = 3
   PUT_FAILURE             = 4
   PUT_REFUSED             = 5
          .
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.
* ACTIVE TABLE
CALL FUNCTION &apos;DDIF_DTEL_ACTIVATE&apos;
  EXPORTING
    NAME     = LV_DDOBJNAME
    AUTH_CHK = &apos; &apos;
    .
CHECK SY-SUBRC = 0.</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
   <functionmodule NAME="Z_SD0_CREATE_DOMAIN" STEXT="创建Domain">
    <importing PARAMETER="DEVCLASS" DEFAULT="&apos;$TMP&apos;" TYP="DEVCLASS"/>
    <importing PARAMETER="IV_REQUEST_WB" OPTIONAL="X" TYP="TRKORR"/>
    <importing PARAMETER="DOMANAME" TYP="DOMNAME"/>
    <importing PARAMETER="DDLANGUAGE" DEFAULT="SY-LANGU" OPTIONAL="X" TYP="DDLANGUAGE"/>
    <importing PARAMETER="DESCRIPTION" OPTIONAL="X" TYP="AS4TEXT"/>
    <importing PARAMETER="DATATYPE" TYP="DATATYPE_D"/>
    <importing PARAMETER="LENG" TYP="LENG"/>
    <importing PARAMETER="OUTLEN" OPTIONAL="X" TYP="OUTPUTLEN"/>
    <importing PARAMETER="DECIMALS" OPTIONAL="X" TYP="DECIMALS"/>
    <importing PARAMETER="LOWERCASE" OPTIONAL="X" TYP="LOWERCASE"/>
    <importing PARAMETER="SIGNFLAG" OPTIONAL="X" TYP="SIGNFLAG"/>
    <importing PARAMETER="VALEXI" OPTIONAL="X" TYP="VALEXI"/>
    <importing PARAMETER="CONVEXIT" OPTIONAL="X" TYP="CONVEXIT"/>
    <tables PARAMETER="ET_DD07V" DBSTRUCT="DD07V" OPTIONAL="X"/>
    <tables PARAMETER="RETURN" DBSTRUCT="BAPIRETURN"/>
    <documentation PARAMETER="DEVCLASS" KIND="P" STEXT="包" INDEX=" 001"/>
    <documentation PARAMETER="IV_REQUEST_WB" KIND="P" STEXT="请求/任务" INDEX=" 002"/>
    <documentation PARAMETER="DOMANAME" KIND="P" STEXT="定义域名" INDEX=" 003"/>
    <documentation PARAMETER="DDLANGUAGE" KIND="P" STEXT="语言代码" INDEX=" 004"/>
    <documentation PARAMETER="DESCRIPTION" KIND="P" STEXT="表条目的字段值" INDEX=" 005"/>
    <documentation PARAMETER="DATATYPE" KIND="P" STEXT="ABAP 字典中的数据类型" INDEX=" 006"/>
    <documentation PARAMETER="LENG" KIND="P" STEXT="长度指数" INDEX=" 007"/>
    <documentation PARAMETER="OUTLEN" KIND="P" STEXT="输出长度" INDEX=" 008"/>
    <documentation PARAMETER="DECIMALS" KIND="P" STEXT="小数位数" INDEX=" 009"/>
    <documentation PARAMETER="LOWERCASE" KIND="P" STEXT="允许/不允许小写字母" INDEX=" 010"/>
    <documentation PARAMETER="SIGNFLAG" KIND="P" STEXT="数值域的符号标志" INDEX=" 011"/>
    <documentation PARAMETER="VALEXI" KIND="P" STEXT="固定值存在" INDEX=" 012"/>
    <documentation PARAMETER="CONVEXIT" KIND="P" STEXT="转换例程" INDEX=" 013"/>
    <documentation PARAMETER="ET_DD07V" KIND="P" STEXT="Generated Table for View" INDEX=" 014"/>
    <documentation PARAMETER="RETURN" KIND="P" STEXT="返回参数" INDEX=" 015"/>
    <fm_source_new>DATA: LT_NEW_OBJECT         TYPE COMT_GOX_DEF_HEADER,
      LT_OLD_OBJECT         LIKE LT_NEW_OBJECT,
      LV_DOMA_NAME          TYPE CHAR32,
      LV_DEVCLASS           TYPE DEVCLASS,
      LV_REQUEST_WB         TYPE TRKORR,
      LS_NEW_OBJECT         LIKE LINE OF LT_NEW_OBJECT,
      LS_NEW_OBJECT_DETAILS TYPE LINE OF COMT_GOX_TABLE_ENTRY_FIELDS,
      LT_RETURNTAB          TYPE BAPIRETTAB,
      LS_RETURN             LIKE LINE OF LT_RETURNTAB.

LV_DOMA_NAME  = DOMANAME.
LV_REQUEST_WB = IV_REQUEST_WB.
MOVE DEVCLASS TO LV_DEVCLASS.

LS_NEW_OBJECT-OBJECT_TYPE = &apos;DOMA&apos;.
LS_NEW_OBJECT-OBJECT_NAME = DOMANAME.

TRY.
    DATA(LV_GUID) = CL_SYSTEM_UUID=&gt;IF_SYSTEM_UUID_STATIC~CREATE_UUID_C32( ).
  CATCH CX_UUID_ERROR .
ENDTRY.

MOVE LV_GUID                     TO LS_NEW_OBJECT-KEY_GUID          .
DATA(LV_PARENT_GUID)             =  LS_NEW_OBJECT-KEY_GUID.
MOVE   &apos;DDLANGUAGE&apos;              TO LS_NEW_OBJECT_DETAILS-FIELDNAME.&quot;语言
MOVE   DDLANGUAGE                TO LS_NEW_OBJECT_DETAILS-FIELDVALUE.
APPEND LS_NEW_OBJECT_DETAILS     TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME  = &apos;DATATYPE&apos;.&quot;数据类型
LS_NEW_OBJECT_DETAILS-FIELDVALUE = DATATYPE.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.

IF DESCRIPTION IS NOT INITIAL.
DATA LS_OBJECT_TEXT TYPE COMS_GOX_DEF_TEXT.
LS_OBJECT_TEXT-LANGUAGE = DDLANGUAGE.
LS_OBJECT_TEXT-DESCRIPTION     = DESCRIPTION.
APPEND LS_OBJECT_TEXT TO LS_NEW_OBJECT-OBJECT_TEXT[].
ENDIF.

CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;LENG&apos;.&quot;类型长度
LS_NEW_OBJECT_DETAILS-FIELDVALUE = LENG.
SHIFT LS_NEW_OBJECT_DETAILS-FIELDVALUE LEFT DELETING LEADING SPACE.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
IF OUTLEN IS NOT INITIAL .
  LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;OUTPUTLEN&apos;.&quot;输出长度 默认和类型长度一致
  LS_NEW_OBJECT_DETAILS-FIELDVALUE = OUTLEN.
  SHIFT LS_NEW_OBJECT_DETAILS-FIELDVALUE LEFT DELETING LEADING SPACE.
  APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
ENDIF.

CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;DECIMALS&apos;.&quot;小数位
LS_NEW_OBJECT_DETAILS-FIELDVALUE = DECIMALS.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;LOWERCASE&apos;.&quot;是否区分大小写
LS_NEW_OBJECT_DETAILS-FIELDVALUE = LOWERCASE.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.

CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;SIGNFLAG&apos;.&quot;符号
LS_NEW_OBJECT_DETAILS-FIELDVALUE = SIGNFLAG.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;VALEXI&apos;.&quot;是否存在固定值
LS_NEW_OBJECT_DETAILS-FIELDVALUE = VALEXI.
APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.

*CLEAR LS_NEW_OBJECT_DETAILS.
*LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;CONVEXIT&apos;.&quot;转换历程
*LS_NEW_OBJECT_DETAILS-FIELDVALUE = &apos;X&apos;.
*APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
CLEAR LS_NEW_OBJECT_DETAILS.
APPEND LS_NEW_OBJECT TO LT_NEW_OBJECT.
CLEAR LS_NEW_OBJECT.
IF ET_DD07V IS NOT INITIAL .
  LOOP AT ET_DD07V ASSIGNING FIELD-SYMBOL(&lt;FW_DD07V&gt;).
    LS_NEW_OBJECT-OBJECT_TYPE = &apos;DOMA_SET&apos;.
    TRY.
        LV_GUID = CL_SYSTEM_UUID=&gt;IF_SYSTEM_UUID_STATIC~CREATE_UUID_C32(
               ).
      CATCH CX_UUID_ERROR .
    ENDTRY.
    LS_NEW_OBJECT-KEY_GUID = LV_GUID.
    LS_NEW_OBJECT-PARENT_KEY = LV_PARENT_GUID.
    LV_PARENT_GUID = LV_GUID.
    &quot;域值

    CLEAR LS_NEW_OBJECT_DETAILS.
    LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;VALPOS&apos;.&quot;值关键字
    LS_NEW_OBJECT_DETAILS-FIELDVALUE = &lt;FW_DD07V&gt;-VALPOS.
    APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
    IF &lt;FW_DD07V&gt;-DDTEXT IS NOT INITIAL .
      CLEAR LS_NEW_OBJECT_DETAILS.
      LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;DDTEXT&apos;.&quot;简短描述
      LS_NEW_OBJECT_DETAILS-FIELDVALUE = &lt;FW_DD07V&gt;-DDTEXT.
      APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
    ENDIF.

    IF &lt;FW_DD07V&gt;-DOMVALUE_L IS NOT INITIAL .
      CLEAR LS_NEW_OBJECT_DETAILS.
      LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;DOMVALUE_L&apos;.&quot;下限值
      LS_NEW_OBJECT_DETAILS-FIELDVALUE = &lt;FW_DD07V&gt;-DOMVALUE_L.
      APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
    ENDIF.
    IF &lt;FW_DD07V&gt;-DOMVALUE_H IS NOT INITIAL .
      CLEAR LS_NEW_OBJECT_DETAILS.
      LS_NEW_OBJECT_DETAILS-FIELDNAME = &apos;DOMVALUE_H&apos;.&quot;DOMVALUE_H
      LS_NEW_OBJECT_DETAILS-FIELDVALUE = &lt;FW_DD07V&gt;-DOMVALUE_H.
      APPEND LS_NEW_OBJECT_DETAILS TO LS_NEW_OBJECT-DETAILS.
    ENDIF.

    APPEND LS_NEW_OBJECT TO LT_NEW_OBJECT.
    CLEAR LS_NEW_OBJECT.

  ENDLOOP.
ENDIF.

DATA ET_BAPIRETURN  TYPE BAPIRETTAB.
DATA ET_TRANSPORT   TYPE COMT_GOX_TRANS_OBJECT.

CALL FUNCTION &apos;GOX_GEN_DOMA_STD&apos;
  EXPORTING
    IV_OBJECT_NAME       = LV_DOMA_NAME
    IT_OBJECT_NEW        = LT_NEW_OBJECT
    IT_OBJECT_OLD        = LT_OLD_OBJECT
    IV_DEVCLASS          = LV_DEVCLASS
    IV_REQUEST_WB        = LV_REQUEST_WB
  IMPORTING
    ET_BAPIRETURN        = ET_BAPIRETURN
    ET_TRANSPORT         = ET_TRANSPORT
          .


  APPEND LINES OF ET_BAPIRETURN TO RETURN.

*CHECK ET_BAPIRETURN IS INITIAL.

DATA: LV_DDOBJNAME TYPE DDOBJNAME,
      LS_DD02V     TYPE DD02V.

LV_DDOBJNAME = LV_DOMA_NAME.
DATA NAME      TYPE DDOBJNAME.
DATA STATE     TYPE DDOBJSTATE.
DATA LANGU     TYPE SY-LANGU.
DATA GOTSTATE  TYPE DDGOTSTATE.
DATA DD01V_WA  TYPE DD01V.
DATA DD07V_TAB TYPE STANDARD TABLE OF DD07V.

CALL FUNCTION &apos;DDIF_DOMA_GET&apos;
  EXPORTING
    NAME                = LV_DDOBJNAME
    STATE               = &apos;A&apos;
    LANGU               = SY-LANGU
  IMPORTING
    GOTSTATE            = GOTSTATE
    DD01V_WA            = DD01V_WA
  TABLES
    DD07V_TAB           = DD07V_TAB
  EXCEPTIONS
    ILLEGAL_INPUT       = 1
          .

*DATA NAME      TYPE DDOBJNAME.
*DATA DD01V_WA  TYPE DD01V.
*DATA DD07V_TAB TYPE STANDARD TABLE OF DD07V.
*
CALL FUNCTION &apos;DDIF_DOMA_PUT&apos;
  EXPORTING
    NAME                    = LV_DDOBJNAME
    DD01V_WA                = DD01V_WA
  TABLES
    DD07V_TAB               = DD07V_TAB
  EXCEPTIONS
    DOMA_NOT_FOUND          = 1
    NAME_INCONSISTENT       = 2
    DOMA_INCONSISTENT       = 3
    PUT_FAILURE             = 4
    PUT_REFUSED             = 5
          .
  IF SY-SUBRC NE 0.
    RETURN.
  ENDIF.

* ACTIVE TABLE
CALL FUNCTION &apos;DDIF_DOMA_ACTIVATE&apos;
  EXPORTING
    NAME     = LV_DDOBJNAME
    AUTH_CHK = &apos; &apos;
    .

CHECK SY-SUBRC = 0.</fm_source_new>
    <functionModuleDocumentation/>
   </functionmodule>
  </functionmodules>
 </FUGR>
 <PROG NAME="YDEVTOOL_CREATE_DATAELEMT" VARCL="X" SUBC="1" RSTAT="T" RMAND="008" RLOAD="1" FIXPT="X" UCCHECK="X">
  <textPool>
   <language SPRAS="1">
    <textElement ID="I" KEY="001" ENTRY="文件path" LENGTH="16 "/>
    <textElement ID="R" ENTRY="批量创建数据元素" LENGTH="8 "/>
    <textElement ID="S" KEY="P_FPATH" ENTRY="        文件path" LENGTH="14 "/>
   </language>
  </textPool>
  <source>*&amp;---------------------------------------------------------------------*
*&amp; Report  YDEVTOOL_CREATE_DATAELEMT
*&amp;
*&amp;---------------------------------------------------------------------*
*&amp;
*&amp;
*&amp;---------------------------------------------------------------------*
REPORT YDEVTOOL_CREATE_DATAELEMT.

TYPES:
  BEGIN OF TY_FILE,
    ROLLNAME    TYPE  ROLLNAME,  &quot;数据元素 (语义域)
    DESCRIPTION TYPE  AS4TEXT,   &quot;资源库对象的简短描述
    LOGFLAG     TYPE  LOGFLAG,   &quot;写变化文档指示符
    DOMANAME    TYPE  DOMNAME,   &quot;定义域名
    DATATYPE    TYPE  DATATYPE_D,   &quot;字典中的数据类型
    LENG        TYPE  LENG,   &quot;长度指数
    LOWERCASE   TYPE  LOWERCASE,   &quot;允许/不允许小写字母
    DECIMALS    TYPE  DECIMALS,   &quot;小数位数
    SIGNFLAG    TYPE  SIGNFLAG,   &quot;数值域的符号标志
    CONVEXIT    TYPE  CONVEXIT,   &quot;转换例程
    DEVCLASS    TYPE  DEVCLASS,   &quot;包
    REQUEST_WB  TYPE  TRKORR,   &quot;请求/任务
    REPTEXT     TYPE  REPTEXT,   &quot;标题
    SCRTEXT_S   TYPE  SCRTEXT_S,   &quot;短字段标签
    SCRTEXT_M   TYPE  SCRTEXT_M,   &quot;中字段标签
    SCRTEXT_L   TYPE  SCRTEXT_L,   &quot;长字段标签
  END OF TY_FILE,
  TTY_FILE TYPE STANDARD TABLE OF TY_FILE.
DATA:
  LT_UPFILE_RAW TYPE TTY_FILE,
  LV_FILEPATH   TYPE STRING,
  LV_FLG_ERR    TYPE CHAR1.

* データ入出力先
SELECTION-SCREEN BEGIN OF BLOCK B01 WITH FRAME TITLE TEXT-001.
* ファイルパス
PARAMETERS P_FPATH  TYPE FILE.
SELECTION-SCREEN END OF BLOCK B01.

*----------------------------------------------------------------------*
*   F4 HELP
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FPATH.
  PERFORM F_FILE_OPEN_DIALOG_CALL.


*&amp;---------------------------------------------------------------------*
*&amp;      Form  f_file_open_dialog_call
*&amp;---------------------------------------------------------------------*
*       ファイルを開くダイアログを表示
*----------------------------------------------------------------------*
FORM F_FILE_OPEN_DIALOG_CALL.

  DATA:
    L_TAB_FILE TYPE FILETABLE,
    L_REC_FILE TYPE FILE_TABLE,
    L_WRK_RC   TYPE I.

  CALL METHOD CL_GUI_FRONTEND_SERVICES=&gt;FILE_OPEN_DIALOG
    CHANGING
      FILE_TABLE              = L_TAB_FILE
      RC                      = L_WRK_RC
    EXCEPTIONS
      FILE_OPEN_DIALOG_FAILED = 1
      CNTL_ERROR              = 2
      ERROR_NO_GUI            = 3
      NOT_SUPPORTED_BY_GUI    = 4
      OTHERS                  = 5.

  IF SY-SUBRC = 0.
    READ TABLE L_TAB_FILE INTO L_REC_FILE INDEX 1.
    P_FPATH = L_REC_FILE-FILENAME.

  ELSE.
    SET CURSOR FIELD &apos;P_FPATH&apos;.
    MESSAGE &apos;文件不存在&apos; TYPE &apos;S&apos;
           DISPLAY LIKE &apos;E&apos;.
  ENDIF.

ENDFORM.

START-OF-SELECTION.

  IF SY-SYSID = &apos;JCD&apos;.
  ELSE.
    RETURN.
  ENDIF.

  LV_FILEPATH = P_FPATH.
********************************
*     上传文件到内表中去
********************************
  ZCL_SD_TOOL_FILE=&gt;UPLOAD_TO_RAW(
    EXPORTING
      IV_FILEPATH = LV_FILEPATH
      IV_FLG_HEADLINE = &apos;X&apos;  &quot;带表头
    CHANGING
      OT_UPFILE_ST_RAW = LT_UPFILE_RAW
      OV_FLG_ERR = LV_FLG_ERR  ).
  IF LV_FLG_ERR  IS NOT INITIAL.
    LV_FLG_ERR = &apos;X&apos;.
    RETURN.
  ENDIF.

********************************
*更新处理！！！请慎重！无法回退
********************************
  IF SY-SYSID = &apos;JCD&apos;.
  ELSE.
    RETURN.
  ENDIF.
  DATA:
    LT_RETURN TYPE STANDARD TABLE OF BAPIRETURN,
    LT_BAPIRETTAB TYPE BAPIRETTAB.
  LOOP AT LT_UPFILE_RAW ASSIGNING FIELD-SYMBOL(&lt;FS_UPFILE_RAW&gt;).
    CLEAR: LT_RETURN,LT_BAPIRETTAB.
    IF &lt;FS_UPFILE_RAW&gt;-DEVCLASS IS INITIAL OR &lt;FS_UPFILE_RAW&gt;-REQUEST_WB IS INITIAL.
      &lt;FS_UPFILE_RAW&gt;-DEVCLASS = &apos;$TMP&apos;.
      CLEAR &lt;FS_UPFILE_RAW&gt;-REQUEST_WB.
    ENDIF.

    IF &lt;FS_UPFILE_RAW&gt;-DOMANAME+0(1) = &apos;Z&apos;.
    CALL FUNCTION &apos;Z_SD0_CREATE_DOMAIN&apos;
      EXPORTING
        DEVCLASS      = &lt;FS_UPFILE_RAW&gt;-DEVCLASS
        IV_REQUEST_WB = &lt;FS_UPFILE_RAW&gt;-REQUEST_WB
        DOMANAME      = &lt;FS_UPFILE_RAW&gt;-DOMANAME
*       DDLANGUAGE    =
        DESCRIPTION   = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION
        DATATYPE      = &lt;FS_UPFILE_RAW&gt;-DATATYPE
        LENG          = &lt;FS_UPFILE_RAW&gt;-LENG
*       OUTLEN        =
        DECIMALS      = &lt;FS_UPFILE_RAW&gt;-DECIMALS
        LOWERCASE     = &lt;FS_UPFILE_RAW&gt;-LOWERCASE
        SIGNFLAG      = &lt;FS_UPFILE_RAW&gt;-SIGNFLAG
        CONVEXIT      = &lt;FS_UPFILE_RAW&gt;-CONVEXIT
      TABLES
*       ET_DD07V      =
        RETURN        = LT_RETURN.

    READ TABLE LT_RETURN INTO DATA(LS_RETURN)
      WITH KEY TYPE = &apos;E&apos;.
    IF SY-SUBRC = 0.
      LV_FLG_ERR = &apos;X&apos;.
      BREAK-POINT.
      EXIT.
    ELSE.
      WAIT UP TO 1 SECONDS.
    ENDIF.
    ENDIF.
    IF &lt;FS_UPFILE_RAW&gt;-REPTEXT IS INITIAL.
      &lt;FS_UPFILE_RAW&gt;-REPTEXT = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION.
    ENDIF.

    IF &lt;FS_UPFILE_RAW&gt;-SCRTEXT_S IS INITIAL.
      &lt;FS_UPFILE_RAW&gt;-SCRTEXT_S = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION.
    ENDIF.

    IF &lt;FS_UPFILE_RAW&gt;-SCRTEXT_M IS INITIAL.
      &lt;FS_UPFILE_RAW&gt;-SCRTEXT_M = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION.
    ENDIF.

    IF &lt;FS_UPFILE_RAW&gt;-SCRTEXT_L IS INITIAL.
      &lt;FS_UPFILE_RAW&gt;-SCRTEXT_L = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION.
    ENDIF.

    CALL FUNCTION &apos;Z_SD0_CREATE_ELEMENT&apos;
      EXPORTING
        ROLLNAME    = &lt;FS_UPFILE_RAW&gt;-ROLLNAME
        DESCRIPTION = &lt;FS_UPFILE_RAW&gt;-DESCRIPTION
        DOMNAME     = &lt;FS_UPFILE_RAW&gt;-DOMANAME
        LOGFLAG     = &lt;FS_UPFILE_RAW&gt;-LOGFLAG
        REPTEXT     = &lt;FS_UPFILE_RAW&gt;-REPTEXT
        SCRTEXT_S   = &lt;FS_UPFILE_RAW&gt;-SCRTEXT_S
        SCRTEXT_M   = &lt;FS_UPFILE_RAW&gt;-SCRTEXT_M
        SCRTEXT_L   = &lt;FS_UPFILE_RAW&gt;-SCRTEXT_L
        DEVCLASS    = &lt;FS_UPFILE_RAW&gt;-DEVCLASS
        REQUEST_WB  = &lt;FS_UPFILE_RAW&gt;-REQUEST_WB
      TABLES
        RETURN      = LT_BAPIRETTAB.

    READ TABLE LT_BAPIRETTAB INTO DATA(LS_BAPRETURN)
      WITH KEY TYPE = &apos;E&apos;.
    IF SY-SUBRC = 0.
      LV_FLG_ERR = &apos;X&apos;.
      BREAK-POINT.
      EXIT.
    ENDIF.

  ENDLOOP.</source>
 </PROG>
</nugget>
